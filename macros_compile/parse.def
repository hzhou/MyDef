#---------------------------------------- 
#- parseblock()
fncode: parseblock($code)
    # $print parseblock: [$code->{name}] ...
    my $block=$code->{source}
    $if !$block
        warn "parseblock: undefined block [$code]\n"

    $call @parseblock_init

    my $indent=0
    parse_stack_push($code)

    my @last_line
    my $lindex=0;

    my @callback_stack; # &call
    my $pending_mode_pop;

    $while $lindex<@$block
        my $l=$block->[$lindex];
        $if $debug eq "compile"
            $call dump_line, compile
        $lindex++
        $cur_line++

        # -- such as DEBUG
        $call parse_catch_meta
        # -- such as indentation and BLOCK_n
        $call parse_filter_meta

        $if $cur_mode eq "PRINT"
            $call parse_line
        $elif $cur_mode eq "template"
            $if $l=~/^(\s*)\$call\s+(.+)/
                my ($func, $param)=("\$call", $2);
                my $len = MyDef::parseutil::get_indent_spaces($1)
                my $n = int($len/4)
                $if $len%4
                    $n++
                $for $i=0:$n
                    push @$out, "INDENT"
                $call parse_call_sub
                $for $i=0:$n
                    push @$out, "DEDENT"
            $else
                push @$out, $l
        $else
            $call compile_line
    parse_stack_pop()

#----------------------------------------------
subcode: compile_line
    # -- handle preproc and out-of-switch
    $if !$l
        # skip
    $elif $l=~/^\$\((.*)\)/
        my $preproc=$1
        my $tail=$';
        $call parse_preproc
    $elif $l=~/^\$:\s+(.*)/
        # Literal by-pass
        push @$out, $1
    $elif $l=~/^\$::\s+(.*)/
        my $t = $1
        expand_macro(\$t)
        push @$out, $t
    $elif $l=~/^BLOCK(\d*)\s*$/
        my $callback_idx=$1
        $if $#callback_block_stack <0
            $call parse_stack_dump
            $print "[$cur_file:$cur_line] $yellow{BLOCK called out of context!}"
        $else
            my $block=pop @callback_block_stack
            my $src_block
            $if $block->{name} eq "MULTIBLOCK"
                $if !$callback_idx
                    $callback_idx=1
                $src_block = $block->{blocks}->[$callback_idx-1]
            $else
                $src_block = $block
            $call @debug_callback_block
            parseblock($src_block)
            $block->{parsed_counter}++
            push @callback_block_stack, $block
    $else
        NormalParse:
        expand_macro(\$l);
        $while 1
            #-- parse_line could return a new $l
            #-- otherwise, last in the end breaks the loop
            $if $l=~/^(&call\d?|\$call|\$map\d?|\$nest|\$call-PRINT|\$call-template)\s+(.*)$/
                my ($func, $param)=($1, $2);
                $call parse_call_sub
            $elif $l=~/^\$-:\s*(.*)/
                push @$out, "MAKE_STRING:$1"
                my $subblock=grabblock($block, \$lindex)
                $global $MAKE_STRING
                $MAKE_STRING++
                parseblock({source=>$subblock, name=>"MAKE_STRING"})
                $MAKE_STRING--
                push @$out, "POP_STRING"
            $elif defined $parse_capture
                push @$parse_capture, $l
            $elif $MAKE_STRING>0
                push @$out, $l
            $else
                $call parse_line
            last
    # ---------------------------
    subcode: debug_callback_block
        my $depth=$#callback_block_stack+1
        $if $debug
            print "BLOCK [$cur_file:$cur_line] -> [$block->{cur_file}: $block->{cur_line}] depth=$depth: "
            $foreach $b in @callback_block_stack
                print "$b->{name}, "
            print $block->{name}, "\n"

######## Parsing routines  ######################################
subcode: parse_filter_meta
    # -- maintain indent level
    $if $l eq "SOURCE_INDENT" 
        $indent++; 
    $elif $l eq "SOURCE_DEDENT" 
        $indent-- if $indent>0; 

subcode: parse_catch_meta
    $if $l =~ /^DEBUG (\w+)/
        $if $1 eq "OFF"
            $call debug_off
        $elif $1 eq "MACRO"
            $call dump_deflist
        $else
            $call debug_on, $1
        next
    $elif $l =~ /^BLOCK RELEASE/i
        # docs/block_release.txt
        $block_stack[-1]->{eindex}=$block_stack[-2]->{eindex}
        next
    $elif $l =~/^SOURCE: (.*) - (\d+)$/
        $cur_file=$1
        $cur_line=$2
        next

subcode: parse_line
    my $callback_output
    my $callback_scope

    my $msg=$f_parse->($l);
    $if $msg
        $if ref($msg) eq "ARRAY"
            $(if:1)
                $call warn, return [ARRAY] deprecated. Use NEWBLOCK and &replace_output instead.
            $(else)
                # output is held until post processing
                #     eg. output_apple.pm $method
                $callback_output=$msg;
        $elif $msg=~/^NEWBLOCK(.*)/
            # check the new output for blocks
            #     eg. output.def single_block()
            $if $1=~/^-(.*)/
                $callback_scope=$1
            $callback_output=$named_blocks{NEWBLOCK}
        $elif $msg=~/^SKIPBLOCK(.*)/
            my $blk=grabblock($block, \$lindex)
            $if $1=~/^-(\w+)/
                $named_blocks{$1}=$blk
            last
        $elif $msg=~/^CALLBACK\b/
            # capture block into $named_blocks{last_grab}
            #     eg. output_plot.def: CALLBACK tex
            my $blk=grabblock($block, \$lindex)
            $(if:1)
                # expand $call etc.
                $global $parse_capture
                $parse_capture=[]
                parseblock({source=>$blk, name=>"capture"})
                $named_blocks{last_grab}=$parse_capture
                undef $parse_capture
            $(else)
                # as is
                $named_blocks{last_grab}=$blk
            $f_parse->($msg)
            $named_blocks{last_grab}=undef
        $elif $msg=~/^SET:(\w+)=(.*)/
            # set/reset definitions
            #     eg. cfunctions.pm get_pointer_type
            $deflist->[-1]->{$1}=$2;
            last
        $elif $msg=~/^PARSE:(.*)/
            $l=$1
            next
        # ---------------------------------
        # single_block and $method
        $if $callback_output
            my $subblock=grabblock($block, \$lindex)
            $foreach $l in @$callback_output
                $if $l=~/^BLOCK$/
                    #$f_parse->("SCOPE: CALLBACK");
                    parseblock({source=>$subblock, name=>"BLOCK", scope=>$callback_scope})
                    #$f_parse->("SCOPE: NONE");
                $elif $l=~/^PARSE:(.*)/
                    # apparently now redundant :)
                    $f_parse->($1)
                $else
                    $f_parse->($l)

######## Parse Output Stacks ######################################
fncode: parse_stack_push($code)
    $global $block_index=0
    $global @block_stack
    # ---- protect $out context
    $block_index++
    my $blk= {out=>$out, index=>$block_index, eindex=>$block_index, file=>$cur_file, line=>$cur_line, code=>$code}
    push @block_stack, $blk
    $if $code->{"scope"}
        my $idx=$block_index
        my $scope=$code->{scope}
        # SUBBLOCK messages to enable block scopes ------
        $blk->{scope}=$scope
        $f_parse->("SUBBLOCK BEGIN $idx $scope")
        push @$out, "DUMP_STUB block$idx\_pre"

fncode: parse_stack_pop
    my $blk=$block_stack[-1]
    my $idx=$blk->{index}
    $if $blk->{scope}
        # SUBBLOCK messages to enable block scopes ------
        $f_parse->("SUBBLOCK END $blk->{index} $blk->{scope}")
    pop @block_stack

    $cur_file=$blk->{file}
    $cur_line=$blk->{line}
    $if $named_blocks{"block$idx\_post"}
        push @$out, "DUMP_STUB block$idx\_post"

    $if $blk->{debug}
        $debug=0
        $f_parse->("DEBUG OFF");
    $elif $blk->{debug_off}
        $debug=$blk->{debug_off}
        $f_parse->("DEBUG $debug");

subcode: parse_stack_dump
    $print \@block_stack:
    $foreach $blk in @block_stack
        $print "    $blk->{code}->{name} $blk->{file}:$blk->{line}"

subcode: debug_block(name, idx)
    $if $debug eq "block"
        print "$(name): \n";
        $foreach $i in $(idx),$(idx)+1,$(idx)+2,$(idx)+3
            print "  $i: $$(name)->[$i]\n"
        print "      ...\n"
        my $i= $#$$(name)
        print "  $i: $$(name)->[$i]\n"

# ---- 
subcode: debug_on(name)
    $debug=$(name)
    $block_stack[-1]->{debug}=$debug
    $f_parse->("DEBUG $debug");

subcode: debug_off
    $if $debug
        $if !$block_stack[-1]->{debug}
            $block_stack[-1]->{debug_off}=$debug
        $debug=0
        $f_parse->("DEBUG OFF");

#---------------------------------------- 
fncode: curfile_curline
    return "$cur_file:$cur_line"

fncode: protect_key($key)
    $foreach $blk in @block_stack
        $if $blk->{$key}
            die "[$cur_file:$cur_line] Block Key Collision: [$key]\n"
    $block_stack[-1]->{$key}=1

