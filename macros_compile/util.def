subcode: _autoload
    $global $cur_file, $cur_line

fncode: get_cur_code
    return ($block_stack[-1]->{code}, $cur_file, $cur_line)

fncode: get_def($name)
    return get_macro_word($name, 1)

fncode: get_def_attr
    my ($name, $attr)=@_;
    $for $i=$#$deflist:0:-1
        my $t=$deflist->[$i]->{$name}
        $if $t and $t->{$attr}
            return $t->{$attr}
    return undef;

fncode: debug_def_stack
    $for $i=$#$deflist:0:-1
        my $name = $deflist->[$i]->{_name_}
        $if !$name
            $name="Unknown"
        $print "    [$i] $name"

subcode: warn(@msg)
    $(if:msg~")
        $(set:msg=$(msg:strip))
    $global $warn_count
    $warn_count++
    $if $warn_count<20
        $print "[$cur_file:$cur_line]$green $(msg)" 
    $else
        # die "Too many errors\n"

subcode: end_compile_report
    $if $warn_count>20
        print STDERR "[$warn_count] warnings!\n"
# --------------------------------
subcode: _autoload        
    $global $out
    $global @output_list
    $global %named_blocks

fncode: init_output
    @output_list=([]);
    set_output($output_list[0])
    %named_blocks=()

fncode: new_output
    my $new_out=[];
    push @output_list, $new_out;
    my $nidx=$#output_list;
    return $nidx;

fncode: fetch_output
    my $n=shift;
    return $output_list[$n];


# --------------------------------
fncode: set_named_block($name, $block)
    $named_blocks{$name}=$block

fncode: get_named_block($name)
    $call @get_named_block_fileters
    $if !$named_blocks{$name}
        $named_blocks{$name}=[]
    return $named_blocks{$name}

# ----
subcode: with_named_block(name)
    my $output=get_named_block($(name))
    my $temp=$out;
    set_output($output)
    BLOCK
    set_output($temp)

# ----
subcode:: get_named_block_fileters
    $case $name=~/^_(post|pre)(\d*)$/
        my $idx
        $if !$2
            $idx=$block_stack[-1]->{eindex}
        $else
            $idx=$block_stack[-$2]->{eindex}
        $name="block$idx\_$1"

subcode:: preproc_elifs
    $elif $preproc=~/^block_release/
        # docs/block_release.txt, mostly used to support $local_allocate
        $block_stack[-1]->{eindex}=$block_stack[-2]->{eindex}

fncode: trigger_block_post
    #-- reference parse_stack_pop in compile/parse.def --------
    my $cur_idx=$block_stack[-1]->{eindex}
    my $name="block$cur_idx\_post"
    $if $named_blocks{$name}
        my $new_name=$name.'_'
        push @$out, "DUMP_STUB $new_name"
        $named_blocks{$new_name}=$named_blocks{$name}
        undef $named_blocks{$name}

#----------------------------------------------- 
subcode: dump_deflist
    $for my $i=0;$i<=$#$deflist;$i++
        print "DUMP DEFLIST $i:\n"
        my $h=$deflist->[$i]
        $foreach $k in keys(%$h)
            print "    $k: $h->{$k}\n"

#----------------------------------------------- 
subcode: _autoload
    $global @mode_stack=("sub"), $cur_mode

# MODES
fncode: modepush($mode)
    $cur_mode=$mode
    push @mode_stack, $mode;
    $f_modeswitch->($mode, 1);

fncode: modepop
    pop @mode_stack
    $cur_mode=$mode_stack[-1]
    $f_modeswitch->($cur_mode, 0);

#----------------------------------------------- 
# {STUB} are replaced in dumpout, preservs semantic integrity
subcode:: preproc_elifs
    $elif $preproc=~/^block:\s*(\w+|\.\.\.)/
        my $name=$1
        $call _grab

        $if $name eq "..."
            $name = get_macro_word("stub")
        $elif $name eq "STUB"
            $name = get_STUB_name()
            my $sep=' '
            $if $preproc=~/^block:\s*STUB:(.*)$/
                $sep=$1
            push @$out, "INSERT_STUB[$sep] $name" 
            unshift @$subblock, "\x24(mode:bypass)"
        &call with_named_block, $name
            $call _parse, block:$name

subcode:: special_macro_expansions
    $elif $s=~/^stub:(.*)/ -> $t
        my $sep=' '
        $if $t=~/^(.*):(.*)/
            ($sep, $t) = ($1, $2)

        my $name = get_STUB_name()
        &call with_named_block, $name
            call_sub($t)
        push @stub, "INSERT_STUB[$sep] $name"
        return "{STUB}"

subcode:: parse_catch_meta_elifs
    $elif $l=~/^\.\.\.\s*$/ # low profile syntax for readability
        # scoped DUMP_STUB, e.g. loop inititializations
        $global $stub_idx
        $stub_idx++
        push @$out, "DUMP_STUB stub_$stub_idx"
        $deflist->[-1]->{stub} = "stub_$stub_idx"
        next

fncode: get_STUB_name
    $global $STUB_idx=0
    $STUB_idx++
    return "_stub_$STUB_idx"

#----------------------------------------------- 
# ref: parse.def:parseblock and here:grabblock
subcode: loop_block_lines
    $global @stub
    $while 1
        my $l
        $if @stub
            $l=shift @stub
        $else
            $if $lindex>=@$block
                last
            $l=$block->[$lindex]
            $lindex++
            $if $l!~/^SOURCE/
                $cur_line++
        BLOCK

fncode: grabblock($block, $index_ref)
    my $lindex=$$index_ref;
    $if $block->[$lindex] ne "SOURCE_INDENT"
        return []
    $lindex++;
    my $indent=1;
    my @sub;
    push @sub, "SOURCE: $cur_file - $cur_line"
    &call loop_block_lines
        $if $l eq "SOURCE_DEDENT"
            $indent--
            $if $indent==0
                last
        $if $l eq "SOURCE_INDENT" 
            $indent++ 
        push @sub, $l
    $$index_ref=$lindex
    #foreach my $l(@sub){print "grabblock: [$l]\n";}
    return \@sub;



