
# -------------------------------------------------------
#  $deflist=[$MyDef::def, $MyDef::def->{macros}, $page];

subcode: strip_quote(v)
    $if $(v)=~/^["'](.*)["']$/
        $(v)=$1

subcode:: preproc_elifs
    $elif $preproc=~/^set:\s*(\w+)$/
        my $name=$1
        $call set_macro_join
    $elif $preproc=~/^set:\s*(.*)/
        # immediate macros
        set_macro($deflist->[-1], $1)
    $elif $preproc=~/^set([1-5]|def|macro|page):\s*(.*)/
        my ($i,$t) = ($1, $2)
        $if $debug eq "macro"
            $print set[$i]: $t
        $global %named_macros=(def=>0,macro=>1,page=>2)
        $if $i=~/\d/
            # set1: sets macro at +1 level up
            $i = -($i+1)
        $else
            $i=$named_macros{$i}
        set_macro($deflist->[$i], $t)
    $elif $preproc=~/^unset:\s*(.*)/
        my @t = split /,\s*/, $1
        $if $debug eq "macro"
            $print unset: $deflist->[-1] @t
        $foreach $t in @t
            $if $t=~/^(\w+)/
                $deflist->[-1]->{$t}=undef
            $else
                $call warn, unset only accepts single word(s)
    # autoinc -> $(set2:v+=1)
    # enuminc -> use subcode which increments bases
    $elif $preproc=~/^enumset:\s*(.*)/
        my $t=$1
        expand_macro(\$t)
        my @t = split /,\s*/, $t
        my $base = 1
        my $m = $deflist->[-1]
        $foreach $t in @t
            $m->{$t}=$base
            $base++
    $elif $preproc=~/^export:\s*(.*)/
        my $t=$1;
        $if $t=~/^\w+,/
            my @plist=split /,\s*/, $t
            $foreach $p in @plist
                set_macro($deflist->[-2], $p)
        $else
            set_macro($deflist->[-2], $t)
    $elif $preproc=~/^mset:\s*(.*)/
        my @plist=split /,\s*/, $1
        $foreach $p in @plist
            set_macro($deflist->[-1], $p)
    $elif $preproc=~/^mexport:\s*(.*)/
        my @plist=split /,\s*/, $1
        $foreach $p in @plist
            set_macro($deflist->[-2], $p)
    $elif $preproc=~/^eval:\s*(\S+)=(.*)/
        my ($t1,$t2)=($1,$2)
        expand_macro(\$t2)
        $t2 = eval($t2)
        set_macro($deflist->[-1], "$t1=$t2")
    $elif $preproc=~/^split:\s*(\w+)$/
        $call split_macro, proper, $1
    $elif $preproc=~/^split:([^:]+):\s*(\w+)/
        $call split_macro, $1, $2

    # -------------------------
    subcode: split_macro(sep, s)
        my $p = get_macro_word($(s))
        $(if:sep=proper)
            my @tlist=MyDef::utils::proper_split($p)
        $(else)
            my @tlist=split /$(sep)/, $p
        my $n=@tlist
        $deflist->[-1]->{p_n}=$n
        $for $i=1:$n+1
            $deflist->[-1]->{"p_$i"}=$tlist[$i-1]

#---------------------------------------- 
#- $(set:name) join, sep, pattern, listitem1, ...
#-    replaces the * in pattern with list
subcode: set_macro_join
    $if !$tail
        $deflist->[-1]->{$name}=""
    $else
        $tail=~s/^\s+//
        expand_macro(\$tail)
        my @tlist=MyDef::utils::proper_split($tail)
        my $verb=shift @tlist
        $if $verb eq "join"
            my $sep=shift @tlist
            my $pat=shift @tlist
            $map strip_quote, $sep, $pat
            my $subblock=grabblock($block, \$lindex)
            my @out_list
            $if $pat
                $call @join_pattern
            $else
                $call @join_direct
            $deflist->[-1]->{$name}= join($sep, @out_list)
    # ----------
    subcode: join_pattern
        $foreach $t in @$subblock
            $if $t!~/^SOURCE:/
                expand_macro(\$t)
                push @tlist, MyDef::utils::proper_split($t)
        $foreach $t2 in @tlist
            my $t3=$pat
            $t3=~s/\*/$t2/g
            push @out_list, $t3
    # ----------
    subcode: join_direct
        $foreach $t in @$subblock
            $if $t!~/^SOURCE:/
                expand_macro(\$t)
                push @out_list, $t

#---------------------------------------- 
fncode: set_macro($m, $p)
    $if $debug eq "macro"
        print "set_macro $m: [$p]\n";
    $if $p=~/(\w+)([\+\-\*\/\.])=(.+)/
        my ($t1, $op, $num)=($1, $2, $3)
        $m->{$t1} = calc_op($m->{$t1}, $op, $num)
    $elif $p=~/(\S+?):=(.*)/
        $m->{$1}=$2
    $elif $p=~/(\S+?)=(.*)/
        my ($t1, $t2)=($1, $2)
        $if $t1=~/\$\(.*\)/
            expand_macro(\$t1)
        $if $t2=~/\$\(.*\)/
            expand_macro(\$t2)
        $m->{$t1}=$t2
    $else
        my $t=get_def($p)
        $if defined $t
            $m->{$p}=$t
        $else
            $m->{$p}=1

fncode: calc_op($v, $op, $t)
    $if $op eq "."
        return $v . $t

    my $ret=get_numeric($v)
    $if $op eq "+"
        $ret+=get_numeric($t)
    $elif $op eq "-"
        $ret-=get_numeric($t)
    $elif $op eq "*"
        $ret*=get_numeric($t)
    $elif $op eq "/"
        $ret/=get_numeric($t)
    $if $v=~/^0x/
        return sprintf("0x%x", $ret)
    $else
        return $ret

fncode: get_numeric($v)
    $if $v=~/^0x(.*)/
        return hex($v)
    $else
        return $v

fncode: set_current_macro($name, $val)
    $deflist->[-1]->{$name}=$val

fncode: export_macro($i, $name, $val)
    $deflist->[$i]->{$name}=$val

fncode: get_current_macro($name)
    return $deflist->[-1]->{$name}

# ------------------------------------------------------
# only call MyDef::utils::expand_macro once now
fncode: expand_macro($lref)
    #- use reference to avoid unnecessary copy

    #- if literal $(word) is needed 
    #-     * use literal bypass: [$: literal source ...]
    #-     * encode $ (if supported):  &#36;  \x24  \044
    #-     $(\W...) is safe though
    $if $$lref=~/\$(\(\w|\.)|[\x80-\xff]/
        $$lref = MyDef::utils::expand_macro($$lref, \&get_macro)
        return 1
    $else
        return 0

fncode: get_macro($s, $nowarn)
    $global $n_get_macro # so 
    $n_get_macro++

    $if $debug eq "macro"
        $print get_macro: [$s], nowarn: [$nowarn]

    $if $s=~/^((x\d+|nest|join|subst|eval|sym|def)\b.+)/
        my $t=$1
        $if $t=~/^eval:\s*(.*)/
            # e.g. $(eval:lcfirst "$(word)")
            return eval($1)
        $elif $t=~/^x(\d+)([^:]*):(.*)/ and $1>1
            # e.g. $(x3,:a) rep $3 with sep=$2, sep can't have ':'
            return "$3$2" x ($1-1) . $3
        $elif $t=~/^nest:(\d+):(.+):(.*)/
            my ($n, $pat, $x)=($1, $2, $3)
            # $(nest5:sqrt(*):10)
            $if $pat=~/^(.*)\*(.*)$/
                return ($1 x $n).$x.($2 x $n)
            $else
                $call warn, nest macro not supported
                return
        $elif $t=~/^join:(.*):(.*):(.*)/
            my ($pat, $sep, $tlist)=($1, $2, $3)
            my $plist = MyDef::utils::for_list_expand($pat, $tlist)
            return join($sep, @$plist)
        $elif $t =~ /^subst:(.+):(.+):(.*)/
            my ($w, $pat, $rpl)=($1,$2,$3)
            $w =~s/$pat/$rpl/
            return $w
        $elif $t =~ /^sym:(.+)/
            # $(sym:C++) -> CPlusPlus
            return MyDef::utils::string_symbol_name($1)
        $elif $t =~ /^def:(.+)/
            # current def file: $(def:date) -> yyyy-mm-dd
            my $t
            $if $MyDef::def->{file}
                my @t = stat($MyDef::def->{file})
                $t=$t[9]
            $else
                $t = time
            my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime($t)
            $if $1 eq "date"
                return sprintf("%4d-%02d-%02d", $year+1900, $mon+1, $mday)
            $elif $1 eq "datetime"
                return sprintf("%4d-%02d-%02d %02d:%02d", $year+1900, $mon+1, $mday, $hour, $min)
            $elif $1 eq "name"
                return $MyDef::def->{name}
            $else
                return ""
        $else
            warn " [$cur_file:$cur_line] syntax error: [$s]\n"
            return undef
    $elif $s=~/^(\w+):(.*)/
        #---- all kinds of annotations --------
        my $p=$2;
        my $t=get_macro_word($1, $nowarn)
        $if $t
            $if $p=~/(\d+):(\d+|word|number)?/
                #-- substr with regex predicate ----
                $if $2 eq "word"
                    my $s=substr($t, $1)
                    $if $s=~/^\s*(\w+)/
                        $s=$1
                $elif $2 eq "number"
                    my $s=substr($t, $1)
                    $if $s=~/^\s*([+-]?\d+)/
                        $s=$1
                $elif !$2
                    $s=substr($t, $1)
                $else
                    $s=substr($t, $1, $2)
                return $s
            $elif $p eq "strlen"
                #-- literal strlen -----
                $if $t=~/^".*"$/
                    return eval "length($t)"
                $else
                    return length($t)
            $elif $p eq "strip"
                return substr($t, 1, -1)
            $(for:fn in lc,uc,uc_first,length)
                $elif $p eq "$(fn)"
                    return $(fn)($t)
            $elif $p =~/^x(\d+)(.*)/ and $1>1
                # repeat
                return "$t$2" x ($1-1) . $t
            $elif $p=~/list:(.*)/
                my $idx=$1
                my @tlist=MyDef::utils::proper_split($t)
                $if $idx eq "n"
                    return scalar(@tlist)
                $elif $idx=~/^(-?\d+)$/
                    return $tlist[$1]
                $elif $idx=~/^shift\s+(\d+)$/
                    splice(@tlist, 0, $1)
                    return join(", ", @tlist)
                $elif $idx=~/^pop\s+(\d+)$/
                    splice(@tlist, -$1)
                    return join(", ", @tlist)
                $elif $idx=~/^(.*)\*(.*)$/
                    # modifies the list
                    $foreach $t in @tlist
                        $t = "$1$t$2"
                    return join(", ", @tlist)
            $else
                #--INLINE macro -- $(macro:p1,p2,p3)
                my @plist
                @plist=MyDef::utils::proper_split($p)
                my $i=1;
                $foreach $pp in @plist
                    $t=~s/\$$i/$pp/g
                    $i++
                return $t
    $elif $s=~/^([mg])([\|&]+):(.*)/
        my ($m, $sep, $t)=($1, $2, $3)
        my @tlist
        $if $t=~/^(.*==\s*)(.*)$/
            my ($pre, $t)=($1, $2)
            my @t = split /,\s*/, $t
            $foreach $tt in @t
                push @tlist, "$pre$tt"
        $else
            $print failed to parse multiplex macro [$sep][$t]
        $if $m eq "g"
            return '('.join(" $sep ", @tlist).')'
        $else
            return join(" $sep ", @tlist)
    $elif $s=~/^(.+)/
        #---- straight macro ----
        return get_macro_word($1, $nowarn)

fncode: get_macro_word($name, $nowarn) 
    $for $j=$#$deflist:-1:-1
        my $macros=$deflist->[$j]
        $if exists($macros->{$name})
            return $macros->{$name}
    $if !$nowarn
        warn "[$cur_file:$cur_line] Macro $name not defined\n"
    return undef
