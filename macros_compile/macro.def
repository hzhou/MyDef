# -------------------------------------------------------
#  $deflist=[$MyDef::def, $MyDef::def->{macros}, $page];

#  crossref preproc.def: 
#      $(if:...) do not add additional macro level
#      $(for:...) do add macro level

# Global custom macro space -- simply use prefix to create namespace 
subcode:: preproc_elifs
    $elif $preproc=~/^set:\s*(.*)/
        # immediate macros
        set_macro($deflist->[-1], $1)
    $elif $preproc=~/^set(-?\d+|def|macro|page):\s*(.*)/ -> $i, $t
        # $(set-1:name=value) : one level up
        # $(set1:name=value)  : macro
        $if $debug eq "macro"
            $print set[$i]: $t
        $global %named_macros=(def=>0,macro=>1,page=>2)
        $if $i=~/^-/
            # -1 means 1 level up, which is -2
            $i-=1
        $elif $i!~/^\d/
            $i=$named_macros{$i}
        set_macro($deflist->[$i], $t)
    $elif $preproc=~/^unset:\s*(.*)/
        my @t = split /,\s*/, $1
        $if $debug eq "macro"
            $print unset: $deflist->[-1] @t
        $foreach $t in @t
            $if $t=~/^(\w+)/
                $deflist->[-1]->{$t}=undef
            $else
                $call warn, unset only accepts single word(s)
    # autoinc -> $(set-2:v+=1)
    # enuminc -> use subcode which increments bases
    $elif $preproc=~/^export:\s*(.*)/
        my $t=$1;
        $if $t=~/^\w+,/
            my @plist=split /,\s*/, $t
            $foreach $p in @plist
                set_macro($deflist->[-2], $p)
        $else
            set_macro($deflist->[-2], $t)
    $elif $preproc=~/^mset:\s*(.*)/
        my @plist=split /,\s*/, $1
        $foreach $p in @plist
            set_macro($deflist->[-1], $p)
    $elif $preproc=~/^mexport:\s*(.*)/
        my @plist=split /,\s*/, $1
        $foreach $p in @plist
            set_macro($deflist->[-2], $p)
    $elif $preproc=~/^eval:\s*(\S+)=(.*)/
        my ($t1,$t2)=($1,$2)
        expand_eval(\$t2)
        $t2 = eval($t2)
        set_macro($deflist->[-1], "$t1=$t2")
    $elif $preproc=~/^split:\s*(\w+)$/
        $call split_macro, proper, $1
    $elif $preproc=~/^split:([^:]+):\s*(\w+)/
        $call split_macro, $1, $2

    # -------------------------
    subcode: split_macro(sep, s)
        my $p = get_macro_word($(s))
        $(if:sep=proper)
            my @tlist=MyDef::utils::proper_split($p)
        $(else)
            my @tlist=split /$(sep)/, $p
        my $n=@tlist
        $deflist->[-1]->{p_n}=$n
        $for $i=1:$n+1
            $deflist->[-1]->{"p_$i"}=$tlist[$i-1]

#---------------------------------------- 
fncode: set_macro($m, $p)
    $if $debug eq "macro"
        print "set_macro $m: [$p]\n";
    $if $p=~/^(\w+)([\+\-\*\/\.]?)=(.+)/ -> $t1, $op, $t2
        # $print set_macro op: $t1 $op $t2
        my $t = get_macro_word($t1, 1)
        $if $op
            $m->{$t1} = calc_op($t, $op, $t2)
        $else
            $if $t2=~/\$\(.*\)/
                expand_macro(\$t2)
            $m->{$t1} = $t2
    $elif $p=~/^(\w+)\[(.*?)\]=(.+)/ -> $t1, $sep, $item
        # $print set_macro concat: $t1 $sep $item
        $if $m->{$t1}
            $m->{$t1}.="$sep$item"
        $else
            $m->{$t1}=$item
    $elif $p=~/^(\S+?):=(.*)/
        # $print set_macro direct: $1 = $2
        $m->{$1}=$2
    $elif $p=~/^(\S+?)=(.*)/ -> $t1, $t2
        # $print set_macro: $t1 = $t2
        # NOTE: dynamic macros are supported but somewhat restrictive -- no support for op
        $if $t1=~/\$\(.*\)/
            expand_macro(\$t1)
        $if $t2=~/\$\(.*\)/
            expand_macro(\$t2)
        $m->{$t1}=$t2
    $else
        # $print set_macro else: $p
        my $t=get_def($p)
        $if defined $t
            $m->{$p}=$t
        $else
            $m->{$p}=1

fncode: calc_op($v, $op, $t)
    $if $op eq "."
        return $v . $t

    my $ret=get_numeric($v)
    $if $op eq "+"
        $ret+=get_numeric($t)
    $elif $op eq "-"
        $ret-=get_numeric($t)
    $elif $op eq "*"
        $ret*=get_numeric($t)
    $elif $op eq "/"
        $ret/=get_numeric($t)
    $if $v=~/^0x/
        return sprintf("0x%x", $ret)
    $else
        return $ret

fncode: get_numeric($v)
    $if $v=~/^0x(.*)/
        return hex($v)
    $else
        return $v

fncode: set_current_macro($name, $val)
    $deflist->[-1]->{$name}=$val

fncode: export_macro($i, $name, $val)
    $deflist->[$i]->{$name}=$val

fncode: get_current_macro($name)
    return $deflist->[-1]->{$name}

# ------------------------------------------------------
# $(eval:m=...)
fncode: expand_eval($lref)
    # if contains macros, then expand them
    $if $$lref=~/\$(\(\w|\.)|[\x80-\xff]/
        $$lref = MyDef::utils::expand_macro($$lref, \&get_macro)
        return 1
    # otherwise, treat all non-keyword words as macros
    my @t=split /(\w+)/, $$lref
    my $flag
    $foreach $t in @t
        $if $t=~/^[_a-zA-Z]\w*$/
            $if $t!~/abs|atan2|cos|exp|hex|int|log|oct|rand|sin|sqrt|srand|chr|ord|lc|lcfirst|uc|uc_first|substr|sprintf/
                my $s = get_macro_word($t, 1)
                $if defined $s
                    $t=$s
                    $flag=1
    $if $flag
        $$lref = join('', @t)

# ------------------------------------------------------
# only call MyDef::utils::expand_macro once now
fncode: expand_macro($lref)
    #- use reference to avoid unnecessary copy

    #- if literal $(word) is needed 
    #-     * use literal bypass: [$: literal source ...]
    #-     * encode $ (if supported):  &#36;  \x24  \044
    #-     $(\W...) is safe though
    $if $$lref=~/\$(\(\w|\.)|[\x80-\xff]/
        $$lref = MyDef::utils::expand_macro($$lref, \&get_macro)
        return 1
    $else
        return 0

fncode: get_macro($s, $nowarn)
    $global $n_get_macro # so 
    $n_get_macro++

    $if $debug eq "macro"
        $print get_macro: [$s], nowarn: [$nowarn]

    $if $s=~/^x(\d+)([^:]*):(.*)/ -> $n, $sep, $pat
        # e.g. $(x3,:a), sep can't have ':'
        $if !$sep && $pat=~/^(:+)(.+)/
            $sep=$1
            $pat=$2
        $if $n>1
            return "$pat$sep" x ($n-1) . $pat
        $elif $n==1
            return $3
        $else
            return ""
    $elif $s=~/^((nest|join|subst|eval|sym):.+)/
        my $t=$1
        $if $t=~/^eval:\s*(.*)/
            # e.g. $(eval:lcfirst "$(word)")
            return eval($1)
        $elif $t=~/^nest:(\d+):(.+):(.*)/
            my ($n, $pat, $x)=($1, $2, $3)
            # $(nest5:sqrt(*):10)
            $if $pat=~/^(.*)\*(.*)$/
                return ($1 x $n).$x.($2 x $n)
            $else
                $call warn, nest macro not supported
                return
        $elif $t=~/^join:(.*):(.*):(.*)/ -> $pat, $sep, $t
            $if !$pat
                my @tlist = MyDef::utils::get_tlist($t)
                return join($sep, @tlist)
            $elif $pat=~/^rot(-?\d+)/
                my @tlist = MyDef::utils::get_tlist($t)
                $if $1==0
                    return join($sep, @tlist)
                $elif $1>0
                    return join($sep, @tlist[$1..$#tlist, 0..($1-1)])
                $else
                    return join($sep, @tlist[$1..-1, 0..($#tlist+$1)])
            $else
                my $plist = MyDef::utils::for_list_expand($pat, $t)
                return join($sep, @$plist)
        $elif $t =~ /^subst:(.+):(.+):(.*)/
            my ($w, $pat, $rpl)=($1,$2,$3)
            $if $w=~/^\w+$/
                my $t = get_macro_word($w,1)
                $if $t
                    $w = $t
            $w =~s/$pat/$rpl/g
            return $w
        $elif $t =~ /^sym:(.+)/
            # $(sym:C++) -> CPlusPlus
            return MyDef::utils::string_symbol_name($1)
        $else
            $call warn, syntax error: [$s]
            return undef
    $call @special_macro_expansions
    $elif $s=~/^(\w+):(.*)/
        #---- all kinds of annotations --------
        my $p=$2;
        my $t=get_macro_word($1, $nowarn)
        $if $t
            $if $p=~/(\d+):(\d+|word|number)?/
                #-- substr with regex predicate ----
                # $(T:1:3)
                $if $2>0
                    $s=substr($t, $1, $2)
                $else
                    $s=substr($t, $1)
                    $if $2 eq "word"
                        $if $s=~/^\s*(\w+)/
                            $s=$1
                    $elif $2 eq "number"
                        $if $s=~/^\s*([+-]?\d+)/
                            $s=$1
                return $s
            $elif $p eq "strlen"
                #-- literal strlen -----
                $if $t=~/^['"].*['"]$/
                    return eval "length($t)"
                $else
                    return length($t)
            $elif $p eq "strip"
                return substr($t, 1, -1)
            $(for:fn in lc,uc,uc_first,length)
                $elif $p eq "$(fn)"
                    return $(fn)($t)
            $elif $p =~ /regex:(.*)/
                my $re = qr/$1/
                $if $t=~ /$re/
                    return $1
                $else
                    return ''
            $elif $p=~/list:(.*)/
                my $idx=$1
                my @tlist=MyDef::utils::proper_split($t)
                $if $idx eq "n"
                    return scalar(@tlist)
                $elif $idx=~/^(-?\d+)$/
                    return $tlist[$1]
                $elif $idx=~/^shift\s+(\d+)$/
                    splice(@tlist, 0, $1)
                    return join(", ", @tlist)
                $elif $idx=~/^pop\s+(\d+)$/
                    splice(@tlist, -$1)
                    return join(", ", @tlist)
                $elif $idx=~/^(.*)\*(.*)$/
                    # modifies the list
                    $foreach $t in @tlist
                        $t = "$1$t$2"
                    return join(", ", @tlist)
            $else
                #--INLINE macro -- $(macro:p1,p2,p3)
                my @plist
                @plist=MyDef::utils::proper_split($p)
                my $i=1;
                $foreach $pp in @plist
                    $t=~s/\$$i/$pp/g
                    $i++
                return $t
    $elif $s=~/^([mg])([\|&]+):(.*)/
        my ($m, $sep, $t)=($1, $2, $3)
        my @tlist
        $if $t=~/^(.*==\s*)(.*)$/
            my ($pre, $t)=($1, $2)
            my @t = split /,\s*/, $t
            $foreach $tt in @t
                push @tlist, "$pre$tt"
        $else
            $print failed to parse multiplex macro [$sep][$t]
        $if $m eq "g"
            return '('.join(" $sep ", @tlist).')'
        $else
            return join(" $sep ", @tlist)
    $elif $s=~/^(.+)/
        #---- straight macro ----
        return get_macro_word($1, $nowarn)

fncode: get_macro_word($name, $nowarn) 
    $for $j=$#$deflist:-1:-1
        my $macros=$deflist->[$j]
        $if exists($macros->{$name})
            return $macros->{$name}
    $if !$nowarn
        $call warn, Macro $name not defined
    return undef

#----------------------------------------------- 
subcode:: special_macro_expansions
    $elif $s=~/^def:(.*)/
        # current def file: $(def:date) -> yyyy-mm-dd
        my $t
        $if $MyDef::def->{_deffile}
            my @t = stat($MyDef::def->{_deffile})
            $t=$t[9]
        $else
            $t = time
        my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime($t)
        $if $1 eq "date"
            return sprintf("%4d-%02d-%02d", $year+1900, $mon+1, $mday)
        $elif $1 eq "datetime"
            return sprintf("%4d-%02d-%02d %02d:%02d", $year+1900, $mon+1, $mday, $hour, $min)
        $else
            return ""
