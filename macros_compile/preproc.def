subcode: check_preproc_has_macro
    my $has_macro
    $if $preproc =~ /\$\(/ and $preproc !~ /^set:/
        $has_macro = expand_macro(\$preproc)

subcode: parse_preproc
    my $flag_done = 1
    $if $preproc=~/^for:\s*(.*)/ -> $t
        $call grab
        $if $t=~/^(\w+)\s+in\s+(.*)/
            # $(for:x in x,y,z)
            my ($vname, $vparam)=($1,$2)
            $call for_in
        $else
            # $(for:x,y,z and 0,1,2)
            $call for_list
    $elif $preproc=~/^foreach:p/
        $call grab
        $call foreach_p
    $call @preproc_elifs
    $elif $preproc=~/^allow_recurse:(\d+)/
        my $code=$block_stack[-1]->{code}
        $if $code->{allow_recurse}
            $deflist->[-1]->{recurse}=$code->{recurse}
        $else
            $code->{allow_recurse}=$1
            $deflist->[-1]->{recurse}=0
    $elif $preproc=~/^_init_block$/
        my $idx=$block_stack[-1]->{eindex}
        push @$out, "DUMP_STUB _init_$idx"
        my $page=$deflist->[2]
        $page->{_init_block}="_init_$idx"
    $elif $preproc=~/^mode:(.*)/
        # $(mode:bypass::)
        $cur_mode = $1
    $else
        $flag_done = undef
    $if $flag_done
        goto Done_Parse
    # ---------------------------------------- 
    subcode: grab
        my $subblock=grabblock($block, \$lindex);
    subcode: parseblock(name)
        parseblock({source=>$subblock, name=>"$(name)"})
    # ---------------------------------------- 
    subcode: for_in
        my @tlist = MyDef::utils::get_tlist($vparam)

        my $i=0
        $foreach $t in @tlist
            #-- new layer of macro context ----
            my $macro={$vname=>$t, _i=>$i}
            push @$deflist, $macro;
            $call parseblock, foreach_p
            pop @$deflist;
            $i++

    # ---------------------------------------- 
    # $(for:x,y,z and 1,2,3 and r,g,b and i,j,k)
    #     $print $2 $3 $4: $1 = $$1
    subcode: for_list
        my @plist
        $if $t=~/(.+?)\s+in\s+(.*)/
            $t = $2
            @plist = split /,\s*/, $1

        my @vlist=split /\s+and\s+/, $t
        my $n      # num of alternatives
        my @tlist  # list of replacement list
        $foreach $v in @vlist
            my @t = MyDef::utils::get_tlist($v)
            $if !$n
                $n=@t
            push @tlist, \@t
        my $m = @tlist

        $if @plist
            # $(for a, b, c in 1, 2, 3 and 2, 3, 4 and 3,4,5)
            $call for_list_macros
        $else
            $call for_list_anonymous
        # ----
        subcode: for_list_macros
            $for $i=0:$n
                my $macro={_i=>$i}
                $for $j=0:@plist
                    $macro->{$plist[$j]}=$tlist[$j]->[$i]
                push @$deflist, $macro;
                $call parseblock, for_list
                pop @$deflist;

        # ----
        subcode: for_list_anonymous
            my $block_ref = $subblock
            $for $i=0:$n
                my @block = @$block_ref
                $foreach $l in @block
                    $if $l and $l!~/^SOURCE:/
                        my $j=1
                        $foreach $tlist in @tlist
                            $l=~s/\$$j/$tlist->[$i]/g
                            $j++
                my $subblock = \@block
                $call parseblock, for_list

    # ---------------------------------------- 
    subcode: foreach_p
        my $plist=$deflist->[-1]->{plist}
        $if $plist
            my @plist=MyDef::utils::proper_split($plist)
            my $i=0
            $foreach $p in @plist
                #-- new layer of macro context -------------
                my $macro={"p"=>$p, "i"=>$i}
                push @$deflist, $macro;
                parseblock({source=>$subblock, name=>"\${foreach}"})
                pop @$deflist;
                $i++
        $else
            warn "[$cur_file:$cur_line]\x24(foreach:p) missing \x24(plist)\n"

#---------------------------------------- 
subcode:: parseblock_init
    my $switch_context

subcode: parse_preproc_switch
    $if $preproc=~/^(if(each)?:|els?e?if:|else\b)\s*(.*)/
        my $subblock=grabblock($block, \$lindex);
        $if $preproc=~/^if:\s*(.*)/
            $call parse_if
        $elif $preproc=~/^els?e?if:\s*(.*)/
            $if $switch_context eq "on"
                $call parse_if
        $elif $preproc=~/^else/
            $call parse_else
        $elif $preproc=~/^ifeach:\s*(.*)/
            $call parse_ifeach
        $else
            die "Error: parse_preproc_switch\n"
        goto Done_Parse;
    $else
        undef $switch_context

    # -------------------
    subcode: parse_if
        $if testcondition($1, $has_macro)
            parseblock({source=>$subblock, name=>"\${if:}"})
            $switch_context="off";
        $else
            $switch_context="on";

    subcode: parse_else
        $if $switch_context eq "on"
            parseblock({source=>$subblock, name=>"\${else}"})
            undef $switch_context;

    subcode: parse_ifeach
        my $cond=$1
        my $plist=$deflist->[-1]->{plist}
        undef $switch_context
        my $cond_var="p"
        $if $cond=~/^(\w+)/
            $cond_var=$1
        $if $plist
            my @plist=split /,\s*/, $plist
            $foreach $p in @plist
                my $macro={$cond_var=>$p};
                push @$deflist, $macro;
                $if testcondition($cond)
                    parseblock({source=>$subblock, name=>"\${ifeach:}"})
                    $switch_context="off";
                pop @$deflist;
        $if !$switch_context
            $switch_context="on";

#---------------------------------------- 
fncode: test_op($a, $test)
    $if $debug eq "preproc"
        $print "preproc test_op: $a: $test"
    $if $test=~/^:(\d+)/
        $test=$'
        $a=substr($a, 0, $1);

    $if $test=~/^\s*(!?)~(.*)/
        my ($not, $b) = ($1, $2)
        $if $b=~/(.*)\$$/
            if($a=~/$1$/){ return !$not;}
        $else
            if($a=~/^$b/){ return !$not;}
        return $not
    $elif $test=~/^\s*in\s+(.*)/
        return test_in($a, $1)
    $elif $test=~/^\s*([!=<>]+)(.*)/
        my ($op, $b)=($1, $2)
        $if $op eq "="
            if($a eq $b){ return 1;}
        $elsif $op eq "!="
            if($a ne $b){ return 1;}
        $elsif $op eq ">"
            if($a > $b){ return 1;}
        $elsif $op eq "<"
            if($a < $b){ return 1;}
        $elsif $op eq ">="
            if($a >= $b){ return 1;}
        $elsif $op eq "<="
            if($a <= $b){ return 1;}
        $else
            $call warn, "test_op: unsupported op $op"
            return 0
    $else
        return defined $a

fncode: test_in($a, $test)
    my @tlist=split /,\s*/, $test
    $foreach $t in @tlist
        $if $t=~/(\S)-(\S)/
            $if ord($a)>=ord($1) and ord($a)<=ord($2)
                return 1
        $elif $a eq $t
            return 1
    return 0

fncode: testcondition($cond, $has_macro)
    $if $debug eq "preproc"
        $print "preproc testcondition: $cond [$has_macro]"
    $if !$cond
        return 0;
    $call @testcondition_elifs
    $elif $cond=~/^\s*!(.*)/
        return !testcondition($1)
    $elif $cond=~/ or /
        my @nlist=split / or /, $cond
        $foreach $n in @nlist
            $if testcondition($n)
                return 1;
        return 0;
    $elif $cond=~/ and /
        my @nlist=split / and /, $cond
        $foreach $n in @nlist
            $if !testcondition($n)
                return 0
        return 1;
    $elsif $cond=~/^([01])$/
        return $1
    $elsif $cond=~/^hascode:\s*(\w+)/
        my $codelib = get_def_attr("codes", $1)
        $if $codelib
            return 1
    $elsif $cond=~/^(string|number|word):(.*)/
        my $test=$1
        my $t=get_def($2)
        $if $test eq "string" and $t=~/^['"]/
            return 1
        $elif $test eq "number" and $t=~/^\d+/
            return 1
        $elif $test eq "word" and $t=~/^[a-zA-Z_]\w*$/
            return 1
    $elsif $cond=~/^\s*(\w+)(.*)/
        my $t=get_def($1);
        $if !$2
            return (defined $t && $t ne '')
        $elif !defined $t and $has_macro
            # $(if:$(type:list:n)=1)
            return test_op($1, $2)
        $else
            # $(if:A=A)
            return test_op($t, $2)
    $else
        return 0
    return 0

