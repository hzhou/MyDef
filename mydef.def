page: MyDef
    type: pm
    output_dir: lib
    package: MyDef

    subcode: main
	$call mydef_main

subcode: mydef_main
    our $def;
    our $page;
    our $var={};
    use MyDef::parseutil;
    use MyDef::compileutil;

    # ----------------------------------
    import_config("config");
    $if $ENV{MYDEFLIB}
	$var->{include_path}.=":$ENV{MYDEFLIB}";

    $sub init
	my (%config)=@_;
	$while my ($k, $v) = each %config
	    $var->{$k}=$v;
	my $module=$var->{module};
	$if !$module
	    die "Module type not defined in config!\n"
	$map require_module, php, www, c, xs, apple, win32, win32rc, perl, general, glsl, make
	$else
	    die "Undefined module type $module\n";
    # ----
    $call mydef_subs

subcode: mydef_subs
    $sub addpath
	my ($path)=@_;
	$var->{path}=$path;

    $sub createpage_lines
	my ($pagename)=@_;
	$page=$def->{pages}->{$pagename};
	my ($plines, $ext)=MyDef::compileutil::compile
	return $plines;

    $sub createpage
	my ($pagename)=@_;
	$page=$def->{pages}->{$pagename};
	my ($plines, $ext)=MyDef::compileutil::compile
	MyDef::compileutil::output($plines, $ext);

    $sub import_data_lines
	my $plines=shift;
	$def= MyDef::parseutil::import_data_lines($plines, $var);

    $sub import_data
	my $file=shift;
	$def= MyDef::parseutil::import_data($file, $var);

    $sub is_sub
	my $subname=shift;
	$if $page->{codes}->{$subname}
	    return 1;
	$elsif $def->{codes}->{$subname}
	    return 1;
	$else
	    return 0;
    # --------------------------
    $sub import_config
	my ($file)=@_;
	# print STDERR "Reading Config File:  $file\n";
	open In, $file or return;
	$while <In>
	    $if /^(\w+):\s*(.*\S)/
		$var->{$1}=$2;
	close In;

    1;

################################################
subcode: require_module(name)
    $elif $module eq "$(name)"
	require MyDef::output_$(name);
	MyDef::compileutil::set_interface(MyDef::output_$(name)::get_interface());

