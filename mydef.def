include: modules.def

page: MyDef
    type: pm
    output_dir: lib
    package: MyDef

    subcode: main
	$call mydef_main

subcode: mydef_main
    $global $def, $page, $var={}
    $use MyDef::utils
    $use MyDef::parseutil
    $use MyDef::compileutil
    $use MyDef::dumpout

    # ----------------------------------
    import_config("config");
    my @include_path=split /:/, $var->{include_path}
    $if $ENV{MYDEFLIB}
	my $mydeflib=$ENV{MYDEFLIB}
	my @t
	$foreach $d in @include_path
	    $if $d=~/^\w+/ and -d "$mydeflib/$d"
		push @t, "$mydeflib/$d"
	$var->{include_path}.=":$ENV{MYDEFLIB}";
	$if @t
	    $var->{include_path}.=":". join(":", @t)

    1;

fncode: init(%config)
    $while my ($k, $v) = each %config
        $var->{$k}=$v;
    my $module=$var->{module};

    $if !$module and -f $config{def_file}
        &call open_r, $config{def_file}
            $if /^\s*module:\s+(\w+)\s*$/
                $var->{module}=$1
                $module=$1
        
    $if !$module
        die "Module type not defined in config!\n"
    $map require_module, $(module_list)
    $else
        die "Undefined module type $module\n";

fncode: import_data($file)
    $def= MyDef::parseutil::import_data($file)

fncode: createpage($pagename)
    $page=$def->{pages}->{$pagename};
    $if $page->{output_path} and !$page->{output_dir}
        $page->{output_dir}=$page->{output_path}

    my $plines=MyDef::compileutil::compile()
    MyDef::compileutil::output($plines)

#---------------------------------------- 
fncode: addpath($path)
    $var->{path}=$path;

fncode: is_sub($subname)
    $if $page->{codes}->{$subname}
        return 1;
    $elsif $def->{codes}->{$subname}
        return 1;
    $else
        return 0;

fncode: set_page_extension($default_ext)
    my $ext=$default_ext
    $if exists $var->{filetype}
        $ext=$var->{filetype}
    $if exists $page->{type}
        $ext=$page->{type};
    $if $ext eq "none"
        $ext=""

    $page->{pageext}=$ext 

# --------------------------
fncode: import_config($file)
    # print STDERR "Reading Config File:  $file\n";
    open In, $file or return;
    $while <In>
        $if /^(\w+):\s*(.*\S)/
            $var->{$1}=$2;
    close In;
    
    $if $var->{output_path} and !$var->{output_dir}
        $var->{output_dir}=$var->{output_path}

################################################
subcode: require_module(name)
    $elif $module eq "$(name)"
	require MyDef::output_$(name);
	MyDef::compileutil::set_interface(MyDef::output_$(name)::get_interface());

