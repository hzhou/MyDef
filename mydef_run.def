########################################
#---- Run the mydef scripts directly 

page: mydef_run
    output_dir: script
    type:

    use MyDef
    my (%config, $pagename)
    my $page
    $call parse_arg
    $if $config{def_file}
        $call guess_module
        MyDef::init(%config)
        MyDef::import_data($config{def_file})
        $if !$pagename
            $pagename=$MyDef::def->{pagelist}->[0]
        $if $pagename
            MyDef::createpage($pagename)
            $page=$MyDef::page
            $if $page->{skiprun}
                # $call run_page
                exit
        $else
            exit
    $elif $config{_file}
        $page={outname=>$config{_file}}
    $else
        die "Usage: $0 input_defile.def\n"

    $call run_page

    # -------------------------
    subcode: parse_arg
        $foreach $a in @ARGV
            $if $a=~/-m(\w+)$/
                $config{module}=$1
            $elif $a=~/-rule$/
                $config{dump_rule}=1
            $elif $a=~/(.*)\.def/
                $config{def_file}=$a
            $elif -f $a
                $config{_file}=$a

    subcode: guess_module
        guess_module:
        &call open_r, $config{def_file}
            $if /module:\s*(\w+)/ and !$config{module}
                $config{module}=$1
                # last
            $elif /^run:\s*(\S+\.def)/
                $config{def_file}=$1
                goto guess_module
            $elif /^run:\s*(\w+)/
                $pagename = $1
            $elif /^prerun:\s*(.+)/
                system $1
            $elif /^\/\*\s*expect (\S+):\s*$/
                $config{expect_type}=$1
                $call grab_expect_block
        $if !$config{module}
            $config{module}=$MyDef::var->{module}
        $if !$config{module}
            $config{module}="general"

    subcode: guess_os
        my $ostype
        # $ENV{OSTYPE} dissappears in perl
        my $uname = `uname`
        $if $uname=~/CYGWIN/
            $ostype = "cygwin"
        $else
            $ostype = "linux"

    subcode: run_page
        $call guess_os
        my $name=$page->{outname}
        my ($exe, $cmd)
        $if $name=~/(.*)\.c(pp)?$/
            $exe=$1
            # my $cc = "gcc"
            my $cc = "gcc -std=c99"
            $if $page->{CC}
                $cc = $page->{CC}
            $elif $ENV{MYDEF_RUN_CC}
                $cc = $ENV{MYDEF_RUN_CC}
            $elif $ENV{CC}
                $cc = $ENV{CC}
            $elif $ostype =~ /cygwin|linux/
                $cc = "gcc -std=gnu99"
            # ---------------------
            my $cflags
            $if $page->{CFLAGS}
                $cflags = $page->{CFLAGS}
            $elif $cc !~/-O\d/
                $cflags = "-O2"
            # ---------------------
            $if $page->{make} eq "win32"
                $cc = "/usr/bin/x86_64-w64-mingw32-gcc"
                $cmd = "$cc -o$exe.exe $name $cflags $page->{lib_list}"
            $elif $config{module} eq "win32"
                $cc = "/usr/bin/x86_64-w64-mingw32-gcc"
                $cmd = "$cc -o$exe.exe $name $cflags $page->{lib_list} -Wl,--subsystem,windows"
            $else
                $if $name=~/\.cpp$/
                    $cc = "g++"
                $cmd="$cc $cflags -o$exe $name $page->{lib_list}"

            $if $config{dump_rule}
                $if $exe=~/([^\/]+)$/
                    $exe = "script/$1"
                $if $name=~/([^\/]+)$/
                    $name = "$1"
                $cmd = '$'."{CC} -o\$@ \$< $page->{lib_list}"
                print "\nCC=$cc $cflags\n\n"
                print "$exe: $name\n"
                print "\t$cmd\n"
                exit
            $else
                $call append_run, $exe
        $elif $name=~/\.java$/
            $if $name=~/(.*)\/(.*)\.java/
                chdir $1
                $cmd="javac $2.java"
                $call append_run, java $2
            $else
                $cmd="javac $name"
                $name=~s/\.java$//
                $call append_run, java $name
        $call do_compile, f, gfortran -g -o$exe $name $page->{lib_list}
        $call do_compile, rs, rustc $name
        $call do_compile, hs, ghc -o$exe $name
        $call do_compile, asm, nasm -f elf $name && ld -m elf_i386 $exe.o -o$exe
        # $call do_compile, prolog, gplc $name    ? no idea how to make it work
        $elif $page->{run}
            $cmd=$page->{run}
        $call do_script, sh, sh
        $call do_script, pl, perl
        $call do_script, php, php
        $call do_script, py, python
        $call do_script, go, go run
        $call do_script, js, node
        $call do_script, tcl, tclsh
        $call do_script, lisp, clisp
        # $call do_script, tex, pdflatex  # -interaction=batchmode
        $call do_script, tex, run_tex
        $call do_script, latex, run_tex
        $call do_script, awk, awk -f

        $if $config{expect} and $name=~/\b$config{expect_type}$/
            $call cmp_expect, $name
        $elif $cmd
            $call append_arg
            $if $config{expect_type} eq "output"
                $call run_cmd_expect
            $else
                $print $cmd
                system $cmd
        $else
            die "do not know how to run it\n"

        # --------------------
        subcode: do_compile(ext, cc)
            $case $name=~/(.*)\.$(ext)$/
                $exe = $1
                $cmd="$(cc)"
                $call append_run, $exe

        subcode: do_script(ext, cmd)
            $case $name=~/\.$(ext)$/
                $cmd = "$(cmd) $name"

        subcode: append_run(exe)
            $if $page->{run}
                $cmd .= " && $page->{run}"
            $else
                $if "$(exe)"=~/[\/ ]/
                    $cmd .= " && $(exe)"
                $else
                    $cmd .= " && ./$(exe)"

        subcode: append_arg
            $if $page->{arg}
                $cmd .= " $page->{arg}"

        # --------------------------
        subcode: run_cmd_expect
            $if $cmd=~/(.*) && (.*)/
                $print $1
                system $1
                $if $? == -1
                    die "failed to compile\n"
                $elif $? & 0xff
                    die "compile failure\n"
                $cmd = $2

            $call cmp_expect, cmd

#---------------------------------------- 
subcode: grab_expect_block
    my @expect
    $while <In>
        $if /^\*\//
            $config{expect} = \@expect
            last
        $else
            $call @expect_normalize
            push @expect, $_

subcode: cmp_expect(type)
    my $expect = $config{expect}
    my $i = 0
    my ($n_ok, $n_nok)
    $(if:type=cmd)
        $print $cmd
        $(set:output="$cmd |")
    $(else)
        $(set:output=$name)

    &call open_r, $(output)
        print $_
        $call expect_normalize
        $if $expect->[$i] ne $_
            $n_nok++
            $print "not ok: [$expect->[$i]]"
        $else
            $n_ok++
        $i++
    print "--------------------------\n"
    $if $n_ok>0
        $print "    $green{ok} $n_ok/$i"
    $if $n_nok>0
        $print "    $red{not ok} $n_nok/$i"

subcode: expect_normalize
    s/\s+/ /g
    s/\s*$//g

