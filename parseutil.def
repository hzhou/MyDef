include: macros_parse/indentation.def
include: macros_parse/macros.def
include: macros_parse/subcode.def
include: macros_parse/template.def
include: macros_parse/debug.def
include: macros_util/path.def
include: macros_util/ogdl.def
include: macros_util/debug.def
include: perl/indentations.def

include: macros_parse/hacks.def

page: parseutil
    type: pm
    output_dir: lib/MyDef
    package: MyDef::parseutil

    1;

#---------------------------------------- 
fncode: import_data($file)
    my $def={"resource"=>{}, 
            "pages"=>{}, 
            "pagelist"=>[],
            "codes"=>{}, 
            "macros"=>{},
            };

    # -------- file stat -------------
    $if $file=~/([^\/]+)\.def/
        $def->{name}=$1
        $def->{file}=find_file($file)
    $else
        $def->{name}="default"

    $call @parse_init

    # -----------------------------------------------
    import_file($file, $def, "main")
    $call load_standard_includes
    $while 1
        $if @includes
            my $file=shift(@includes)
            import_file($file, $def, "include")
        $elif @standard_includes
            my $file=shift(@standard_includes)
            import_file($file, $def, "standard_include")
        $else
            last
    $if $in_default_page
        $call check_default_page_framecode

    # ---- End of Parsing ---------------------------
    $call @post_parsing
    $if $debug
        $foreach $k in keys %$debug
            $if $k eq "def"
                debug_def($def)
            $elif $k=~/^code:\s*(\w+)/
                debug_code($def->{codes}->{$1})
    return $def;

fncode: import_file($f, $def, $file_type)
    # $print import_file [$f]
    #---- import a single def file, update @include-----
    # ---------------------
    $call @import_file_init
    my $plines=get_lines($f);
    # Insert an END to flush all the indentations
    push @$plines, "END"
    my $cur_file=$f
    my $cur_line=0
    $if $file_type eq "main"
        $call start_default_page
    &call parse_loop
        $call parse
    $if $file_type eq "main"
        $call add_default_page

    subcode: parse
        $call get_multiline_comment
        $call get_indentation  # and skip comments, trim leading and tailing spaces
        $call check_end_codeindent

        $if $(in_code)
            $call get_source_indent, $curindent
            $call get_source_dedent, $curindent
        # -------------------------------
        $if $line=~/^\w+code:/ && $(top_scope)
            $call subcode_start
            $call start_code_indent, code, $curindent+1, $t_code
        $elif $line=~/^macros:/ && $(top_scope)
            $call macros_start
            $call start_code_indent, macro, $curindent+1, $macros
        $elif $line=~/^template:/ && $(top_scope)
            $call grab_template
        $elif $curindent==0 and $line=~/^include:? (.*)/
            $call add_include
        $elif $curindent==0 and $line=~/^(sub)?page:\s*(.*)/
            my ($subpage, $t)=($1, $2)
            $call start_page
            $call start_code_indent, page, 1, $page
        $elif $curindent==0 and $line=~/^DEBUG\s*(.*)/
            parse_DEBUG($1)
        $elif $(in_code)
            push @$source, $line
        $elif $(in_macro)
            $call process_macros
        $elif $(in_page)
            $if $line=~/^(\w+):\s*(.*)/
                $call process_page_macros
            $elif $line=~/^\s*$/
                next
            $else
                # $print jump_to_main_code [$line]
                $call jump_to_main_code

    subcode: parse_loop
        # sub-used in parsing multi-line comments and grabing templates/resources
        $(allow_recurse:2)
        $while $cur_line < @$plines
            my $line = $plines->[$cur_line]
            $cur_line++
            BLOCK

#---------------------------------------- 
subcode: start_page
    my ($pagename, $framecode)
    # ---- name
    $if $t=~/([\w\-\$\.]+),\s*(\w.*)/
        $pagename=$1;
        $framecode=$2;
    $elif $t=~/([\w\-\$\.]+)/
        $pagename=$1;
    # ---- code
    my $codes={};

    $global $page
    $call @abort_default_page
    $page={_pagename=>$pagename, codes=>$codes, main_name=>"main"};

    $if $pagename=~/(.+)\.(.+)/
        $page->{type}=''

    $if $framecode
        my $code={name=>"_frame", type=>"sub", params=>[]}
        $codes->{main}=$code
        $if $framecode=~/^from\s+(\S+)/
            my $sub_name = get_template_sub_name()
            $code->{source}=["\$call $sub_name"]
            my $sub_definition = parse_template($def, $codes, $1, $sub_name)
            push @includes, $sub_definition
            #- 
            $page->{main_name}="main2"
        $else
            #-- $framecode may include parameters
            $code->{source}=["\$call $framecode"]
            $page->{main_name}="main2"

    $if $subpage
        $page->{subpage}=1;
    $if $file_type eq "main"
        $call add_page

#---------------------------------------- 
subcode: start_default_page
    $global $in_default_page
    $global $page
    $page={_pagename=>$def->{name}, codes=>{}, main_name=>"main"};
    $in_default_page = $page
    $call start_code_indent, page, 0, $page
    $codetype   = "page"
    $codeindent = 0
    $curindent = 0
    $lastindent = 0

subcode: abort_default_page
    undef $in_default_page
    # assert @indent_stack == 1

subcode: add_default_page
    $if $in_default_page
        my $pagename = $def->{name}
        $def->{pages}->{$pagename} = $in_default_page
        push @{$def->{pagelist}}, $pagename

subcode: check_default_page_framecode
    $if $def->{codes}->{basic_frame}
        my $codes=$in_default_page->{codes}
        my $code={name=>"_frame", type=>"sub", params=>[]}
        $code->{source}=["\$call basic_frame"]
        $codes->{main2}=$codes->{main}
        $codes->{main} =$code

#---------------------------------------- 
#-- used here and macros_parse/hacks.def: dupe_page
subcode: add_page
    # ---- insert into pages
    $call @check_duplicate
    $pages->{$pagename}=$page;
    push @$pagelist, $pagename

    subcode: check_duplicate
        $if $pages->{$pagename}
            my $t=$pagename;
            my $j=0;
            $while $pages->{$pagename}
                $j++;
                $pagename=$t.$j;

#---------------------------------------- 
subcode: get_multiline_comment
    # multiline_comments, Note: we are more strict than the C comments. 
    $if $line=~/^\s*\/\*/
        $if $line !~ /\*\/\s*$/
            &call parse_loop
                $if $line=~/\*\/\s*$/
                    last
        next

subcode: get_indentation
    $if $line=~/^\s*$/
        # sometime empty lines are significant, passes on, where compileutil will filter
        $line=""
    $elif $line=~/^(\s*)(.*)/
        # get current indentation and stripping starting spaces
        my $indent=get_indent($1)
        $line=$2
        $if $line=~/^#(?!(define|undef|include|line|error|pragma|if|ifdef|ifndef|elif|else|endif)\b)/
            $if $indent != $curindent
                $line="NOOP"
            $else
                next
        $else
            # Trim the tail
            $line=~s/\s+$//
            # Tail # need spaces before and after!
            $line=~s/\s+#\s.*$//
        $curindent=$indent

subcode: grab_template
    $if !$codeitem->{codes}
        $codeitem->{codes}={}
    my $codes = $codeitem->{codes}

    my @grab
    my $t_code = {type=>"template",source=>\@grab}
    $if $line =~ /^template:\s*(\w+)/
        $codes->{$1}=$t_code
    $else
        warn "parseutil: template missing name\n"

    my $grab_indent=$curindent
    &call parse_loop
        $call get_indentation
        $if $line eq ""
            push @grab, $line
        $elif $curindent>$grab_indent
            push @grab, '    'x($curindent-$grab_indent-1) . $line
        $else
            last
    $cur_line--

#---- includes ------------------------------------ 
subcode: _autoload
    $call dbl_list, includes

subcode: add_include
    $if $1 eq "noconfig"
        $includes{$1}=1
    $else
        $call dbl_push, includes, $1

subcode: load_standard_includes
    my $module = $MyDef::var->{module}

    my @standard_includes
    $if $MyDef::var->{'include'} and !$includes{"noconfig"}
        push @standard_includes, split(/[:,]\s*/, $MyDef::var->{'include'})

    my $stdinc="std_$module.def"
    push @standard_includes, $stdinc

#---- utils ------------------------------------ 
fncode: get_lines($file)
    $if ref($file) eq "ARRAY"
        return $file
    $elif $file eq "-pipe"
        my @lines=<STDIN>
        return \@lines
    $else
        my $filename=find_file($file)
        $call get_file_lines, $filename
        return \@lines;

