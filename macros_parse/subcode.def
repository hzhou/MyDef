subcode:: import_file_init
    my $source

subcode: push_line_to_source
    push @$source, $line

subcode: set_source_pos
    push @$source, "SOURCE: $cur_file - $cur_line"

subcode: set_source_pos_1
    push @$source, "SOURCE: $cur_file - ".($cur_line-1)

subcode: source_indent
    push @$source, "SOURCE_INDENT";
subcode: source_dedent
    $if $source->[-1] eq "NEWLINE?"
        pop @$source
        push @$source, "SOURCE_DEDENT";
        push @$source, "NEWLINE?"
    $else
        push @$source, "SOURCE_DEDENT";

#----------------------------
# ref: grab_template, subcode_start
subcode: add_subcode(src, @plist)
    $call get_parent, code_list
    my $_t = new_code($(plist))
    push @{$code_list}, $_t
    $_t->{source}=$(src)

#----------------------------
subcode: subcode_start
    $source=[]
    $call set_source_pos

    my $t_code
    expand_macro(\$line, $macros)
    # allows names such as Namespace::function_name
    $if $line=~/^(\w+)code:([:@\d]?)\s*([\w:]+)(.*)/ -> $type, $attr, $name, $t
        $call @hack_name_with_colons
        $call @line_extra
        $call add_subcode, $source, $type,$name,$attr,$t
        $t_code = $_t
        # $call @debug
    $else
        $t_code= {} # sink hole

    # ------------
    subcode: hack_name_with_colons
        # C++
        # $name may contain ':' to allow CLASS::method 
        $if $name=~/^((?:\w+::)*\w*)(:(?:$|\w.*))/
            $name = $1
            $t = "$2$t"

    subcode: line_extra
        # Java -- FIXME: merge with class::method
        # fncode: class.method
        $if $t=~/^(\.\w+)(.*)/
            $name .= $1
            $t = $2

    subcode: debug
        $print $type code $name, parent: -
        $if $parent == $def
            $print def
        $elif $parent->{_pagename}
            $print page: $parent->{_pagename}
        $else
            $print code: $parent->{name}

#---------------------------------------- 
fncode: new_code($type,$name,$attr,$t)
    # $print new_code $type - $name
    $global $code_index=0
    $code_index++
    my $t_code={type=>$type, index=>$code_index, name=>$name}
    $if !$attr
        $if $name=~/^(.*_autoload|main)$/
            $attr=":"
    $call parse_subcode_order, $attr
    $if $t
        $call parse_tail
    return $t_code

    subcode: parse_tail
        # (params)
        $if $t=~/^\s*\(\s*(.*)\)(.*)/
            $t=$2
            my @params=split /,\s*/, $1;
            $t_code->{params}=\@params
        # : tail
        $if $t=~/^\s*:\s*(.+)/
            $t_code->{tail} = $1

subcode: parse_subcode_order(attr)
    # 1-8 merge -- consider only use 1,5,8, default :: is 5
    # 0 -- default, gets overwritten
    # 9 -- overwrite all others
    $if $(attr)=~/^[0-9]$/
        # \d, direct priority
        $t_code->{order}=$(attr)
    $elif $(attr) eq '@'
        # default, gets overwritten
        $t_code->{order}=0
    $elif $(attr) eq ':'
        # 1-8, merge, append
        $t_code->{order}=5
    $else
        # keep one, overwrite
        $t_code->{order}=9

fncode: merge_codes($codeitem)
    my $L=$codeitem->{code_list}
    $if !$L
        return
    $call @check_error
    my %H
    my @sorted = sort {$a->{order} <=> $b->{order} } @$L
    $foreach $code in @sorted
        my $name = $code->{name}
        $if !$H{$name}
            $H{$name} = $code
        $else
            $call merge_to, $H{$name}
        clean_up_source($H{$name}->{source})
    $codeitem->{codes}=\%H
    undef $codeitem->{code_list}
    $foreach %H
        merge_codes($v)

    subcode: merge_to(C)
        my $a = $(C)->{order}
        my $b = $code->{order}
        $if $a==0
            $(C)=$code
        $elif $b==9
            $if $a==9
                $call @warn_overwrite, no
            $else
                $call @warn_overwrite, yes
                $(C)=$code
        $else
            $call merge_source
            $call merge_macros
            $call merge_code_list

        subcode: merge_source
            my $src_a = $(C)->{source}
            my $src_b = $code->{source}
            push @$src_a, @$src_b
        subcode: merge_macros
            my $m_a = $(C)->{macros}
            my $m_b = $code->{macros}
            $foreach %$m_b
                $m_a->{$k}=$v
        subcode: merge_code_list
            my $l_a = $(C)->{code_list}
            my $l_b = $code->{code_list}
            $if $l_a and $l_b
                push @$l_a, @$l_b
            $elif $l_b
                $(C)->{code_list}=$l_b

    subcode: check_error
        $if $codeitem->{codes}
            warn "parseutils: codeitem with existing {codes}?\n"

    subcode: warn_overwrite(yes)
        my $loc_a = $(C)->{source}->[0]
        my $loc_b = $code->{source}->[0]
        $loc_a=~s/SOURCE: //
        $loc_b=~s/SOURCE: //
        $(if:yes=yes)
            $print Overwriting subcode $name: [$loc_a] -> [$loc_b]
        $(else)
            $print Not overwriting subcode $name: [$loc_a] -> [$loc_b]

fncode: clean_up_source($src)
    $if $src and @$src
        # remove starting empty lines
        $foreach $l in @$src
            $if $l=~/^SOURCE:/
                next
            $elif $l=~/^(\s*|NEWLINE\?)$/
                $l = "NOOP"
            $else
                last
        # remove trailing empty lines
        my $i=$#$src
        $while $i>=0 and $src->[$i]=~/^(SOURCE: .*|\s*|NEWLINE\?)$/
            pop @$src
            $i--


#--------------------------
subcode:: post_parsing
    merge_codes($def)
    my $pages=$def->{pages}
    $foreach %$pages
        merge_codes($v)

    # need merge page codes

subcode:: codeitem_post_end
    $if $codetype eq "code"
        $source = $codeitem->{source}
        $call set_source_pos

#---------------------------------------- 
subcode: jump_to_main_code
    # assert $curindent==1
    $source=[]
    $(set:parent=$page)
    $call add_subcode, $source, "sub","main"
    $call set_source_pos

