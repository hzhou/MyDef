subcode:: parse_init
    my $macros=$def->{macros}
    #- import from config
    $while my ($k, $v)=each %$MyDef::var
        $if $k=~/macro_(\w+)/
            $macros->{$1}=$v;

#---- macros ------------------------------------ 
subcode: macros_start
    $call get_parent, macros

subcode: process_macros
    $if $line=~/^(\w+):([:!=])?\s*(.*)/
        my ($k,$dblcolon, $v)=($1, $2, $3)
        expand_macro(\$v, $macros);
        $v=~s/\s+$//
        $if $macros->{$k}!~/^$/
            $if $dblcolon eq ':'
                # :: append
                $if $v!~/^$/
                    $macros->{$k}.=", $v"
            $elif $dblcolon eq '!'
                # :! overwrite
                $macros->{$k}=$v
            $elif $macros->{$k} ne $v
                # $print "[$cur_file:$cur_line] Denied overwriting macro $k"
        $elif $dblcolon eq '='
            # := eval
            $macros->{$k} = eval($v)
        $else
            $macros->{$k}=$v
    $elif $line=~/^(.*):\s*(.*)/ -> $t1, $t2
        my @klist=split /,\s*/, $t1
        my @vlist=MyDef::utils::get_tlist($t2)
        $foreach $k, $v in @klist, @vlist
            $macros->{$k}=$v

#----------------------------------------------------- 
#- parse time macro expansion, 
#-     limited to global simple macros
#-     only with macros defined earlier
fncode: expand_macro($lref, $macros)
    $while  $$lref=~/\$\(\w+\)/
        my @segs=split /(\$\(\w+\))/, $$lref;
        my $j=0;
        my $flag=0;
        $foreach my $s in @segs
            $if $s=~/\$\((\w+)\)/
                my $t=$macros->{$1};
                $if $t eq $s
                    die "Looping macro $1 in \"$$lref\"!\n";
                $if defined $t
                    $segs[$j]=$t;
                    $flag++;
            $j++;
        $if $flag
            $$lref=join '', @segs;
        $else
            last;

