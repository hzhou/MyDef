include: output.def
include: macros_output/case.def
include: macros_output/for.def

include: macros_output/scope.def
include: macros_output/sumcode.def

page: output_perl, output_main
    output_dir: lib/MyDef
    ext: pl
    type: pm
    package: MyDef::output_perl

subcode:: _autoload
    $global $perl = $^X
    $if $perl!~/^\//
        $perl = "/usr/bin/perl"

subcode: init_page
    $if $page->{package} and !$page->{type}
        MyDef::set_page_extension("pm")
    $elif !$page->{package} and $page->{type} eq "pm"
        $page->{package}=$page->{_pagename}

    $if $page->{_pageext} eq "pm"
        $page->{autolist}=1

    $call survey_functions

    $map dbl_list, globals, uses

#---------------------------------------- 
subcode: parsecode
    $(set:parse_condition=1)
    $if $l!~/;\s*$/
        $call parsecode_scope
        $call parsecode_case_support, if, elsif, perl_style
        $if $l=~/^\s*\$(\w+)\s*(.*)$/
            my $func=$1;
            my $param=$2;
            $call parsecode_function
        $elif $l=~/^NOOP POST_MAIN/
            $call list_functions
            return 0
        # $call check_hash_equal
        $call check_termination
    check_fcall($l)
    push @$out, $l

    return 0;

fncode: check_fcall($l)
    $while $l=~/\b(\w+)\(/g
        $call add_function, $1, nowarn

subcode: parsecode_function
    # TODO: think about $loopvar 
    $if $func =~ /^global$/
        $call var_declare, global
    $elif $func =~ /^my$/ and $param !~/^\s*[=+\-*\/]/
        $call var_declare, my
    $elif $func =~ /^use$/
        $call dbl_push_list, uses, $param
        return 0
    $elif $func eq "list"
        my @flist = MyDef::utils::proper_split($param)
        $foreach $name in @flist
            $call add_function, $name, warn
        return 0
    $elif $func eq "sub"
        $if $param=~/^(\w+)\((.*)\)/
            &call return_newblock, sub
                push @src, "sub $1 {" 
                push @src, "INDENT"
                push @src, "my ($2)=\@_;"
                push @src, "BLOCK"
                push @src, "DEDENT"
                push @src, "}"
        $else
            return single_block("sub $param {", "}", "sub")

    $elif $func =~ /^(while)$/
        $call check_regex_capture, $param
        $if $regex_capture
            &call return_newblock, while
                push @src, "while ($param) {"
                push @src, "INDENT"
                push @src, $regex_capture
                push @src, "BLOCK"
                push @src, "DEDENT"
                push @src, "}"
        $elif $param=~/\/.*\/\w*\s*$/
            return single_block("while ($param) {", "}", "while")
        $else
            $call parsecode_while_support, c_style
    $elif $func =~ /^for(each)?$/
        $if $1 or $param=~/ in /
            $call parsecode_foreach
        $else
            $call parsecode_for_support, c_style
        return 0
    $elif $func =~ /^loop$/
        return single_block("while (1) {", "}", "while")
    $elif $func eq "sumcode" or $func eq "sum"
        $if $param=~/^\((.*?)\)\s+(.*)/
            my $dimstr=$1
            $param=$2
            $call parsecode_sum_simple, perl
        $elif $func eq "sumcode"
            $call parsecode_sum_support, perl
    $elif $func eq "source-$param"
        return "SKIPBLOCK"
    $call @parsecode_func_other

# -------
macros:
    sumcode_idx: \$_$1

# -------
fncode: parse_condition($t)
    $if $t=~/^!?\/|[!=]~\s*\//
        # regex 
    $elif $t=~/[^!=><]=[^="]/
        $if $t!~/["'].*=.*['"]/
            $call warn, assignment in condition [$t]? 
    $elif $t=~/\$(?:eq|ne)/
        #-- to supress warning ----
        $if $t=~/(.*?)(\S+)\s+(\$eq|\$ne)\s+(.*)/
            $if $3 eq '$eq'
                $t=$1."$2 && $2 eq $4"
            $else
                #-- remember to use () when necessary
                $t=$1."!$2 || $2 ne $4"
    return $t

#- TODO: it would be nice to turn ".*" or '.*' or (.*) into excaped or recursive match automatically
subcode: check_regex_capture(t)
    my $regex_capture
    $if $(t)=~/(.*\S\/\w*)\s*->\s*([^\/]+?)\s*$/
        $(t) = $1
        my @tlist=MyDef::utils::proper_split($2)
        my (@t1, @t2)
        my $i=1
        $foreach $v in @tlist
            $if $v ne "-"
                push @t1, $v
                push @t2, '$'.$i
            $i++
        $regex_capture = "my (".join(', ', @t1).") = (".join(', ', @t2).");"

#---------------------------------------- 
subcode:: parsecode_func_other
    $elif $func =~ /^loopvar$/
        $call add_loop_var
        return 0

subcode: add_loop_var
    my @tlist=MyDef::utils::proper_split($param)
    my $block=MyDef::compileutil::get_named_block("...")
    $foreach $v in @tlist
        push @$block, "my $v;"

#---------------------------------------- 
subcode: for_i0_i1_step
    $call for_i0_i1_step_default, loop_var
    $param = "my $param"

subcode: if_perl_style
    $call check_regex_capture, $cond
    push @src, "$case ($cond) {";
    push @src, "INDENT";
    $if $regex_capture
        push @src, $regex_capture
    push @src, "BLOCK";
    push @src, "DEDENT";
    push @src, "}";

subcode: elif_perl_style
    $call if_perl_style

subcode: else_perl_style
    $call push_single_block, "else {", "}"

# -------------------------
subcode: parsecode_foreach
    $if $param=~/^(.*?)\s+in\s+(.*)/ -> $v, $t
        $if $v!~/,/
            $call each_single
        $else
            my @v = split /,\s*/, $v
            $if @v==2 and $t=~/^%/
                $call each_hash
            $else
                $call each_fancy
        die "foreach with mismatched keys and lists\n"
    $else
        # $for @list { ... }
        $call each_implicit
    # -----------------------
    subcode: each_single
        $v=~s/^my\s+//
        return single_block("foreach my $v ($t) {", "}", "foreach")
    subcode: each_implicit
        $if $param=~/^(%.*)/
            return single_block("while (my (\$k, \$v) = each $1) {", "}", "foreach")
        $else
            return single_block("foreach ($param) {", "}", "foreach")
    subcode: each_hash
        my ($k, $v)=@v
        return single_block("while (my ($k, $v)=each $t) {", "}", "foreach")

    subcode: each_fancy
        my @t=MyDef::utils::proper_split($t)
        $if $#v==$#t
            unshift @v, '$_i'
        $if $#v==$#t+1 and $v[0]=~/^\$_?[ijk]/
            $if $#v==1
                $call each_idx
            $else
                $call each_zip
    # ---------------
    subcode: each_idx
        my ($idx, $v)=@v
        &call return_newblock, foreach
            push @src, "my $idx = -1;"
            push @src, "foreach my $v ($t) {"
            push @src, "INDENT"
            push @src, "$idx++;"
            push @src, "BLOCK"
            push @src, "DEDENT"
            push @src, "}"
    subcode: each_zip
        my $idx=shift @v
        $call @check_tlist
        &call return_newblock, foreach
            push @src, "for (my $idx = 0; $idx < $t[0]; $idx++) {"
            push @src, "INDENT"
            $for $i=0:@v
                my $a=$v[$i]
                $if $t[$i]=~/^@(\w+)$/
                    push @src, "my $a = \$$1"."[$idx];"
                $elif $t[$i]=~/^@(.+)/
                    push @src, "my $a = $1"."->[$idx];"
            push @src, "BLOCK"
            push @src, "DEDENT"
            push @src, "}"
        subcode: check_tlist
            $for $v in @v
                $if $v eq $idx
                    $call warn, "foreach zip: dummy variable $idx is in conflict\n"
            $for $t in @t
                $if $t!~/^@/
                    die "foreach zip error: $t is not an array.\n"

subcode: loop_var
    $if !$var
        $var="\$i"
    $elif $var=~/^(\w+)/
        $var='$'.$var

#---------------------------------------- 
subcode: dumpout
    # needed for wrapping up &case support
    parsecode("NOOP")
    $if $out->[0] eq "EVAL"
        # A mode to skip #! and accessories
        shift @$out
    $else
        my $pagetype = $page->{_pageext}
        $if !$pagetype or $pagetype eq "pl"
            push @$f, "#!$perl\n"
        $call dump_accessories
    # ---------------
    subcode: dump_accessories
        my @tmp_out

        $(set:p=$MyDef::page->{$1})
        $if !$(p:relax)
            push @tmp_out, "use strict;"
            $(if:0)
                push @tmp_out, "use warnings;"
                
                $if !$(p:nowarn)
                    push @tmp_out, "no warnings qw(uninitialized);"
                $elif $(p:nowarn) ne "none"
                    push @tmp_out, "no warnings qw($(p:nowarn));"

        $if @uses
            $foreach $v in @uses
                push @tmp_out, "use $v;"
            push @tmp_out, "NEWLINE?"

        $if $(p:package)
            push @tmp_out, "package ".$(p:package).";"
        
        push @tmp_out, "NEWLINE?"
        push @tmp_out, "DUMP_STUB frame_init"

        $if @globals
            $foreach $v in @globals
                push @tmp_out, "our $v;"
            push @tmp_out, "NEWLINE?"

        #-- to be processed by dumpout -- reverse order due to unshift
        $if @$fn_block
            $dump->{fn_block}=$fn_block
            $(if:0)
                # subs before main
                push @tmp_out, "INCLUDE_BLOCK fn_block"
            $(else)
                # subs after main
                push @$out, "NEWLINE?"
                push @$out, "# ---- subroutines ----"."-"x40
                push @$out, "INCLUDE_BLOCK fn_block"

        push @tmp_out, "DUMP_STUB global_init"

        unshift @$out, @tmp_out
        $if $(p:package) or $page->{type} eq "pm"
            push @$out, "NEWLINE?"
            push @$out, "1;"

#----------------------------------------------- 
subcode: survey_functions
    $global %fn_hash
    %fn_hash=()
    &call each_subcode, fn
        $fn_hash{$name}=$code
    $call dbl_list, functions

subcode: add_function(name, warn)
    $if $fn_hash{$(name)}
        $if !$functions{$(name)}
            push @functions, $(name)
            $functions{$(name)} = $MyDef::def->{codes}->{$(name)}
    $(if:warn=warn)
        $else
            $call warn, add_function: [$(name)] not found

subcode: list_functions
    $global $fn_block=[], @fn_decls
    &call replace_output, $fn_block
        $if $page->{autolist}
            &call each_subcode, fn
                # $name, $code
                $call parse_function
        $else
            # $while my $name = pop @functions
            $foreach $name in @functions
                my $code = $functions{$name}
                $call parse_function

    subcode: parse_function
        push @fn_decls, "sub $name;"
        push @$out, "sub $name {"
        push @$out, "INDENT"
        my $params=$code->{params}
        $if $params and @$params
            my $pline=join(", ", @$params)
            push @$out, "my ($pline) = \@_;"
        $code->{scope}="list_sub"
        MyDef::compileutil::list_sub($code)
        push @$out, "DEDENT"
        push @$out, "}"
        push @$out, "NEWLINE"
    
#---- for extensions ----
fncode: inject_function($name, $params, $source)
    my $t_code={'type'=>"fn", name=>$name, params=>$params, 'source'=>$source}
    $MyDef::def->{codes}->{$name}=$t_code

#----------------------------------------------- 
subcode: check_hash_equal
    $if $l=~/[({][^)}]*=[^>]/
        $call warn, Miss typed = in hash? [$l]

subcode: check_termination
    $if $l=~/^\s*$/
        # NOOP
    $elif $l=~/^break\s*((not|flag)_\w+)?\s*$/
        $if $1
            $call @break_flag
            push @$out, "\$$1 = 1;"
        $l="last;"
    $elif $l=~/^continue\s*$/
        $l="next;"
    $elif $l=~/^\s*(for|while|if|else if)\s*\(.*\)\s*$/
        # NOOP
    $elif $l=~/^\s*}/
        # Check the formal blockend
        # Inline blocks will get ; appended.
    $elif $l!~/[,:\(\[\{;]\s*$/
        $l.=";";
    $else
        # NOOP
    # ---------------------
    subcode: break_flag
        my $stub_idx = $MyDef::compileutil::stub_idx
        my $blkname="-$stub_idx"
        my $blk = MyDef::compileutil::get_named_block($blkname)
        my $t = "my \$$1;"
        ...
        $foreach $_l in @$blk
            $if $_l eq $t
                break flag_exist
        $if !$flag_exist
            push @$blk, $t
#---------------------------------------- 
subcode:: parsecode_func_other
    $elif $func eq "print"
        $call parsecode_print

subcode: parsecode_print
    my $str=$param
    my $printf_args
    my $need_escape
    $if $str=~/^\s*\"(.*)\"\s*$/
        $str=$1
    $elif $str=~/^\s*\"([^"]+)\",\s*(.+)$/
        $str = $1
        $printf_args=$2
        check_fcall($2)
    $else
        $need_escape=1

    my %colors=(red=>31,green=>32,yellow=>33,blue=>34,magenta=>35,cyan=>36)

    my @fmt_list
    my @arg_list

    my @group
    my $n_escape=0
    &call parse_loop, $str
        &call if_lex, \$
            &call if_lex, (red|green|yellow|blue|magenta|cyan)
                #---------------------------------------- 
                #- $print $green ---------
                push @fmt_list, "\\x1b[$colors{$1}m"
                $n_escape++
                &call if_lex, \{
                    push @group, $1
            $else
                push @fmt_list, '$'
        &call if_lex, (\\.)
            push @fmt_list, $1
        $elif $str=~/\G"/gc
            $if $need_escape
                push @fmt_list, "\\\""
            $else
                push @fmt_list, "\""
        &call if_lex, \}
            #---------------------------------------- 
            #- $print $green{some text}
            $if @group
                pop @group
                $if !@group
                    push @fmt_list, "\\x1b[0m"
                    $n_escape=0
                $else
                    my $c=$group[-1]
                    push @fmt_list, "\\x1b[$colors{$c}m"
                    $n_escape++
            $else
                push @fmt_list, '}'
        $elif $str=~/\G[^\$\}"]+/gc
            push @fmt_list, $&

    my $tail=$fmt_list[-1]
    $if $tail=~/(.*)-$/
        $fmt_list[-1]=$1
    $elif $tail!~/\\n$/
        push @fmt_list, "\\n"
    $if $n_escape
        push @fmt_list, "\\x1b[0m"

    my $p
    $if $printf_args
        $p = "printf"
    $else
        $p = "print"

    my $print_target = MyDef::compileutil::get_macro_word("print_to", 1)
    $if $print_target
        $p.=" $print_target"

    $if $printf_args
        push @$out, "$p \"".join('',@fmt_list)."\", $printf_args;"
    $else
        push @$out, "$p \"".join('',@fmt_list).'";'

    return

#---- scope  for sumcode -------
subcode: var_declare(scope)
    # $call @remove_trailing_semi
    my @tlist=MyDef::utils::proper_split($param)
    $foreach $v in @tlist
        my ($name, $var)
        $call @check_array_dims
        $(if:scope=global)
            $if $v=~/^(\S+)\s*=/
                $call dbl_push_key, globals, $1, $v
            $else
                $call dbl_push, globals, $v
            $if $var
                # [fix later]
                # $global_scope->{var_hash}->{$name}=$var
        $(else)
            push @$out, "my $v;"
            $if $var
                $cur_scope->{var_hash}->{$name}=$var
    return 0

    subcode: remove_trailing_semi
        # not needed as any with ; gets by passed anyway
        $param=~s/\s*;\s*$//

    subcode: check_array_dims
        $if $v=~/\@(\w+)\[(.*)\](.*)/
            $name=$1
            $v='@'.$1.$3
            $var={}
            my @tlist=split /,\s*/, $2
            my $i=0
            $foreach $t in @tlist
                $i++
                $var->{"dim$i"}=$t
#----
