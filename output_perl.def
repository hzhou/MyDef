include: output.def

page: output_perl, output_main
    type: pm
    output_dir: lib/MyDef
    ext: pl
    init_mode: sub
    package: MyDef::output_perl

subcode: init_page
    $if $page->{package} and !$page->{type}
	$page->{type}="pm"
	$ext="pm"
    $elif !$page->{package} and $page->{type} eq "pm"
	$page->{package}=$page->{pagename}

subcode:: package_globals
    our @globals
    our %globals

# --------------------------
subcode: parsecode
    $call parsecode_case_support, if, elsif, c_style
    $if $l=~/^\s*\$(\w+)\s*(.*)$/
	my $func=$1;
	my $param=$2;
	$if $func =~ /^global$/
	    $param=~s/\s*;\s*$//
	    my @tlist=split /,\s*/, $param
	    $foreach $v in @tlist
		$if !$globals{$v}
		    $globals{$v}=1
		    push @globals, $v
	    return 0

	$elif $func =~ /^(while)$/
	    return single_block("$1($param){", "}")
	$elif $func eq "sub"
	    $if $param=~/^(\w+)\((.*)\)/
		return single_block_pre_post(["sub $1 {", "INDENT", "my ($2)=\@_;"], ["DEDENT", "}"])
	    $else
		return single_block("sub $param {", "}")

	$elif $func eq "for" or $func eq "foreach"
	    $call parse_for

    $call check_termination
    push @$out, $l

    return 0;

subcode: dumpout
    $if !defined $pagetype or $pagetype eq "pl"
	push @$f, "#!/usr/bin/perl\n"

    push @$f, "use strict;\n"

    $if $MyDef::page->{package}
	push @$f, "package ".$MyDef::page->{package}.";\n"
    
    $foreach $v in @globals
	push @$f, "our $v;\n"

subcode: check_termination
    #$l=~s/^\|//;
    $if $l=~/^\s*$/
	# NOOP
    $elif $l=~/^\s*(break|continue);?\s*$/
	$if $1 eq "break"
	    $l="last;"
	$elif $l eq "continue"
	    $l="next;"
    $elif $l=~/(for|while|if|else if)\s*\(.*\)\s*$/
	# NOOP
    $elif $l=~/^\s*}/
	# Check the formal blockend
	# Inline blocks will get ; appended.
    $elif $l!~/[,:\(\[\{;]\s*$/
	#print "[$l]appending ;\n";
	$l.=";";
    $else
	#print "[$l]\n";

subcode: parse_for
    $if $param=~/(\$\w+)=(.*?):(.*?)(:.*)?$/
	my ($var, $i0, $i1, $step)=($1, $2, $3, $4);
	my $stepclause;
	$if $step
	    my $t=substr($step, 1);
	    $if $t eq "-1"
		$stepclause="my $var=$i0;$var>$i1;$var--";
	    $elif $t=~/^-/
		$stepclause="my $var=$i0;$var>$i1;$var=$var$t";
	    $else
		$stepclause="my $var=$i0;$var<$i1;$var+=$t";
	$else
	    $if $i1 eq "0"
		$stepclause="my $var=$i0-1;$var>=0;$var--";
	    $elif $i1=~/^-?\d+/ and $i0=~/^-?\d+/ and $i1<$i0
		$stepclause="my $var=$i0;$var>$i1;$var--";
	    $else
		$stepclause="my $var=$i0;$var<$i1;$var++";
	return single_block("for($stepclause){", "}")

    $elif $param=~/(\$\w+)\s+(in\s+)?(.*)/
	my ($var, $list)=($1, $3)
	$if $list!~/^(@|keys|sort)/ and $list!~/,/ 
	    warn "  foreach ($list) -- does not look like an array\n"
	return single_block("foreach my $var ($list){", "}")

    $else
	return single_block("$func($param){", "}")
