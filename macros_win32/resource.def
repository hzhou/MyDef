# -------- Window ---------------------------------------
subcode:: package_global
    my %window_hash
    my $resource_id=1000

subcode: register_window
    my $block=MyDef::compileutil::get_named_block("global_init")
    my $old_function=$cur_function;
    &call replace_output, $block
	# ---- window proc  ----------------
	my $fidx=open_function("wndproc_$name", "HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam")
	$cur_function->{ret_type}="LRESULT CALLBACK";
	&call push_open_function
	    push @$out, "switch(msg){";
	    &call push_indent_block
		MyDef::compileutil::call_sub("\@msg_$name", 0)
		push @$out, "case WM_DESTROY:";
		&call push_indent_block
		    push @$out, "PostQuitMessage(0);"
		    push @$out, "break;";
		push @$out, "default:";
		&call push_indent_block
		    push @$out, "return DefWindowProc(hwnd, msg, wparam, lparam);"
	    push @$out, "}";
	    push @$out, "return 0;"

	# ---- register window function ----------------
	my $fidx=open_function("register_$name", "HINSTANCE hInst")
	$cur_function->{ret_type}="int"
	&call push_open_function
	    push @$out, "if(!GetClassInfoEx(hInst, \"$name\", \&wc)){"
	    &call push_indent_block
		func_add_var("wc", "WNDCLASSEX")
		push @$out, "memset(&wc, 0, sizeof(wc));"
		push @$out, "wc.hInstance = hInst;"
		push @$out, "wc.lpszClassName = \"$name\";"
		push @$out, "wc.lpfnWndProc = wndproc_$name;"
		$call res_init_attr, wnd
		$call res_update, "wnd_$name"
		$call res_fill, wc
		push @$out, "if(!RegisterClassEx(\&wc)) return 0;"
	    push @$out, "}"
	    push @$out, "return 1;"
    $cur_function=$old_function

subcode: make_window
    $if !$window_hash{$name}
	$call register_window
    push @$out, "register_$name(hInst);"
    push @$out, "$var = CreateWindowEx(0, \"$name\", \"$name\", WS_OVERLAPPEDWINDOW, 0, 0, 1000, 800, NULL, NULL, hInst, NULL);"

# -------- Menu ---------------------------------------
subcode:: support_subs
    $sub ogdl_menu
	my ($out, $menuvar, $menu, $indent)=@_;
	my $pos=0;
	my $menu_item_list=$menu->{_list}
	#print "menu: $menu, list: $menu_item_list\n";
	$foreach $t in @$menu_item_list
	    $if ref($t) eq "HASH"
		my $sublist=$t->{_list}
		$if @$sublist
		    #---- PopUp SubMenu ----
		    my $var=sprintf("hmenu_sub%d", $indent+1);
		    func_add_var($var, "HMENU");
		    push @$out, "$var = CreatePopupMenu();";
		    ogdl_menu($out, $var, $t, $indent+1);
		    push @$out, "InsertMenu($menuvar, $pos, MF_POPUP|MF_BYPOSITION, (UINT_PTR)$var, \"$t->{_name}\");";
		    push @$out, "DestroyMenu($var);";
		$else
		    #---- MenuItem with Attributes ----
		    my $name=$t->{_name}
		    my $title=$t->{text}
		    $if !defined $title
			$title=$name
		    my $id_name="ID_$name";
		    $resource_id++
		    $defines{$id_name}=$resource_id
		    push @$out, "AppendMenu($menuvar, MF_STRING, $id_name, \"$title\");";

	    $else
		#---- Text MenuItem ----
		$if $t eq "----"
		    push @$out, "AppendMenu($menuvar, MF_SEPARATOR, 0, NULL);";
		$else
		    my $id_name="ID_$t";
		    $id_name=~s/[ &]//g;
		    $resource_id++
		    $defines{$id_name}=$resource_id
		    push @$out, "AppendMenu($menuvar, MF_STRING, $id_name, \"$t\");";
	    $pos++;

# -------- Font ---------------------------------------
subcode: make_font
    my @plist=split /,\s*/, $spec
    $call res_init_attr, font
    $foreach my $p in @plist
	$if $p=~/(\d+)/
	    $attr{lfHeight}=-$1
	$elif $p=~/bold/i
	    $attr{lfWeight}="FW_HEAVY"
	$elif $p=~/italic/i
	    $attr{lfItalic}=1
	$elif $MyDef::def->{resource}->{"font_$p"}
	    my $name=$p
	    $call res_update, "font_$p"
	$else
	    $attr{lfFaceName}="\"$p\""
    func_add_var("lf", "LOGFONT")
    $call res_fill, lf
    
    func_add_var($var, "HFONT");
    $if $misc_vars{hgdi_enable}
	hgdi_pre_assign("HFONT", $var, "0", $out);
    push @$out, "$var = CreateFontIndirect(&lf);";
    $if $misc_vars{hgdi_enable}
	push @$out, "hgdi_add($var);";
    $var_retain_hash{$var}=1;

# -------- ---------------------------------------
subcode: res_init_attr(type)
    my %attr;
    my $default=$MyDef::def->{resource}->{default_$(type)}
    $while my ($k, $v)=each %$default
	$if $k!~/^_(name|list)/
	    $attr{$k}=$v
subcode: res_update(tag)
    my $a=$MyDef::def->{resource}->{$(tag)}
    $if $a
	$while my ($k, $v)=each %$a
	    $if $k!~/^_(name|list)/
		$attr{$k}=$v
subcode: res_fill(s)
    $while my ($k, $v)=each %attr
	$if $k!~/^_(name|list)/
	    $if $v=~/^"(.*)"/
		push @$out, "strcpy($(s).$k, $v);"
	    $else
		push @$out, "$(s).$k = $v;"
##################################################
subcode: replace_output(name)
    my $tempout=$MyDef::compileutil::out
    $MyDef::compileutil::out=$(name)
    $out=$(name)
    BLOCK
    $MyDef::compileutil::out=$tempout
    $out=$tempout

subcode: push_open_function
    push @$out, "OPEN_FUNC_$fidx"
    push @$out, "SOURCE_INDENT"
    BLOCK
    push @$out, "SOURCE_DEDENT"

subcode: push_indent_block
    push @$out, "INDENT"
    BLOCK
    push @$out, "DEDENT"
