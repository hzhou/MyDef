# 
subcode: fetch_named_resource(type)
    my $$(type) = $MyDef::def->{resource}->{"$(type)_$name"}
    $if !$$(type)
	print "Resource $(type): $name does not exist\n"
	return

# -------- Window ---------------------------------------
subcode:: package_global
    my %window_hash
    my @window_list
    my $resource_id=1000

subcode: make_window
    $call fetch_named_resource, view
    create_window($out, $view, 1)

subcode: load_view
    $call fetch_named_resource, view
    $if $view->{menu}
	my ($var, $name)=("hmenu", $view->{menu})
	$call load_menu
	push @$out, "SetMenu(hwnd, hmenu);"
	push @$out, "DestroyMenu(hmenu);"
    my $list=$view->{_list}
    my $flag_docked_views=0
    $foreach my $v in @$list
	$flag_docked_views+=check_window_dock($v)
    $if $flag_docked_views
	func_add_var(rect_client)
	push @$out, "GetClientRect(hwnd, &rect_client);"
    $foreach my $v in @$list
	create_window($out, $v, 0)

subcode:: support_subs
    $sub register_window
	my ($name)=@_
	my $controller_type=$window_hash{$name}
	my $block=MyDef::compileutil::get_named_block("global_init")
	my $old_function=$cur_function;
	&call replace_output, $block
	    # ---- window proc  ----------------
	    my $fidx=open_function("wndproc_$name", "HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam")
	    $cur_function->{ret_type}="LRESULT CALLBACK";
	    &call push_open_function
		$if $controller_type=~/struct (\w+)/
		    func_add_var("controller", "struct $1 *")
		    push @$out, "if(msg==WM_NCCREATE){"
		    &call push_indent_block
			push @$out, "controller=(struct $1 *)((LPCREATESTRUCT)lparam)->lpCreateParams;"
			push @$out, "SetWindowLong(hwnd, GWL_USERDATA, (LONG)controller);"
		    push @$out, "}"
		    push @$out, "else{"
		    &call push_indent_block
			push @$out, "controller=(struct $1 *)GetWindowLong(hwnd, GWL_USERDATA);"
		    push @$out, "}"
		push @$out, "switch(msg){";
		&call push_indent_block
		    MyDef::compileutil::call_sub("msg_$name", 0)
		    push @$out, "default:";
		    &call push_indent_block
			push @$out, "return DefWindowProc(hwnd, msg, wparam, lparam);"
		push @$out, "}";
		push @$out, "return 0;"

	    # ---- register window function ----------------
	    my $fidx=open_function("register_$name")
	    $cur_function->{ret_type}="int"
	    &call push_open_function
		push @$out, "if(!GetClassInfoEx(cur_instance, \"$name\", \&wc)){"
		&call push_indent_block
		    func_add_var("wc", "WNDCLASSEX")
		    push @$out, "memset(&wc, 0, sizeof(wc));"
		    push @$out, "wc.hInstance = cur_instance;"
		    push @$out, "wc.lpszClassName = \"$name\";"
		    push @$out, "wc.lpfnWndProc = wndproc_$name;"
		    $call res_init_attr, wnd
		    $call res_update, "wnd_$name"
		    $call res_fill, wc
		    push @$out, "if(!RegisterClassEx(\&wc)) return 0;"
		push @$out, "}"
		push @$out, "return 1;"
	$cur_function=$old_function

    $sub create_window
	my ($out, $view, $is_main)=@_
	my ($controller_type, $hwnd, $parent, $data)
	$if $is_main
	    $controller_type="struct controller_main"
	    $data="&main"
	    $hwnd="main.hwnd"
	    $parent="NULL"
	$else
	    $hwnd="hwnd_child"
	    $parent="hwnd"
	    func_add_var($hwnd, "HWND");
	    $if $view->{controller}
		$controller_type="struct $view->{controller}"
		$data="controller"
	    $else
		$controller_type="1"
		$data="NULL"

	$call get_res_view_attr
	# ----
	$if !$attr{skip_register}
	    $window_hash{$attr{wndclass}}=$controller_type
	    push @window_list, $attr{wndclass}

	push @$out, "$hwnd = CreateWindowEx($attr{style_ex}, \"$attr{wndclass}\", \"$attr{text}\", $attr{style}, $x, $y, $w, $h, $parent, $attr{id}, cur_instance, $data);"
	$if $attr{font}
	    my ($var, $spec)=("hfont", $attr{font})
	    $call make_font
	    push @$out, "SendMessage($hwnd, WM_SETFONT, (WPARAM)hfont, 0);"
    $sub check_window_dock
	my ($view)=@_
	$call get_res_view_attr
	$if $x<0 and $w<0
	    $x=-$x
	$if $y<0 and $h<0
	    $y=-$y
	$if $x<0
	    $x="rect_client.right-$w$x"
	$if $y<0
	    $y="rect_client.bottom-$h$y"
	$if $w<0
	    $w="rect_client.right-$x$w"
	$if $h<0
	    $h="rect_client.bottom-$y$h"
	$view->{position}="$x, $y"
	$view->{size}="$w, $h"

subcode: get_res_view_attr
    my $name=$view->{_name}
    $call res_init_attr, view
    $call res_update, "view_$name"
    $call res_update, "ctl_$name"
    $call res_update_attr, $view 
    my ($x, $y)=split /,\s*/, $attr{position}
    my ($w, $h)=split /,\s*/, $attr{size}

# -------- Menu ---------------------------------------
subcode: load_menu
    $call fetch_named_resource, menu
    func_add_var($var, "HMENU")
    push @$out, "$var = CreateMenu();"
    ogdl_menu($out, $var, $menu, 0);

subcode:: support_subs
    $sub ogdl_menu
	my ($out, $menuvar, $menu, $level)=@_;
	my $pos=0;
	my $menu_item_list=$menu->{_list}
	#print "menu: $menu, list: $menu_item_list\n";
	$foreach $t in @$menu_item_list
	    $if ref($t) eq "HASH"
		my $sublist=$t->{_list}
		$if @$sublist
		    #---- PopUp SubMenu ----
		    my $var=sprintf("hmenu_sub%d", $level+1);
		    func_add_var($var, "HMENU");
		    push @$out, "$var = CreatePopupMenu();";
		    ogdl_menu($out, $var, $t, $level+1);
		    push @$out, "InsertMenu($menuvar, $pos, MF_POPUP|MF_BYPOSITION, (UINT_PTR)$var, \"$t->{_name}\");";
		    push @$out, "DestroyMenu($var);";
		$else
		    #---- MenuItem with Attributes ----
		    my $name=$t->{_name}
		    my $title=$t->{text}
		    $if !defined $title
			$title=$name
		    my $id_name="ID_$name";
		    $resource_id++
		    $defines{$id_name}=$resource_id
		    push @$out, "AppendMenu($menuvar, MF_STRING, $id_name, \"$title\");";

	    $else
		#---- Text MenuItem ----
		$if $t eq "----"
		    push @$out, "AppendMenu($menuvar, MF_SEPARATOR, 0, NULL);";
		$else
		    my $id_name="ID_$t";
		    $id_name=~s/[ &]//g;
		    $resource_id++
		    $defines{$id_name}=$resource_id
		    push @$out, "AppendMenu($menuvar, MF_STRING, $id_name, \"$t\");";
	    $pos++;

# -------- Font ---------------------------------------
subcode: make_font
    my @plist=split /,\s*/, $spec
    $call res_init_attr, font
    $foreach my $p in @plist
	$if $p=~/(\d+)/
	    $attr{lfHeight}=-$1
	$elif $p=~/bold/i
	    $attr{lfWeight}="FW_HEAVY"
	$elif $p=~/italic/i
	    $attr{lfItalic}=1
	$elif $MyDef::def->{resource}->{"font_$p"}
	    my $name=$p
	    $call res_update, "font_$p"
	$else
	    $attr{lfFaceName}="\"$p\""
    func_add_var("lf", "LOGFONT")
    $call res_fill, lf
    
    func_add_var($var, "HFONT");
    $if $misc_vars{hgdi_enable}
	hgdi_pre_assign("HFONT", $var, "0", $out);
    push @$out, "$var = CreateFontIndirect(&lf);";
    $if $misc_vars{hgdi_enable}
	push @$out, "hgdi_add($var);";
    $var_retain_hash{$var}=1;

# -------- ---------------------------------------
subcode: res_update_attr(a)
    $while my ($k, $v)=each %$(a)
	$if $k!~/^_(name|list)/
	    $attr{$k}=$v
# ----	    
subcode: res_init_attr(type)
    my %attr;
    my $default=$MyDef::def->{resource}->{default_$(type)}
    $call res_update_attr, $default

subcode: res_update(tag)
    my $a=$MyDef::def->{resource}->{$(tag)}
    $if $a
	$call res_update_attr, $a

subcode: res_fill(s)
    $while my ($k, $v)=each %attr
	$if $k!~/^_(name|list)/
	    $if $v=~/^"(.*)"/
		push @$out, "strcpy($(s).$k, $v);"
	    $else
		push @$out, "$(s).$k = $v;"
##################################################
subcode: replace_output(name)
    my $tempout=$MyDef::compileutil::out
    $MyDef::compileutil::out=$(name)
    $out=$(name)
    BLOCK
    $MyDef::compileutil::out=$tempout
    $out=$tempout

subcode: push_open_function
    push @$out, "OPEN_FUNC_$fidx"
    push @$out, "SOURCE_INDENT"
    BLOCK
    push @$out, "SOURCE_DEDENT"

subcode: push_indent_block
    push @$out, "INDENT"
    BLOCK
    push @$out, "DEDENT"
