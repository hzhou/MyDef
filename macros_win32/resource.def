
subcode:: package_global
    my @res_h_list;
    my @res_list;

    my $id_menu=0x100
    my $id_accl=0x100
    my $id_ctrl=0x100
    my $id_other=0x100
    my %res_id_hash
    my @res_id_list
    my @res_rc_list

subcode:: preparse_elif
    $elif $l=~/^\$write_(res|res_h)\s+(.*)/
	my $type=$1;
	my @plist=split /,\s*/, $2;
	$if $type eq "res"
	    push @res_list, @plist
	$elif $type eq "res_h"
	    push @res_h_list, @plist
	return 1

subcode:: on_dumpout
    my %res_name_hash
    $(for:restype in res,res_h)
	$if @$(restype)_list
	    $(if:restype=res_h)
		my $h_only=1
	    $(else)
		my $h_only=1
	    $foreach $name in @$(restype)_list
		$if !$res_name_hash{$name}
		    $res_name_hash{$name}=1
		    $call write_res, $name

subcode: write_res(name)
    my $ogdl=MyDef::compileutil::get_ogdl($(name))
    my $level=0
    $if $(name)=~/^menu_/
	$call write_res_menu
    $elif $(name)=~/^IDD_/
	$call write_res_dialog

# -----------------------------------------------
subcode:: preparse_elif
    $elif $l=~/^\$resource_define\s+(.*)/
	my @plist=split /,\s*/, $1
	$foreach $name in @plist
	    $if $name=~/^IDM_/
		$call resource_define, menu, $name
	    $elif $name=~/^IDA_/
		$call resource_define, accl, $name
	    $elif $name=~/^IDC_/
		$call resource_define, ctrl, $name
	    $else
		$call resource_define, other, $name
	return 1

# =========================================================
subcode: resource_define(type, name)
    $if !$res_id_hash{$(name)}
	$res_id_hash{$(name)}=1
	$id_$(type)++
	my $val=sprintf("0x%3x0", $id_$(type))
	push @res_id_list, "#define $(name) $val"

subcode: resource_define_range(type, name)
    $if $(name)=~/(\w+)\s+-\s*(\d+)/
	my $var=$1
	my $n=$2
	$if !$res_id_hash{$var}
	    $res_id_hash{$var}=1
	    push @res_id_list, "#define $var\_COUNT $n"
	    push @res_id_list, "#define $var\_STEP 0x10"
	    $id_$(type)++
	    my $val=sprintf("0x%3x0", $id_$(type))
	    push @res_id_list, "#define $var\_MIN $val"
	    $id_$(type)++
	    my $val=sprintf("0x%3x0", $id_$(type))
	    push @res_id_list, "#define $var\_MAX $val"

# ---- MENU ---------------------------------------------
subcode:: preparse_elif
    $elif $l=~/^\s*\$(Make|Append)Menu\s+(\w+),\s*(\w+)/
	my ($make, $var, $name)=($1, $2, $3)
	# ----
	$if $make eq "Make"
	    func_add_var($var, "HMENU")
	    push @$out, "$var = CreateMenu();"
	my $ogdl=MyDef::compileutil::get_ogdl($name)
	ogdl_menu_append($ogdl, $var, 0)
	return 1;

# --------------------------------
subcode: write_res_menu
    # recursive
    ogdl_menu_res($ogdl, $h_only, $level)

subcode:: support_subs
    $sub ogdl_menu_res($ogdl, $h_only, $level)
	$call @menu_root_res_begin
	&call ogdl_menu_loop, res
	    ogdl_res_menu($item, $h_only, $level+1)
	$call @menu_root_res_end

    $sub ogdl_menu_append($ogdl, $var, $level)
	$call @menu_root_append_begin
	&call ogdl_menu_loop, append
	    ogdl_menu_append($item, $subvar, $level+1);
	$call @menu_root_append_end
		    
subcode: ogdl_menu_loop(action)
    my $ogdl_list=$ogdl->{_list}
    $foreach $item in @ogdl_list
	$if ref($item) eq "HASH"
	    my $name=$item->{_name}
	    my $sub_list=$item->{_list}
	    $if @$sub_list
		$call menu_sublist_$(action)
	    $elif $name =~/^menu/i
		$call menu_item_$(action)_MENU
	    $else
		$call menu_item_$(action)

# ----
subcode: menu_root_res_begin
    $if !$h_only and $level==0
	my $name=$ogdl->{_name}
	$call resource_define, other, $name
	push @res_rc_list, "$name MENU"
	push @res_rc_list, "{"
	$level++
subcode: menu_root_res_end
    $if !$h_only and $level==0
	push @res_rc_list, "}"
subcode: menu_sublist_res
    $if !$h_only
	push @res_rc_list, " "x$level . "POPUP \"$name\";
	push @res_rc_list, " "x$level . "{";
    BLOCK
    $if !$h_only
	push @res_rc_list, " "x$level . "}";

subcode: menu_item_res
    $if !$h_only
	$call resource_define, menu, $name
	my $text=$item->{text}
	push @res_rc_list, " "x$level . "MENUITEM \"$text\" $name

subcode: menu_item_res_MENU
    my $reserve=$item->{reserve}
    $if $reserve
	$call resource_define_range, menu, $reserve

# ---- append
subcode: menu_sublist_append
    my $subvar=sprintf("hmenu_sub%d", $level)
    func_add_var($subvar, "HMENU")
    push @$out, "$subvar = CreatePopupMenu();";
    BLOCK
    my $title=temp_string($item->{_name})
    push @$out, "AppendMenu($var, MF_POPUP, (UINT_PTR)$subvar, $title);";
    push @$out, "DestroyMenu($subvar);";

subcode: menu_item_append_MENU
    $if !$item->{disable}
	my $tmpvar=$item->{var}
	my $title=temp_string($item->{text})
	push @$out, "AppendMenu($var, MF_POPUP, (UINT_PTR)$tmpvar, $title);";

subcode: menu_item_append
    $if !$item->{disable}
	$title=temp_string($item->{text})
	push @$out, "AppendMenu($var, MF_STRING, $name, $title);";

# ---- DIALOG ---------------------------------------------------------
subcode: write_res_dialog
    $if !$h_only
	my $name=$ogdl->{_name}
	$call resource_define, other, $name
	$call ogdl_size, $ogdl, $sizestr
	push @res_rc_list, "$name DIALOG $sizestr"
	$if $ogdl->{style}
	    push @res_rc_list, "STYLE $ogdl->{style}"
	$else
	    push @res_rc_list, "STYLE WS_POPUP | WS_BORDER"
	$if $ogdl->{caption}
	    push @res_rc_list, "CAPTION \"$ogdl->{caption}\""
	$call ogdl_font, $ogdl, $fontstr
	push @res_rc_list, "FONT $fontstr"
	push @res_rc_list, "{"
    $call ogdl_dialog_loop
    $if !$h_only
	push @res_rc_list, "}"

subcode: ogdl_dialog_loop
    my $ogdl_list=$ogdl->{_list}
    $foreach $ogdl in @ogdl_list
	$if ref($ogdl) eq "HASH"
	    my $name=$ogdl->{_name}
	    $if $name=~/^IDB_/
		$call write_res_button
	    $elif $name=~/^IDT_/
		$call write_res_text

# ---- Button -----
subcode: write_res_button
    my $name=$ogdl->{_name}
    $call resource_define, ctrl, $name
    $call ogdl_title, $ogdl, $title
    $call ogdl_size, $ogdl, $sizestr
    push @res_rc_list, " "x$level . "PUSHBUTTON \"$title\", $name, $sizestr"

# ---- Text -----
subcode: write_res_text
    my $name=$ogdl->{_name}
    $call resource_define, ctrl, $name
    $call ogdl_title, $ogdl, $title
    $call ogdl_size, $ogdl, $sizestr
    push @res_rc_list, " "x$level . "CTEXT \"$title\", $name, $sizestr"

# ---- attr routines ---
subcode: ogdl_size(ogdl, sizestr)
    my $sizestr
    $if $(ogdl)->{size}=~/(\d+),\s*(\d+),\s*(\d+),\s*(\d+)/
	my ($x, $y, $w, $h)=($1, $2, $3, $4)
	$(sizestr)="$x, $y, $w, $h"

subcode: ogdl_title(ogdl, title)
    my $(title)=$name
    $if $(ogdl)->{title}
	$(title)=$(ogdl)->{title}
    $elif $(ogdl)->{text}
	$(title)=$(ogdl)->{text}

subcode: ogdl_font(ogdl, fontstr)
    my $(fontstr)="8, \"MS Shell Dlg\""
