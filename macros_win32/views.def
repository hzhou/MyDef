include: macros_util/resource.def

# -------- Window ---------------------------------------
subcode:: package_global
    my %window_hash
    my @window_list
    my %hgdi_hash

subcode:: support_subs
    $sub create_view
        my ($out, $view, $parent)=@_
        # ---- get view attr ----
        my $name=$view->{_name}
        $if !$parent->{hwnd}
            $parent->{hwnd}="hwnd"
            $parent->{child}="hwnd_child"
        my $hwnd=$parent->{child}
        func_add_var($hwnd, "HWND");
        # ---- position, size ----
        my $x=$view->{x}
        my $y=$view->{y}
        my $w=$view->{w}
        my $h=$view->{h}
        my $docked=0
        $if $x=~/-(.*)/
            $x="rect_client.right-$1-$w"
            $docked=1
        $if $y=~/-(.*)/
            $y="rect_client.bottom-$1-$h"
            $docked=1
        $if $w=~/-(.*)/
            $w="rect_client.right-$1-$x"
            $docked=1
        $if $h=~/-(.*)/
            $h="rect_client.bottom-$1-$y"
            $docked=1
        $if $docked and !$parent->{"has_rect_client"}
            func_add_var(rect_client)
            push @$out, "GetClientRect($parent->{hwnd}, &rect_client);"

        # ----
        $if !$view->{wndclass}
            # if there isn't a wndclass, then we need register one
            $view->{wndclass}=$name
            $if !$window_hash{$name}
                $window_hash{$name}=1
                push @window_list, $name

        my ($data)
        $if $window_hash{$name}
            $data="view"
            func_add_var("view", "struct VIEW *")
            declare_struct("view_$name", "class VIEW")
            push @$out, "view = malloc(sizeof(struct view_$name));"
        $else
            $data="NULL"
        push @$out, "$hwnd = CreateWindowEx($view->{style_ex}, \"$view->{wndclass}\", \"$view->{text}\", $view->{style}, $x, $y, $w, $h, $parent->{hwnd}, (HMENU)$view->{id}, cur_instance, $data);"
        $if $window_hash{$name}
            push @$out, "view->hwnd=$hwnd;"

        $if $view->{font}
            $if $view->{font}=~/^(font_\w+)$/
                $hgdi_hash{$1}=1
                push @$out, "SendMessage($hwnd, WM_SETFONT, (WPARAM)$1, 0);"
            $else
                my ($var, $name)=("hfont", $view->{font})
                $call make_font
                push @$out, "SendMessage($hwnd, WM_SETFONT, (WPARAM)hfont, 0);"

# ---- LoadView ----
subcode: load_view_layout
    /*
    $if $view->{menu}
        my ($var, $name)=("hmenu", $view->{menu})
        func_add_var($var, "HMENU")
        push @$out, "$var = CreateMenu();"
        $call load_menu
        ogdl_menu($out, $var, $menu, 0);
        push @$out, "SetMenu(hwnd, hmenu);"
        push @$out, "DestroyMenu(hmenu);"
    */
    # --
    my $list=$view->{_list}
    my $command_hash=$view->{commands}
    my $parent_hash={parent=>"hwnd", child=>"hwnd_child"}
    $foreach my $v in @$list
        create_view($out, $v, $parent_hash)

###### Window Proc Handling
subcode: wndproc_get_view_pointer
    my $struct_type
    $if $name eq "main"
        $struct_type="struct view_$name *"
    $else
        $struct_type="struct view_$name *"
    func_add_var("me", $struct_type)
    push @$out, "if(msg==WM_NCCREATE){"
    &call push_indent_block
        push @$out, "me=($struct_type)((LPCREATESTRUCT)lparam)->lpCreateParams;"
        push @$out, "SetWindowLong(hwnd, GWL_USERDATA, (LONG)me);"
    push @$out, "}"
    push @$out, "else{"
    &call push_indent_block
        push @$out, "me=($struct_type)GetWindowLong(hwnd, GWL_USERDATA);"
    push @$out, "}"
# ------------ Window Proc -----------------    
subcode:: support_subs
    $sub register_window
        my ($name)=@_
        $call fetch_named_resource, view
        $if !$view->{commands}
            $view->{commands}={}
        $call window_proc
        $call window_register

# ---- window proc  ----------------
subcode: window_proc
    my $block=MyDef::compileutil::get_named_block("global_init")
    &call replace_output, $block
        my $fidx=open_function("WndProc_$name", "HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam")
        $cur_function->{ret_type}="LRESULT CALLBACK";
        &call push_open_function
            $call window_proc_core

subcode: window_proc_core
    my $codes=$MyDef::def->{codes}
    $if $view->{data}
        $call wndproc_get_view_pointer
    # ---- process window msg ---------------
    MyDef::compileutil::call_sub("\@pre_WndProc_$name")
    push @$out, "switch(msg){";
    &call push_indent_block
        my %msg_hash;
        $if $view->{messages}
            my @msg_list=split /,\s*/, $view->{messages}
            $foreach $msg in @msg_list
                $call window_proc_on_msg
        $else
            $foreach $k in sort(keys(%$codes))
                $if $k=~/$name\_on\_(WM_\w+)/
                    my $msg=$1
                    $call window_proc_on_msg
        $if !$msg_hash{"WM_COMMAND"}
            $call msg_command
        $if !$msg_hash{"WM_CLOSE"}
            $call msg_close
        $if !$msg_hash{"WM_DESTROY"}
            $call msg_destroy
        $call msg_default

    push @$out, "}";
    push @$out, "return DefWindowProc(hwnd, msg, wparam, lparam);"

subcode: window_proc_on_msg
    $msg_hash{$msg}=1
    $if $msg eq "WM_ALLKEY"
        push @$out, "case WM_KEYDOWN:"
        push @$out, "case WM_KEYUP:"
        push @$out, "case WM_SYSKEYDOWN:"
        push @$out, "case WM_SYSKEYUP:"
    $elif $msg eq "WM_ALLCOMMAND"
        push @$out, "case WM_COMMAND:"
        push @$out, "case WM_SYSCOMMAND:"
    $else
        push @$out, "case $msg:"
    &call push_indent_block
        # push @$out, "printf(\"$name\_on_$msg\\n\");"
        MyDef::compileutil::call_sub("\@$name\_on_$msg")
        push @$out, "break;"

# -- messages --
subcode: msg_default
    push @$out, "default:"
    &call push_indent_block
        MyDef::compileutil::call_sub("\@$name\_on_default")
        push @$out, "break;"
subcode: msg_create
    push @$out, "case WM_CREATE:"
    &call push_indent_block
        $call load_view_layout
        MyDef::compileutil::call_sub("\@$name\_on_create")
        push @$out, "break;"
subcode: msg_destroy
    $if $name eq "main"
        push @$out, "case WM_DESTROY:"
        &call push_indent_block
            MyDef::compileutil::call_sub("\@$name\_on_close")
            push @$out, "PostQuitMessage(0);"
            push @$out, "return 0;"

# --
subcode: msg_close
    $if $view && $view->{type} eq "dialog"
        push @$out, "case WM_CLOSE:"
        $call dialog_close

subcode: dialog_close
    my $codename="$name\_on_Close"
    $if  $codes->{$codename}
        &call push_indent_block
            MyDef::compileutil::call_sub($codename)
            push @$out, "return 0;"
    $else
        push @$out, "    EndDialog(hwnd, 1);"
        push @$out, "    return 0;"

# --
subcode: msg_command
    push @$out, "case WM_COMMAND:"
    &call push_indent_block
        MyDef::compileutil::call_sub("\@$name\_on_Pre_COMMAND")
        push @$out, "switch (LOWORD(wParam)) {"
        &call push_indent_block
            $call dialog_ctrls
        push @$out, "}";
        push @$out, "break;"

subcode: dialog_ctrls
    my $ctrl_list=$view->{_list}
    $foreach $ctrl in @$ctrl_list
        $if ref($ctrl) eq "HASH"
            my $ctrlname=$ctrl->{_name}
            my $codename="$name\_on_$ctrlname"
            $if $codes->{$codename}
                push @$out, "case $ctrlname:"
                &call push_indent_block
                    MyDef::compileutil::call_sub($codename)
                    push @$out, "return 0;"
            $elif $ctrl->{default} =~/close/
                push @$out, "case $ctrlname:"
                $call dialog_close
# --
subcode: msg_paint
    push @$out, "case WM_PAINT:"
    &call push_indent_block
        func_add_var("ps", "PAINTSTRUCT")
        func_add_var("hdc", "HDC")
        func_add_var("cur_x", "int")
        func_add_var("cur_y", "int")
        push @$out, "hdc=BeginPaint(hwnd, &ps);"
        push @$out, "cur_x = 0;"
        push @$out, "cur_y = 0;"
        MyDef::compileutil::call_sub("$name\_on_paint")
        push @$out, "EndPaint(hwnd, &ps);"
        push @$out, "break;"

# ---- register window function ----------------
subcode: window_register
    push @$out, "/* Register Window $name */"
    func_add_var("wc", "WNDCLASSEX")
    push @$out, "memset(&wc, 0, sizeof(wc));"
    push @$out, "wc.hInstance = cur_instance;"
    push @$out, "wc.lpszClassName = \"$name\";"
    push @$out, "wc.lpfnWndProc = WndProc_$name;"
    $call res_init_attr, wnd
    $call res_update, "wnd_$name"
    $call res_fill, wc
    push @$out, "if(!RegisterClassEx(\&wc)) return 0;"

####### Resource Handling #######################
# -------- Font ---------------------------------------
subcode: make_font
    push @$out, "/* make_font $name */"
    $call res_init_attr, font
    $if $name
        my @plist=split /,\s*/, $name
        $foreach my $p in @plist
            $if $p=~/(\d+)/
                $attr{lfHeight}=-$1
            $elif $p=~/bold/i
                $attr{lfWeight}="FW_HEAVY"
            $elif $p=~/italic/i
                $attr{lfItalic}=1
            $elif $p=~/^font_/ and $MyDef::def->{resource}->{"$p"}
                $call res_update, "$p"
            $else
                $attr{lfFaceName}="\"$p\""
    $elif $MyDef::def->{resource}->{$var}
        $call res_update, $var
    func_add_var("lf", "LOGFONT")
    $call res_fill, lf
    
    $if $var=~/(\w+)/ and !get_var_type($1)
        func_add_var($var, "HFONT");
    $if $misc_vars{hgdi_enable}
        hgdi_pre_assign("HFONT", $var, "0", $out);
    push @$out, "$var = CreateFontIndirect(&lf);";
    $if $misc_vars{hgdi_enable}
        push @$out, "hgdi_add($var);";
    $var_retain_hash{$var}=1;
