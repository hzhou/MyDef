
subcode:: support_subs
    $sub get_cur_code
        return ($block_stack[-1]->{code}, $cur_file, $cur_line)

    $sub get_def
        my ($name)=@_;
        $for $i=$#$deflist:-1:-1
            $if defined $deflist->[$i]->{$name}
                return $deflist->[$i]->{$name}
        return undef;

    $sub get_def_attr
        my ($name, $attr)=@_;
        $for $i=$#$deflist:-1:-1
            my $t=$deflist->[$i]->{$name}
            $if $t and $t->{$attr}
                return $t->{$attr}
        return undef;

# --------------------------------
subcode:: package_global        
    $global $out
    $global @output_list
    $global %named_blocks

    $sub init_output
        @output_list=([]);
        set_output($output_list[0])
        %named_blocks=()

    $sub new_output
        my $new_out=[];
        push @output_list, $new_out;
        my $nidx=$#output_list;
        return $nidx;

    $sub fetch_output
        my $n=shift;
        return $output_list[$n];


# --------------------------------
subcode:: support_subs  
    $sub set_named_block($name, $block)
        $named_blocks{$name}=$block

    $sub get_named_block($name)
        $if $name=~/^_(post|pre)(\d*)$/
            my $idx
            $if !$2
                $idx=$block_stack[-1]->{eindex}
            $else
                $idx=$block_stack[-$2]->{eindex}
            $name="block$idx\_$1"
        $elif $name=~/^_init_block$/
            my $page=$deflist->[2]
            $name=$page->{_init_block}

        $if !$named_blocks{$name}
            $named_blocks{$name}=[]

        return $named_blocks{$name}

    $sub trigger_block_post
        #-- reference parse_stack_pop in compile/parse.def --------
        my $cur_idx=$block_stack[-1]->{eindex}
        my $name="block$cur_idx\_post"
        $if $named_blocks{$name}
            my $new_name=$name.'_'
            push @$out, "DUMP_STUB $new_name"
            $named_blocks{$new_name}=$named_blocks{$name}
            undef $named_blocks{$name}

subcode: with_named_block(name)
    my $output=get_named_block($(name))
    my $temp=$out;
    set_output($output)
    BLOCK
    set_output($temp)

subcode: dump_deflist
    $for my $i=0;$i<=$#$deflist;$i++
        print "DUMP DEFLIST $i:\n"
        my $h=$deflist->[$i]
        $foreach $k in keys(%$h)
            print "    $k: $h->{$k}\n"

###########################################################
subcode:: support_subs
    $global @mode_stack=("sub"), $cur_mode

    # MODES
    $sub modepush($mode)
        $cur_mode=$mode
        push @mode_stack, $mode;
        $f_modeswitch->($mode, 1);

    $sub modepop
        pop @mode_stack
        $cur_mode=$mode_stack[-1]
        $f_modeswitch->($cur_mode, 0);

    $sub grabblock($block, $index_ref)
        my @sub;
        my $indent;
        my $lindex=$$index_ref;
        $if $block->[$lindex] ne "SOURCE_INDENT"
            return \@sub;
        $else
            $indent=1;
            $lindex++;
        push @sub, "SOURCE: $cur_file - $cur_line"
        $while $lindex<@$block
            $if $block->[$lindex] eq "SOURCE_DEDENT"
                $indent-- if $indent>0;
                $if $indent==0
                    $lindex++;
                    last;
            $if $block->[$lindex] eq "SOURCE_INDENT" 
                $indent++; 
            push @sub, $block->[$lindex];
            $lindex++;
        $$index_ref=$lindex;
        #foreach my $l(@sub){print "grabblock: [$l]\n";}
        return \@sub;



