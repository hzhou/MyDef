subcode: parse_preproc
    expand_macro(\$preproc)
    # $print "parse_preproc: $preproc [$tail] [$l]"
    my $flag_done
    $call parse_preproc_switch

    $if !$flag_done
        undef $switch_context
        $if $preproc=~/^for:\s*(.*)/
            my $t=$1
            my $subblock=grabblock($block, \$lindex);
            $if $t=~/(\w+)\s+in\s+(.*)/
                # $(for:x in x,y,z)
                my ($vname, $vparam)=($1,$2)
                $call for_in
            $else
                # $(for:x,y,z and 0,1,2)
                my @vlist=split /\s+and\s+/, $t
                $call for_list
        $elsif $preproc=~/^foreach:p/
            my $subblock=grabblock($block, \$lindex);
            $call foreach_p
        $call @preproc_elifs
        $elsif $preproc=~/^allow_recurse:(\d+)/
            my $code=$block_stack[-1]->{code}
            $if $code->{allow_recurse}
                $deflist->[-1]->{recurse}=$code->{recurse}
            $else
                $code->{allow_recurse}=$1
                $deflist->[-1]->{recurse}=0
        $elif $preproc=~/^_init_block$/
            my $idx=$block_stack[-1]->{eindex}
            push @$out, "DUMP_STUB _init_$idx"
            my $page=$deflist->[2]
            $page->{_init_block}="_init_$idx"
        $elsif $preproc=~/^block:\s*(\w+)/
            my $name=$1;
            my $subblock=grabblock($block, \$lindex);
            &call with_named_block, $name
                parseblock({source=>$subblock, name=>"block:$name"})
        $else
            goto NormalParse
    # ---------------------------------------- 
    subcode: for_in
        my @tlist;
        $if $vparam=~/(\d+)\.\.(\d+)/
            $for my $i=$1;$i<=$2;$i++
                push @tlist, $i
        $else
            @tlist=split /,\s*/, $vparam;

        my $i=0
        $foreach $t in @tlist
            #-- new layer of macro context -------------
            my $macro={$vname=>$t, _i=>$i}
            push @$deflist, $macro;
            parseblock({source=>$subblock, name=>"\${for}"})
            pop @$deflist;
            $i++

    # ---------------------------------------- 
    # $(for:x,y,z and 1,2,3 and r,g,b and i,j,k)
    #     $print $2 $3 $4: $1 = $$1
    subcode: for_list
        my $n      # num of alternatives
        my @tlist  # list of replacement list
        $foreach $v in @vlist
            my @t=split /,\s*/, $v
            $if !$n
                $n=@t
            push @tlist, \@t
        my $m = @tlist

        $for $i=0:$n
            my @block = @$subblock
            $foreach $l in @block
                $if $l and $l!~/^SOURCE:/
                    my $j=1
                    $foreach $tlist in @tlist
                        $l=~s/\$$j/$tlist->[$i]/g
                        $j++
            parseblock({source=>\@block, name=>"\${for:list}"})

    # ---------------------------------------- 
    subcode: foreach_p
        my $plist=$deflist->[-1]->{plist}
        $if $plist
            my @plist=MyDef::utils::proper_split($plist)
            my $i=0
            $foreach $p in @plist
                #-- new layer of macro context -------------
                my $macro={"p"=>$p, "i"=>$i}
                push @$deflist, $macro;
                parseblock({source=>$subblock, name=>"\${foreach}"})
                pop @$deflist;
                $i++
        $else
            warn "[$cur_file:$cur_line]\x24(foreach:p) missing \x24(plist)\n"

#---------------------------------------- 
subcode:: parseblock_init
    my $switch_context

subcode: parse_preproc_switch
    $flag_done=1
    $if $preproc=~/^if:\s*(.*)/
        my $subblock=grabblock($block, \$lindex);
        $call parse_preproc_if
    $elif $preproc=~/^els?e?if:\s*(.*)/
        my $subblock=grabblock($block, \$lindex);
        $if $switch_context eq "on"
            $call parse_preproc_if
    $elif $preproc=~/^else/
        my $subblock=grabblock($block, \$lindex);
        $if $switch_context eq "on"
            parseblock({source=>$subblock, name=>"\${else}"})
            undef $switch_context;
    $elif $preproc=~/^ifeach:\s*(.*)/
        my $subblock=grabblock($block, \$lindex);
        my $cond=$1
        my $plist=$deflist->[-1]->{plist}
        undef $switch_context
        my $cond_var="p"
        $if $cond=~/^(\w+)/
            $cond_var=$1
        $if $plist
            my @plist=split /,\s*/, $plist
            $foreach $p in @plist
                my $macro={$cond_var=>$p};
                push @$deflist, $macro;
                $if testcondition($cond)
                    parseblock({source=>$subblock, name=>"\${ifeach:}"})
                    $switch_context="off";
                pop @$deflist;
        $if !$switch_context
            $switch_context="on";
    $else
        $flag_done=0
        undef $switch_context

subcode: parse_preproc_if
    $if testcondition($1)
        parseblock({source=>$subblock, name=>"\${if:}"})
        $switch_context="off";
    $else
        $switch_context="on";
    $if $debug eq "preproc"
        $print parse_preproc_if: ($1) -> $switch_context

#---------------------------------------- 
subcode:: support_subs
    $sub test_op($a, $test)
        $if $debug eq "preproc"
            $print "preproc test_op: $a: $test"
        $if $test=~/^:(\d+)/
            $test=$'
            $a=substr($a, 0, $1);

        $if $test=~/\s*(!?[~=]|<=?|>=?)(.*)/
            my ($op, $b)=($1, $2)
            $if $op eq "="
                if($a eq $b){ return 1;}
            $elsif $op eq "!="
                if($a ne $b){ return 1;}
            $elsif $op eq ">"
                if($a > $b){ return 1;}
            $elsif $op eq "<"
                if($a < $b){ return 1;}
            $elsif $op eq ">="
                if($a >= $b){ return 1;}
            $elsif $op eq "<="
                if($a <= $b){ return 1;}
            $elsif $op eq "~"
                if($a=~/^$b/){ return 1;}
            $elsif $op eq "!~"
                if($a!~/^$b/){ return 1;}
            $else
                return 0
        $elif $test=~/\s*in\s+(.*)/
            return test_in($a, $1)
        $else
            return defined $a

    $sub test_in($a, $test)
        my @tlist=split /,\s*/, $test
        $foreach $t in @tlist
            $if $t=~/(\S)-(\S)/
                $if ord($a)>=ord($1) and ord($a)<=ord($2)
                    return 1
            $elif $a eq $t
                return 1
        return 0

    $sub testcondition($cond)
        $if $debug eq "preproc"
            $print "preproc testcondition: $cond"
        $if !$cond
            return 0;
        $call @testcondition_elifs
        $elif $cond=~/^\s*!(.*)/
            return !testcondition($1)
        $elif $cond=~/ or /
            my @nlist=split / or /, $cond
            $foreach $n in @nlist
                $if testcondition($n)
                    return 1;
            return 0;
        $elif $cond=~/ and /
            my @nlist=split / and /, $cond
            $foreach $n in @nlist
                $if !testcondition($n)
                    return 0
            return 1;
        $elsif $cond=~/^([01])$/
            return $1
        $elsif $cond=~/^hascode:\s*(\w+)/
            my $codelib = get_def_attr("codes", $1)
            $if $codelib
                return 1
        $elsif $cond=~/^(string|number|word):(.*)/
            my $test=$1
            my $t=get_def($2)
            $if $test eq "string" and $t=~/^['"]/
                return 1
            $elif $test eq "number" and $t=~/^\d+/
                return 1
            $elif $test eq "word" and $t=~/^[a-zA-Z_]\w*$/
                return 1
        $elsif $cond=~/^\s*(\w+)(.*)/
            my $t=get_def($1);
            $if !$2
                return defined $t
            $else
                return test_op($t, $2)
        $else
            return 0
        return 0

