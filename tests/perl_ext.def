page: test
    module: perl

    $(if:0)
        $call test_inject_sub
    $(elif:1)
        $call test_grab_block
    $(elif:1)
        $call test_grab_ogdl

subcode: test_inject_sub
    $call inject_sub
    $call P, world

perlcode: inject_sub
    require MyDef::ext
    my @src
    push @src, "\$print Hello \x24(name)!"
    MyDef::ext::inject_sub("P(name)", \@src)

#----------------------------------------------- 
subcode: test_grab_block
    &call grab_block, param1
        Some text
          indented by 2 spaces

        MOre text

perlcode: grab_block
    require MyDef::ext
    $print param: $param
    my $codelist = MyDef::ext::grab_codelist(do_macro=>1)
    $foreach @$codelist
        $print "    [$_]"

#----------------------------------------------- 
subcode: test_grab_ogdl
    &call grab_ogdl
        item 1
        item 2
        item 3
            k1: v1
            k2: v2
            k3: v3
                a: 1
                b: 2

    $call print_ogdl


perlcode: grab_ogdl
    require MyDef::ext
    my $ogdl = MyDef::ext::grab_ogdl(1)
    $MyDef::def->{_ogdl}=$ogdl

perlcode: print_ogdl
    my $ogdl = $MyDef::def->{_ogdl}
    $foreach $t in @$ogdl
        my @stack=([0,undef,$t])
        $while my $_t = pop(@stack)
            my ($indent, $k, $v)=@$_t
            my $sp = "    " x $indent
            $if defined $k
                $print "$sp$k: -"
            $if ref($v) eq "HASH"
                $print [$v->{_}]
                $foreach $k2 in sort {$b cmp $a} keys(%$v)
                    $if $k2 ne "_"
                        push @stack, [$indent+1, $k2, $v->{$k2}]
            $else
                $print [$v]
