include: c/matrix.def

macros:
    float: float

page: test, basic_frame
    subcode: main
	# $call test_a
	$call test_matrix_mult
	# $call test_static
	# $call test_cholesky

subcode: test_a
    $local $(float) a[100]

    $sumcode a[i]=i+1
    $sumcode sum = a[i]

    $print "Sum of 1..100 is $sum"

    $call set_matrix, a, 10, 10
    $call matrix_print, a

subcode: test_matrix_mult
    $local $(float) A[4]={2, 3, 4, 0}
    $local $(float) B[4]={1, 2, 5, -1}
    $call set_matrix, A, 2, 2
    $call set_matrix, B, 2, 2

    $sumcode sum=A[i]*B[i]
    $print "product: $sum"

    $local $(float) C[4]
    $call set_matrix, C, 2, 2

    $sumcode C[i,j]=A[i,k]*B[k,j]
    $call matrix_print, C

macros: 
    skip_pivot: 1

subcode: test_static
    $my matrix A:2,1,1;4,1,0;-2,2,1
    A.$print

    A.$LU
    A.$print
    $print Expect L=2;-1,-3  U=2,1,1;-1,-2;-4

    tf_det=A.$det
    $dump tf_det
    $print Expect determinant = 8

    $local $(float) b[3]={8, 11, 3}
    A.$solve b
    $call vector_print, b
    $print Expect solve = 2,3,1

    A.$inv
    A.$print
    $print Expect inverse = 1/8,1/8,-1/8; -1/2,1/2,1/2; 5/4,-3/4,-1/4

subcode: test_cholesky
    $my $(float) * A
    $local_allocate(5*5) A
    $for i=0:5
	A[i*5+i]=2
	$if i>0
	    A[i*5+i-1]=-1
	    A[(i-1)*5+i]=-1
    A.$print
    $fcall f_matrix_cholesky(A, 5)
    A.$print

subcode: test_cholesky_2
    $my matrix A:4,12,-16;12,37,-43;-16,-43,98
    A.$print
    $fcall f_matrix_cholesky(A, 3)
    A.$print
