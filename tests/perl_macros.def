page: test
    module: perl
    a: a
    b: 1

    $(if:1)
        $call test_for_in_list
    $(elif:1)
        $print [join:(..):sep:list] $(join:($1-1):*:x,y,z)
        $print [join:pat:sep:list] $(join:*:-:a-z)
        $print [nest:n:pat:inner] $(nest:5:sqrt(*):10)
        $print [x10,:pat] $(x10,:pat)
        $print [join:::and list] $(join:$1$2:,:x-z and 1-3)
        $print [join:::mul list] $(join:$1$2:,:x,y mul 1,2,3)
    $(elif:1)
        $call test_eval
    $(elif:0)
        print "page macro a: $(a)\n"
        $(if:word:a)
            $warn macro a  is a word : [$(a)]
        $(if:!word:b)
            $warn macro b  is not a word : [$(b)]
        $call test_inline, example
        $call test_for_list
        $call test_macro_join
        $call test_macro_split
    $(else)
        $call test_named_macros

subcode: test_for_in_list
    $print [for in a-c,1-5] -
    $(for:a in a-c,1-5)
        $print "$(a)-"
    $print

    $print [for in eclusion] -
    $(for:a in 1-3)
        $(set:b=$(join:$1:,:1-3/$(a)))
        $print $(b) - -
    $print

    $print [join rotate] -
    $(for:a in 0-2)
        $(export:t$(a)=$(join:rot$(a):,:1-3))
    $print ($(t0)) ($(t1)) ($(t2))

subcode: test_named_macros
    # DEBUG macro
    $(set:a=current)
    $print test_current: a = $(a)
    $(if:1)
        $(set:a=new value)
    $print test_set_in_if (should change): a = $(a)

    $call subset1
    $print test_named_macros (def,macro,page): $(a1), $(a2), $(a3), $(a4), $(a5), $(a6)
    $call immediate
    $print test_immediate (should expire): a1 = $(a1)
    $call oneup
    $print test_oneup (should overwrite): a1 = $(a1)

    subcode: subset1
        $(setdef:a1=def)
        $(setmacro:a2=macro)
        $(setpage:a3=page)
        $(set0:a4=def)
        $(set1:a5=macro)
        $(set2:a6=page)
    subcode: immediate
        $(set:a1=immediate)
    subcode: oneup
        $(set-1:a1=oneup)

subcode: test_eval
    $(set:t=lowercase)
    $(eval:t2=ucfirst("$(t)"))
    $print test_eval: t=$(t) ucfirst("\x24(t)") -> $(t2)

    $(set:t=1)
    $(eval:t3=t+1)
    $print test_eval: t=$(t), t+1 -> $(t3)

subcode: test_inline(t)
    $(set:inline=test_inline(\"$1\"))
    $print "test_inline: $(t) -> $(inline:$(t))"

subcode: test_for_list
    $print "\nfor list:\n"
    $(for:i, j, k and x, y, z and 1, 2, 3)
        $print "   $2_$1 -> $3"

subcode: test_macro_join
    $(set:cond) join, ' or ', 'N!=*', 2, 4, 8, 16
    $print test_macro_join: $(cond)

subcode: test_macro_split
    $(set:s=a-b-c)
    $(split:-:s)
    $print split $(s): $(p_1) - $(p_2) - $(p_3)

    $(set:s=192.168.2.8)
    $(split:\.:s)
    $print split $(s): $(p_1) - $(p_2) - $(p_3) - $(p_4)
