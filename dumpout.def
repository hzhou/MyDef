include: macros_util/debug.def

page: dumpout
    type: pm
    output_dir: lib/MyDef
    package: MyDef::dumpout
    subcode: main
	$call dump_main

subcode: dump_main
    use MyDef::compileutil;

    ################################
    # Function list
    #   maintain a function list so we can use OPEN_FUNC block structure
    my @func_list;
    my $func_index=-1;

    $sub init_funclist
	@func_list=();
	$func_index=-1;

    $sub add_function($func)
	$func_index++;
	$func_list[$func_index]=$func;
	return $func_index;

    $sub get_function($fidx)
	return $func_list[$fidx]

    $sub get_func_list
	return \@func_list;

    $sub get_func_index
	return $func_index;

    $sub get_cur_func
	return $func_list[$func_index];

    ################################
    $sub dumpout
	my $dump=shift;
	my $f=$dump->{f};
	my $out=$dump->{out};
	my $custom=$dump->{custom};
	$if !$out
	    die "missing \$out\n";
	$call dumpout
    # ---------------

    1;

subcode: dumpout
    my @source_stack;

    my $indentation=0;
    my @openblock;
    my @closeblock;
    my @preblock;
    my @postblock;
    my $blockstack=0;

    $while 1
	my $l;
	$if @$out
	    $l=shift @$out;
	$else
	    $out=pop @source_stack;
	    $if !$out
		last;
	    $else
		next;
	$if $custom and $custom->($f, \$l)
	    # custom dump -- used in output_php.def
	$elif $l =~/^INCLUDE_BLOCK (\S+)/
	    push @source_stack, $out
	    $out=$dump->{$1}
	$elif $l =~ /^DUMP_STUB\s+(\S+)/
	    my $source=$MyDef::compileutil::named_blocks{$1};
	    # print "DUMP_STUB $1 : $source\n"
	    $if $source
		push @source_stack, $out;
		$out=$source;
	$elif $l=~/^\s*(INDENT|DEDENT)\b(.*)/
	    $if $1 eq "INDENT"
		$indentation++;
	    $elif $1 eq "DEDENT"
		$indentation-- if $indentation;
	    $l=$2;
	    $if $l=~/^\s*;?$/
		next;
	    $else
		unshift @$out, $l;
		next;
	$elif $l=~/^\s*NEW_BLOCK/
	    push @openblock, [];
	    push @preblock, [];
	    push @postblock, [];
	    push @closeblock, [];
	    $blockstack=1;
	$elif $l=~/^\s*(PRE|POST|OPEN|CLOSE)_BLOCK\s+(.*)/
	    my $t;
	    $if $1 eq "OPEN"
		$t=$openblock[-1];
	    $elif $1 eq "CLOSE"
		$t=$closeblock[-1];
	    $elif $1 eq "PRE"
		$t=$preblock[-1];
	    $elif $1 eq "POST"
		$t=$postblock[-1];
	    $if $t
		push @$t, $2;
	    $blockstack=1;
	$elif $l=~/^\s*SOURCE_INDENT/
	    $if $blockstack==0
		push @openblock, [];
		push @closeblock, [];
		push @preblock, [];
		push @postblock, [];
	    push @source_stack, $out;
	    push @source_stack, pop(@preblock);
	    $out=pop(@openblock);
	    push @$out, "INDENT";
	$elif $l=~/^\s*SOURCE_DEDENT/
	    push @source_stack, $out;
	    push @source_stack, pop(@closeblock);
	    $out=pop(@postblock);
	    push @$out, "DEDENT";
	$elif $l=~/^\s*BLOCK_(\d+)/
	    push @source_stack, $out;
	    $out=MyDef::compileutil::fetch_output($1);
	$elif $l=~/^\s*OPEN_FUNC_(\d+)/
	    my $func=$func_list[$1];
	    push @openblock, $func->{openblock};
	    push @closeblock, $func->{closeblock};
	    push @preblock, $func->{preblock};
	    push @postblock, $func->{postblock};
	    $blockstack=1;
	#$elif $l=~/^SCOPE:/
	$elif $l=~/^SUBBLOCK (BEGIN|END)/
	    # messages from compileutil.pm
	$else
	    $call print_line

	$if $blockstack==1
	    $blockstack=2;
	$else
	    $blockstack=0;

subcode: print_line
    $if $l=~/^\s*$/
	push @$f, "\n"
    $elif $l=~/^\s*NEWLINE\b/
	push @$f, "\n"
    $else
	push @$f, "    "x$indentation;
	push @$f, $l
	$if $l!~ /\n$/
	    push @$f, "\n";

