include: output.def
include: macros_c/parsing.def
include: macros_c/structure.def
include: macros_c/functions.def
include: macros_c/variables.def
# include: macros_c/hash_and_list.def
include: macros_c/types.def
include: macros_c/dump.def
include: macros_c/dump_h.def

include: macros_c/list_functions.def

include: macros_output/case.def

subcode:: package_globals
    $global %misc_vars;
    our $except;

subcode:: support_subs
    $call c_support_subs

page: output_c, output_main
    type: pm
    output_dir: lib/MyDef
    ext: c
    package: MyDef::output_c

    subcode: init_page
	$if $MyDef::def->{"macros"}->{"use_double"} or $page->{"use_double"}
	    $type_name{f}="double";
	    $type_prefix{f}="double";
	$call @c_init

    subcode: parsecode
	$(set:parse_condition=1)
	$call parsecode_case_support, if, else if, c_style
	$call parsecode_common

    subcode: parsecode_template
	$if $a=~/(\s*)\/\*\s*\$call\s*(.*)\s*\*\//
	    my ($spaces, $call_line)=($1, $2)
	    my $len=length($spaces)
	    my $n=int($len/4)
	    $if $len % 4
		$n++
	    $for $i=0:$n
		push @$out, "INDENT"
	    MyDef::compileutil::call_sub($call_line)
	    $for $i=0:$n
		push @$out, "DEDENT"
	    next
	$elif $a=~/DUMP_STUB\s+(\w+)/
	    push @$out, "DUMP_STUB $1"
	    $page->{"has_stub_$1"}=1
	    next

    subcode: case_flag_set
	$global $case_flag="b_flag_case"
	global_add_var($case_flag)
	push @$out, "b_flag_case=1;"

    subcode: case_flag_reset
	push @$out, "b_flag_case=0;"

    subcode: dumpout
	# ----  Main Function -------------------
	my $mainfunc=$functions{"main"};
	$if $mainfunc
	    $mainfunc->{skip_declare}=1;
	    $mainfunc->{ret_type}="int";
	    $mainfunc->{param_list}=["int argc", "char** argv"];
	    unshift @{$mainfunc->{init}}, "DUMP_STUB main_init"
	    push @{$mainfunc->{finish}}, "DUMP_STUB main_exit"
	    $if !$mainfunc->{return}
		$mainfunc->{return}="return 0;"

	# ---- process_function ------------------------
	$foreach $func in @function_list
	    $if !$func->{processed}
		process_function_std($func)

	$call process_extern_binary
	$call process_link_objects
	$call dump_Makefile

	# ---- Header stuff --------------------------
	$if !$page->{has_stub_global_init}
	    unshift @$out, "\n/**** END GLOBAL INIT ****/\n"
	    unshift @$out, "DUMP_STUB global_init"

	$if $page->{autoload} eq "h"
	    $includes{"\"autoload.h\""}=1

	$call c_dump_init

    subcode: process_link_objects
	my @objlist
	my @liblist
	$foreach $i in keys %objects
	    $if $i=~/^lib(.*)/
		push @liblist, "-l$1"
	    $elif $i=~/(.*\.o)/
		push @objlist, "$i"
	my $lib_list=join(" ", @liblist)
	my $obj_list=join(" ", @objlist)

    subcode: dump_Makefile
	$if $mainfunc
	    my $ofile=$page->{outdir}."/Makefile"
	    $if !-f $ofile or $page->{makefile}
		print "  ---> $ofile\n"
		my $pagename=$page->{pagename}
		open Subfile, ">$ofile" or die "Can't write $ofile\n"
		$call set_make_macro, CC, gcc
		$call set_make_macro, CFLAGS, -
		$call set_make_macro, INC, -
		$call set_make_macro, LIB, -
		$if $page->{makefile} eq "debug"
		    print Subfile "CFLAGS+= -g"
		print Subfile "\n"
		print Subfile "$pagename: $pagename.o $obj_list\n";
		print Subfile "\t\$\(CC) \$\(LIB) $lib_list -o $pagename \$^\n"
		print Subfile "\n"
		print Subfile "%.o: %.c\n"
		print Subfile "\t\$\(CC) -c \$\(CFLAGS) \$\(INC) -o \$@ \$<\n"
		close Subfile

subcode: set_make_macro(name, default)
    $if $page->{$(name)}
	print Subfile "$(name)=$page->{$(name)}\n"
    $(if:default!=-)
	$else
	    print Subfile "$(name)=$(default)\n"

