include: output.def
include: macros_c/cfunctions.def

page: output_c, output_main
    type: pm
    output_dir: lib/MyDef
    ext: c
    init_mode: sub
    subcode: package_subs
	$call c_main
    subcode: init_page
	$call c_init
    subcode: parsecode
	$call check_text_includes
	$call c_parsecode
    subcode: dumpout
	# ----  Main Function -------------------
	my $mainfunc=$functions{"main"};
	$if $mainfunc
	    $mainfunc->{skip_declare}=1;
	    $mainfunc->{ret_type}="int";
	    $mainfunc->{param_list}=["int argc", "char** argv"];
	    unshift @{$mainfunc->{init}}, "DUMP_STUB main_init"
	    push @{$mainfunc->{finish}}, "DUMP_STUB main_exit", "return 0;"

	# ---- process_function ------------------------
	my $funclist=MyDef::dumpout::get_func_list()
	$foreach $func in @$funclist
	    $if !$func->{processed}
		$call process_function_std

	$call process_extern_binary
	$call dump_Makefile

	# ---- Header stuff --------------------------
	unshift @$out, "\n/**** END GLOBAL INIT ****/\n"
	unshift @$out, "DUMP_STUB global_init"

	$if $page->{autoload} eq "h"
	    unshift @$out, "#include \"autoload.h\""

	$call c_dump_init

    subcode: dump_Makefile
	$if $mainfunc
	    my $ofile=$page->{outdir}."/Makefile"
	    $if !-f $ofile or $page->{makefile}
		print "  ---> $ofile\n"
		my @objlist
		my @liblist
		$foreach $i in keys %objects
		    $if $i=~/^lib(.*)/
			push @liblist, "-l$1"
		    $elif $i=~/(.*\.o)/
			push @objlist, "$i"
		my $pagename=$page->{pagename}
		my $ext=$page->{pageext}
		open Subfile, ">$ofile" or die "Can't write $ofile\n"
		$call set_make_macro, CC, gcc
		$call set_make_macro, CFLAGS, -
		$call set_make_macro, INC, -
		$call set_make_macro, LIB, -
		$if $page->{makefile} eq "debug"
		    print Subfile "CFLAGS+= -g"
		print Subfile "\n"
		print Subfile "$pagename: $pagename.o ".join(" ", @objlist)."\n";
		print Subfile "\t\$\(CC) \$\(LIB) ".join(" ",@liblist)." -o $pagename \$^\n"
		print Subfile "\n"
		print Subfile "%.o: %.c\n"
		print Subfile "\t\$\(CC) -c \$\(CFLAGS) \$\(INC) -o \$@ \$<\n"
		close Subfile

subcode: set_make_macro(name, default)
    $if $page->{$(name)}
	print Subfile "$(name)=$page->{$(name)}\n"
    $(if:default!=-)
	$else
	    print Subfile "$(name)=$(default)\n"

