include: output.def
include: macros_c/parsing.def
include: macros_c/structure.def
include: macros_c/functions.def
include: macros_c/variables.def

include: macros_c/types.def
include: macros_c/dump.def

include: macros_c/list_functions.def

include: macros_output/case.def

subcode:: package_globals
    $global %misc_vars;
    our $except;

subcode:: support_subs
    $call c_support_subs

page: output_c, output_main
    type: pm
    output_dir: lib/MyDef
    ext: c
    package: MyDef::output_c

    subcode: init_page
        $call @c_init
        $call check_default_data_size
        $if $page->{"use_libmydef"}
            $call load_autodecl, c/libmydef.inc
        $if $page->{autodecl}
            my @tlist=split /,\s*/, $page->{autodecl}
            $foreach $f in @tlist
                $call load_autodecl, $f
        $call @autolist_functions

        # -------------
        subcode: check_default_data_size
            $if $MyDef::def->{"macros"}->{"use_double"} or $page->{"use_double"}
                $type_name{f}="double";
                $type_prefix{f}="double";

            $if $MyDef::def->{"macros"}->{"use_int64"} or $page->{"use_int64"}
                $(for:i in i,j,k,l)
                    $type_name{$(i)}="int64_t";
                $type_prefix{i}="int64_t";
                $type_prefix{n}="int64_t";
                $type_prefix{u}="uint64_t";

    subcode: parsecode
        $(set:parse_condition=1)
        $call parsecode_case_support, if, else if, c_style

        $call parsecode_common

    subcode: parsecode_template
        $if $a=~/(.*)\$call\s*(.*)\s*$/
            my ($spaces, $call_line)=($1, $2)
            my $len=length($spaces)
            my $n=int($len/4)
            $if $len % 4
                $n++
            $for $i=0:$n
                push @$out, "INDENT"
            MyDef::compileutil::call_sub($call_line)
            $for $i=0:$n
                push @$out, "DEDENT"
            next
        $elif $a=~/DUMP_STUB\s+(\w+)/
            push @$out, "DUMP_STUB $1"
            $page->{"has_stub_$1"}=1
            next

    subcode: case_flag_set
        $global $case_flag="b_flag_case"
        global_add_var($case_flag)
        push @$out, "b_flag_case=1;"

    subcode: case_flag_reset
        push @$out, "b_flag_case=0;"

    subcode: dumpout
        # ----  Main Function -------------------
        my $mainfunc=$functions{"main"};
        $if $mainfunc and !$mainfunc->{processed}
            $global $has_main
            $has_main=1
            $mainfunc->{skip_declare}=1;
            $mainfunc->{ret_type}="int";
            $mainfunc->{param_list}=["int argc", "char** argv"];
            unshift @{$mainfunc->{init}}, "DUMP_STUB main_init"
            push @{$mainfunc->{finish}}, "DUMP_STUB main_exit"
            $if !$mainfunc->{return}
                $mainfunc->{return}="return 0;"

        # ---- process_function ------------------------
        $foreach $func in @function_list
            $if !$func->{processed}
                process_function_std($func)
                $if !$has_main
                    my $name=$func->{name}
                    $if $function_autolist{$name} eq "static"
                        $func->{declare}="static ".$func->{declare}

        $call process_extern_binary
        $call process_link_objects
        # $call dump_Makefile

        # ---- Header stuff --------------------------
        $if !$page->{has_stub_global_init}
            # unshift @$out, "\n/**** END GLOBAL INIT ****/\n"
            unshift @$out, "DUMP_STUB global_init"

        $call c_dump_init

    subcode: process_link_objects
        my @objlist
        my @liblist
        $foreach $i in keys %objects
            $if $i=~/^lib(.*)/
                push @liblist, "-l$1"
            $elif $i=~/(.*\.o)/
                push @objlist, "$i"
        my ($lib_list, $obj_list)
        $if @liblist
            $lib_list=join(" ", @liblist)
            $page->{lib_list}=$lib_list
        $if @objlist
            $obj_list=join(" ", @objlist)

