# $sumcode sum = A[i]
subcode: parsecode_sum_support(style)
    $(set:mode=full)
    &call parsecode_sum_frame
        $call _get_idx, left
        $if $right
            $call _get_idx, right

    # callback from _get_idx
    subcode: get_var_hash_dim
        my $var=find_var($v)

        my $i=0
        $foreach $idx in @idxlist
            $i++
            $call get_idx_dim
            $call set_idx_dim
        # ----------------
        subcode: get_idx_dim
            #-- get idx dimension based on var
            my $dim
            $if $var->{"dim$i"}
                $dim=$var->{"dim$i"}
            $elif $var->{"dimension"} and $i==1
                $dim=$var->{"dimension"}
            $else
                $call warn, sumcode: var $v missing dimension $i
        # ----------------
        subcode: set_idx_dim
            #-- set dim_hash ----
            $if !$h->{"$idx-dim"}
                push @$(left)_idx, $idx
                $call set_idx, $dim
            $else
                $if $h->{"$idx-dim"} ne $dim
                    my $old_dim=$h->{"$idx-dim"}
                    $print "sumcode dimesnion mismatch: $old_dim != $dim"

# $sumcode(100) sum = A[i]
subcode: parsecode_sum_simple(style)
    $(set:mode=simple)
    &call parsecode_sum_frame
        $call parse_dimstr
        $call _get_idx, left
        $if $right
            $call _get_idx, right

    subcode: parse_dimstr
        my @idxlist=('i','j','k','l')
        my @dimlist=MyDef::utils::proper_split($dimstr)
        $foreach $dim in @dimlist
            my $idx=shift @idxlist
            $call set_idx, $dim

            $if $left=~/\b$idx\b/
                push @left_idx, $idx
            $else
                push @right_idx, $idx

#----------------------------------------------- 
subcode: parsecode_sum_frame
    $if $debug
        $print parsecode_sum: [$param]
    my $h={}
    my (%k_hash, @k_list)
    my %var_hash
    my (@left_idx, @right_idx)

    $(if:style=c)
        # may need declare sum var and k idx
        $h->{style}="c"
        $(set:my=\$my int)
    $(else)
        $h->{style}="perl"
        $(set:my=my)
    my ($left, $right)
    $call get_left_right
    BLOCK
    $call parsecode_sum_common
    my $codelist=sumcode_generate($h)
    MyDef::compileutil::parseblock({source=>$codelist, name=>"sumcode"})
    return

    subcode: set_idx(dim)
        $h->{"$idx-dim"}=$(dim)
        # sumcode_idx defined in, e.g. output_perl
        $h->{"$idx-var"}="$(sumcode_idx:$idx)"

    subcode: get_left_right
        $if $param=~/(.*?)\s*(?<![\+\-\*\/%&\|><=])=(?!=)\s*(.*)/
            ($left, $right)=($1, $2)
        $else
            $left=$param

    subcode: _get_idx(left)
        my @segs=split /(\w+\[[ijkl,]*?\])/, $$(left)
        $foreach $s in @segs
            $if $s=~/^(\w+)\[([ijkl,]*?)\]$/
                $if $var_hash{$s}
                    $s=$var_hash{$s}
                $else
                    my $t
                    $call translate_idx
                    $(if:mode=full)
                        $call get_var_hash_dim
                    $var_hash{$s}=$t
                    $s=$t
        $$(left)=join '', @segs
        $$(left)=~s/\b([ijkl])\b/$(sumcode_idx:$1)/g
        subcode: translate_idx
            my ($v, $idx_str)=($1, $2)
            my @idxlist=split /,/, $idx_str
            $if @idxlist==1
                my $idx=$idx_str
                $t="$v\[$(sumcode_idx:$idx)\]"
            $else
                # mult-dim index is the sole source for half of the complexity
                my $k=join('', @idxlist)
                $if !$k_hash{$k}
                    $k_hash{$k}=1
                    push @k_list, $k
                $t="$v\[$(sumcode_idx:$k)\]"

    subcode: parsecode_sum_common
        $(for:left in left, right)
            $h->{$(left)}=$$(left)
            $h->{$(left)_idx}=\@$(left)_idx
        $h->{klist} = \@k_list
        $foreach $k in @k_list
            $h->{"$k-init"}="$(my) $(sumcode_idx:$k)"
            $h->{"$k-var"}="$(sumcode_idx:$k)"
#---------------------------------------- 
#- '$' is not an operator, so if it appears, let's assume it is 
#-     part of variable name
#---------------------------------------- 
#----------------------------------------------- 
#- ToDo: Factor a[i,j]=b[i,k]*c[k,l]*d[l,j]
#-       maybe: a[i,j]=b[i,k]*{c[k,l]*d[l,j]}
fncode: sumcode_generate($h)
    $(for:left, right, left_idx, right_idx, klist)
        my $$1 = $h->{$1}
    $call sumcode_process_k

    my @code
    my %loop_i_hash
    my %loop_k_hash
    $call sumcode_init_each_k
    $if $debug
        print "left indexs: ", join(", ", @$left_idx), "\n"
        print "right indexs: ", join(", ", @$right_idx), "\n"

    &call sumcode_loop, left
        $if @$right_idx
            push @code, "$left = 0"
            &call sumcode_loop, right
                push @code, "$left += $right"
        $elif $right
            push @code, "$left = $right"
        $else
            push @code, $left
    return \@code

subcode: sumcode_loop(left)
    $(allow_recurse:2)
    $foreach $i in @$$(left)_idx
        $loop_i_hash{$i}=1
        my $dim=$h->{"$i-dim"}
        my $var=$h->{"$i-var"}
        push @code, "\$for $var=0:$dim"
        push @code, "SOURCE_INDENT"
        $call sumcode_set_each_k
    BLOCK
    $foreach $i in reverse @$$(left)_idx
        $call sumcode_inc_each_k
        push @code, "SOURCE_DEDENT"

#---------------------------------------- 
subcode: sumcode_process_k
    my %k_calc_hash
    my %k_inc_hash
    #-- prepare above three hashes ----
    my @allidx=(@$left_idx, @$right_idx)
    # print "left_idx: @$left_idx, right_idx: @$right_idx\n"
    EACH_K:
    $foreach $k in @$klist
        $call find_inner_idx
        $(set:i=$allidx[$i])
        $if index(substr($k, $pos+1), $(i))>=0
            #--- repeated index such as k_ii
            # $print k_calc_hash $k - $(i): repeated index
            $k_calc_hash{"$k-$(i)"}=1
            next EACH_K
        $else
            $k_inc_hash{"$k-$(i)"}=1

            $pos--
            $i--
            $while $pos>=0 and $i>=0 and substr($k, $pos, 1) eq $(i)
                $if index(substr($k, $pos+1), $(i))>=0 or ($pos>0 && index(substr($k, 0, $pos), $(i))>=0)
                    # $print k_calc_hash $k - $pos - $(i): repeated index
                    $k_calc_hash{"$k-$(i)"}=1
                    next EACH_K
                $pos--
                $i--

            $if $i>=0
                # $print k_calc_hash $k - $i - $(i)
                $k_calc_hash{"$k-$(i)"}=1

subcode: find_inner_idx
    my $pos
    my $i=$#allidx
    $while $i>=0
        $pos=index($k, $allidx[$i])
        $if $pos>=0
            break
        $i--
#----------------------------------------------- 
#---- inc k rather than recalc ----
subcode: sumcode_init_each_k
    $if $h->{style} eq "perl"
        my @t
        $foreach $k in @$klist
            push @t, $h->{"$k-var"}
        push @code, "my (".join(',', @t).")"
    $elif $h->{style} eq "c"
        my @t
        $foreach $k in @$klist
            push @t, "int ".$h->{"$k-var"}
        push @code, "\$my ".join(',', @t)

subcode: sumcode_set_each_k
    $foreach $k in @$klist
        my $kvar=$h->{"$k-var"}
        $if $k_calc_hash{"$k-$i"}
            # $print "    k_calc_hash: $k - $i"
            $call sumcode_calc_k

subcode: sumcode_inc_each_k
    $foreach $k in @$klist
        my $kvar=$h->{"$k-var"}
        $if $k_inc_hash{"$k-$i"}
            $call sumcode_inc_k

#---------------------------------------- 
subcode: sumcode_inc_k
    $if substr($k, -1, 1) eq $i
        push @code, "$kvar++"
    $else
        my @tlist
        my $pos=index($k, $i)
        $pos++
        $while $pos<length($k); $pos++
            my $j=substr($k, $pos, 1)
            my $dim=$h->{"$j-dim"}
            push @tlist, $dim
        push @code, "$kvar += ".join("*", @tlist)

subcode: sumcode_calc_k
    #- k_ij = i*n+j
    my $t
    $for $j=0:length($k)-1
        my $idx=substr($k, $j, 1)
        $if $loop_i_hash{$idx}
            my $dim=$h->{substr($k, $j+1, 1)."-dim"}
            my $var=$h->{"$idx-var"}
            $if !$t
                $t = "$var*$dim"
            $else
                $t = "($t+$var)*$dim"
    my $idx=substr($k, -1, 1)
    $if $loop_i_hash{$idx}
        my $var=$h->{"$idx-var"}
        $if !$t
            $t = $var
        $else
            $t.="+$var"

    $if !$t
        $t = "0"
    push @code, "$kvar = $t"

