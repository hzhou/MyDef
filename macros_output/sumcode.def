# $sumcode sum = A[i]
subcode: parsecode_sum_support(style)
    $(set:mode=full)
    &call parsecode_sum_frame
        $call _get_idx, left
        $if $right
            $call _get_idx, right

    # callback from _get_idx
    subcode: get_var_hash_dim
        my $var=find_var($v)

        my $i=0
        $foreach $idx in @idxlist
            $i++
            $call get_idx_dim
            $call set_idx_dim
        # ----------------
        subcode: get_idx_dim
            #-- get idx dimension based on var
            my $dim
            $if $var->{"dim$i"}
                $dim=$var->{"dim$i"}
            $elif $var->{"dimension"} and $i==1
                $dim=$var->{"dimension"}
            $else
                $call warn, sumcode: var $v missing dimension $i
        # ----------------
        subcode: set_idx_dim
            #-- set dim_hash ----
            $if !$h->{"$idx-dim"}
                push @$(left)_idx, $idx
                $call set_idx, $dim
            $else
                $if $h->{"$idx-dim"} ne $dim
                    my $old_dim=$h->{"$idx-dim"}
                    $print "sumcode dimesnion mismatch: $old_dim != $dim"

# $sumcode(100) sum = A[i]
subcode: parsecode_sum_simple(style)
    $(set:mode=simple)
    &call parsecode_sum_frame
        $call parse_dimstr
        $call _get_idx, left
        $if $right
            $call _get_idx, right

    subcode: parse_dimstr
        my @idxlist=('i','j','k','l')
        my @dimlist=MyDef::utils::proper_split($dimstr)
        $foreach $dim in @dimlist
            my $idx=shift @idxlist
            $call set_idx, $dim

            $if $left=~/\b$idx\b/
                push @left_idx, $idx
            $else
                push @right_idx, $idx

#----------------------------------------------- 
subcode: parsecode_sum_frame
    $if $debug
        $print parsecode_sum: [$param]
    my $h={}
    my (%k_hash, @k_list)
    my %var_hash
    my (@left_idx, @right_idx)

    $(if:style=c)
        # may need declare sum var and k idx
        $h->{style}="c"
        $(set:my=\$my int)
    $(else)
        $h->{style}="perl"
        $(set:my=my)
    my ($left, $right)
    $call get_left_right
    BLOCK
    $call parsecode_sum_common
    my $codelist=sumcode_generate($h)
    MyDef::compileutil::parseblock({source=>$codelist, name=>"sumcode"})
    return

    subcode: set_idx(dim)
        # $print set_idx $idx dim $(dim)
        $h->{"$idx-dim"}=$(dim)
        # sumcode_idx defined in, e.g. output_perl
        $h->{"$idx-var"}="$(sumcode_idx:$idx)"

    subcode: get_left_right
        $if $param=~/(.*?)\s*(?<![\+\-\*\/%&\|><=])=(?!=)\s*(.*)/
            ($left, $right)=($1, $2)
        $else
            $left=$param

    subcode: _get_idx(left)
        my @segs=split /(\w+\[[ijkl,]*?\])/, $$(left)
        $foreach $s in @segs
            $if $s=~/^(\w+)\[([ijkl,]*?)\]$/
                $if $var_hash{$s}
                    $s=$var_hash{$s}
                $else
                    my ($v, $idx_str)=($1, $2)
                    my @idxlist=split /,/, $idx_str
                    $(if:mode=full)
                        $call get_var_hash_dim
                    my $t
                    $call translate_idx
                    $var_hash{$s}=$t
                    $s=$t
        $$(left)=join '', @segs
        $$(left)=~s/\b([ijkl])\b/$(sumcode_idx:$1)/g

        subcode: translate_idx
            $if @idxlist==1
                my $idx=$idx_str
                $t="$v\[$(sumcode_idx:$idx)\]"
            $else
                my $s
                $foreach $idx in @idxlist
                    $if !$s
                        $s="$(sumcode_idx:$idx)"
                    $else
                        my $dim=$h->{"$idx-dim"}
                        $if $s=~/\+/
                            $s="($s)"
                        $s= "$s*$dim+$(sumcode_idx:$idx)"
                $t="$v\[$s\]"

    subcode: parsecode_sum_common
        $(for:left in left, right)
            $h->{$(left)}=$$(left)
            $h->{$(left)_idx}=\@$(left)_idx
#---------------------------------------- 
#- '$' is not an operator, so if it appears, let's assume it is 
#-     part of variable name
#---------------------------------------- 
#- ToDo: Factor a[i,j]=b[i,k]*c[k,l]*d[l,j]
#-       maybe: a[i,j]=b[i,k]*{c[k,l]*d[l,j]}
#----------------------------------------------- 
#- Used to manual k index increment
#-       now simplified since c optimizing compiler appears to do good job
#- ref: http://nadeausoftware.com/articles/2012/06/c_c_tip_how_loop_through_multi_dimensional_arrays_quickly
fncode: sumcode_generate($h)
    $(for:left, right, left_idx, right_idx, klist)
        my $$1 = $h->{$1}
    # $call sumcode_process_k

    my @code
    my %loop_i_hash
    # $call sumcode_init_each_k
    $if $debug
        print "left indexs: ", join(", ", @$left_idx), "\n"
        print "right indexs: ", join(", ", @$right_idx), "\n"

    &call sumcode_loop, left
        $if @$right_idx
            push @code, "$left = 0"
            &call sumcode_loop, right
                push @code, "$left += $right"
        $elif defined $right
            push @code, "$left = $right"
        $else
            push @code, $left
    return \@code

subcode: sumcode_loop(left)
    $(allow_recurse:2)
    $foreach $i in @$$(left)_idx
        $loop_i_hash{$i}=1
        my $dim=$h->{"$i-dim"}
        my $var=$h->{"$i-var"}
        push @code, "\$for $var=0:$dim"
        push @code, "SOURCE_INDENT"
        # $call sumcode_set_each_k
    BLOCK
    $foreach $i in reverse @$$(left)_idx
        # $call sumcode_inc_each_k
        push @code, "SOURCE_DEDENT"

