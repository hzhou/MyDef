subcode: parsecode_for_support(style)
    $if $param=~/(.*);(.*);(.*)/
        &call return_newblock, for
            $(set:type=asis)
            $call for_$(style)
    # -----------------------------
    my $var
    $if $param=~/^(.+?)\s*=\s*(.*)/
        $var=$1
        $param=$2
    # ------------
    my ($i0, $i1, $step)
    $if $param=~/^(.+?)\s+to\s+(.+?)/
        my $to
        ($i0, $to, $step) = ($1, $2, 1)
        $if $to=~/(.+?)\s+step\s+(.+)/
            ($to, $step)=($1, $2)
        $i1="<=$to"
    $elif $param=~/^(.+?)\s+downto\s+(.+?)/
        my $to
        ($i0, $to, $step) = ($1, $2, 1)
        $if $to=~/(.+?)\s+step\s+(.+)/
            ($to, $step)=($1, $2)
        $i1=">=$to"
        $if $step!~/^-/
            $step="-$step"
    $else
        my @tlist=split /:/, $param
        $call parsecode_for_convention
    # ------------
    $if defined $i0
        $call @for_i0_i1_step
        &call return_newblock, for
            $(set:type=i0_i1_step)
            $call for_$(style)

subcode:@ for_i0_i1_step
    $call warn, "Supply subcode: for_i0_i1_step!"

subcode: for_i0_i1_step_default(loop_var)
    $if $step eq "1"
        $step="++"
    $elif $step eq "-1"
        $step="--"
    $else
        $step="+=$step"

    $(if:loop_var!=-)
        $call $(loop_var)
    $(else)
        $if !$var
            $var = "i"

    $param="$var=$i0; $var$i1; $var$step"

subcode: for_c_style
    $call push_single_block, "for($param){", "}"

#---------------------------------------- 
#- counting up: [i0, i1)
#- counting down: [i2, i1] !!!
#- except (i2: 0]
subcode: parsecode_for_convention
    $if @tlist==1
        $i0="0"
        $i1="<$param"
        $step="1"
    $elif @tlist==2
        # $for i0:i1
        $if $tlist[1] eq "0"
            # CAUTION
            #   $i=n:0 be the reverse of $i=0:n
            $i0="$tlist[0]-1"
            $i1=">=$tlist[1]"
            $step="-1"
        $elif $tlist[1]=~/^[-0-9]+$/ && $tlist[0]=~/^[-0-9]+$/ && $tlist[0]>$tlist[1]
            $i0=$tlist[0]
            $i1=">=$tlist[1]"
            $step="-1"
        $else
            $i0=$tlist[0]
            $i1="<$tlist[1]"
            $step="1"
    $elif @tlist==3
        $i0=$tlist[0]
        $step=$tlist[2]
        $if $step=~/^-/
            # Counting down is not zero based
            $i1=">=$tlist[1]"
        $else
            # we're used to zero based counting up
            $i1="<$tlist[1]"

#---------------------------------------- 
subcode: parsecode_while_support(style)
    my ($init, $cond, $next)

    my @clause = split /\s*;\s*/, $param
    my $n = @clause
    $if $n>1 && !$clause[-1]
        $n--

    $if $n>3
        $call warn, "error: [\$while $param]\n"
    $elif $n==3
        ($init, $cond, $next) = @clause
    $elif $n==2
        ($cond, $next) = @clause
    $elif $n==1
        $cond = $param
    $else
        $cond = 1

    &call return_newblock, while
        $call while_$(style)

#---------------------------------------- 
subcode: while_c_style
    $if $init
        push @src, "$init;"
    push @src, "while($cond){"
    push @src, "INDENT"
    push @src, "BLOCK"
    $if $next
        push @src, "$next;"
    push @src, "DEDENT"
    push @src, "}"

