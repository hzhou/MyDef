#----------------------------------------------- 
subcode:: parsecode_func_param_other
    $elif $func eq "get_type"
        my $type=get_var_type($param2);
        MyDef::compileutil::set_current_macro($param1, $type)
        return 

subcode:: parsecode_func_other
    $elif $func=~/^(global|symbol|local|my|temp)$/
        $call @check_var_special, $func
        &call each_param_v
            $if $func eq "global"
                global_add_var($v)
            $elif $func eq "symbol"
                global_add_symbol($v)
            $elif $func eq "local"
                func_add_var($v);
            $elif $func eq "my"
                my_add_var($v)
            $elif $func eq "temp"
                temp_add_var($v)
        return
    $elif $func eq "set_var_attr"
        # $set_var_attr var, class=darray, ...
        my @plist=split /,\s*/, $param
        my $name=shift @plist
        my $var=find_var_x($name)
        $if $var
            $foreach $a in @plist
                $if $a=~/(\w+)=(.*)/
                    $if $2 eq "--"
                        delete $var->{$1}
                    $else
                        $var->{$1}=$2
        return
    $elif $func eq "get_var_attr"
        # $get_var_attr var, dimension(N), mask, ...
        my @plist=split /,\s*/, $param
        my $name=shift @plist
        my $var=find_var_x($name)
        $if $var
            $foreach $a in @plist
                $if $a=~/^(\w+)\((\w+)\)/
                    MyDef::compileutil::set_current_macro($2, $var->{$1})
                $else
                    MyDef::compileutil::set_current_macro($a, $var->{$a})
        return

    # --------------------
    subcode: each_param_v
        $param=~s/\s*;\s*$//
        my @vlist=MyDef::utils::proper_split($param)
        $foreach $v in @vlist
            BLOCK

#---------------------------------------- 
#- Scopes:   
#-     global/external, function, block
#- At each scope level:
#-     _list: list of, names
#-     _hash: hash to hash
#-----------------------------------------------------------------
fncode: global_add_symbol($name, $type, $value)
    $call add_var, $global_hash, none

fncode: global_add_var($name, $type, $value)
    $call add_var, $global_hash, $global_list

fncode: func_add_var($name, $type, $value)
    my ($var_list, $var_hash)
    $if !$cur_function
        $var_list=$main_func->{var_list}
        $var_hash=$main_func->{var_hash}
    $else
        $var_list=$cur_function->{var_list}
        $var_hash=$cur_function->{var_hash}
    $call add_var, $var_hash, $var_list

fncode: scope_add_var($name, $type, $value)
    my $var_list=$cur_scope->{var_list}
    my $var_hash=$cur_scope->{var_hash}
    $call add_var, $var_hash, $var_list

fncode:@ my_add_var($name, $type, $value)
    my $var_hash=$cur_scope->{var_hash}
    my $var=parse_var($name, $type, $value)
    $name = $var->{name}
    $var_hash->{$name} = $var
    my $decl = var_declare($var, 1)
    push @$out, $decl
    return $name

fncode: temp_add_var($name, $type, $value)
    my $var=parse_var($name, $type, $value)
    $name=$var->{name}

    my $macro_name=$name
    $name=MyDef::utils::uniq_name($name, \%protected_var)

    $if $debug eq "type"
        print "temp_var $macro_name -> $name of $var->{type}\n"

    my $hash=$cur_scope->{var_hash}
    $type=$var->{type}
    $if $hash->{$name} and $hash->{$name}->{temptype} ne $type
        my $i=2
        $if $name=~/[0-9_]/
            $name.="_"
        $while $hash->{"$name$i"} and $hash->{"$name$i"}->{temptype} ne $type
            $i++
        $name="$name$i"
    $if !$hash->{$name}
        $var->{name}=$name
        $var->{temptype}=$type
        $hash->{$name}=$var
        my $var_list=$cur_scope->{var_list}
        push @$var_list, $name

    MyDef::compileutil::set_current_macro($macro_name, $name)
    return $name

#------------------
subcode: add_var(hash, list)
    my $var=parse_var($name, $type, $value)
    $name=$var->{name}
    $if $(hash)->{$name}
        $call check_var_collision, $(hash)->{$name}
        return $name
    $else
        $(if:list!=none)
            push @$(list), $name
        $(hash)->{$name}=$var
        # $call warn, add_var $(hash) $name
        return $name
    # -------------------------------
    subcode: check_var_collision(exist)
        my $exist=$(exist)
        $if $var->{type} eq $exist->{type}
            $if $var->{array} > $exist->{array}
                $exist->{array}=$var->{array}
                $exist->{dimension}=$var->{array}

#-----------------------
# inside fcode: parse_var($name, $type, $value)
subcode: parse_var_default
    $if !$value && $name=~/(.*?)\s*=\s*(.*)/
        $name = $1
        $value = $2

    my $explicit_type;
    $if !$type
        &call @check_explicit_type
            $explicit_type=1

    $if !$type
        $type=get_c_type($name)

    #---- put it together ----
    my $var={}
    $var->{name}=$name
    $var->{type}=$type
    $var->{init}=$value
    $call @debug
    return $var

#-----------------------
# ref: macros_output/scope.def -- fncode: find_var
fncode: find_var_x($name)
    # struct element type
    $(if:hascode:find_var_element)
        $call find_var_element
    $(else)
        return find_var($name)

fncode: get_var_type_direct($name)
    my $var=find_var($name)

    $if $var
        return $var->{type}
    $else
        # hack
        return get_type_name($name)

#-###############################################
subcode:: parsecode_func_other
    $elif $func eq "protect_var"
        my @tlist=MyDef::utils::proper_split($param)
        $foreach $t in @tlist
            protect_var($t)
        return
    $elif $func eq "unprotect_var"
        my @tlist=MyDef::utils::proper_split($param)
        $foreach $t in @tlist
            # $call warn, unprotect_var $t: $protected_var{$t}
            $if $protected_var{$t}>0
                $protected_var{$t}--
        return

fncode: protect_var($v)
    $global %protected_var
    # $call warn,  protect_var $v
    $if $protected_var{$v}
        $call warn, Variable $v protected: [$protected_var{$v}]
        $protected_var{$v}++
    $else
        $protected_var{$v}=1


