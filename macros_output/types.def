
subcode:: parsecode_func_param_other
    $elif $func eq "register_prefix"
        my @tlist=split /,\s*/, $param1
        $foreach $t in @tlist
            $type_prefix{$t}=$param2
        return
    $elif $func eq "register_name"
        my @tlist=split /,\s*/, $param1
        $foreach $t in @tlist
            $type_name{$t}=$param2
        return

fncode: get_type_word_prefix($prefix, $type)
    $foreach $c in reverse(split //, $prefix)
        $if $c eq "t"
            # NOOP
        $call @type_word_prefix
        $else
            return undef
    return $type

#---- type from name ------
fncode: get_type_name($name, $no_prefix)
    # typename
    $if $type_name{$name}
        return $type_name{$name}
    $elif $type_prefix{$name}
        return $type_prefix{$name}
    # ---------------------
    $elif !$no_prefix and $name=~/^([t$(type_prefix_char)]+)_(.+)$/ 
        # p_nxxx
        my $type = get_type_name($2, 1)
        return get_type_word_prefix($1, $type)
    $if !$no_prefix and $name=~/^([t$(type_prefix_char)]+)(.)(_.+)?$/ and $type_prefix{$2}
        # pn_xxx
        my $type = $type_prefix{$2}
        return get_type_word_prefix($1, $type)
    # ---------------------
    $elif $name=~/^([^_]+)/ && $type_prefix{$1}
        return $type_prefix{$1}
    $elif $name=~/^([^_0-9]+)/ && $type_prefix{$1}
        return $type_prefix{$1}
    $elif $name=~/_([^_]+)$/ && length{$1}>1 && $type_name{$1}
        return $type_name{$1}
    return undef
