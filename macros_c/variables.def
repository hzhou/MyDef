# subcode:: parsecode_func_param_other
subcode:: parsecode_func_other
    $elif $func eq "global" or $func eq "symbol"
        $call check_var_special

        &call each_param_v
            $if $func eq "global"
                my $name=global_add_var($v)
            $elif $func eq "symbol"
                global_add_symbol($v)
        return
    $elif $func eq "local" or $func eq "my"
        $call check_var_special
        &call each_param_v
            $if $func eq "my" and !$page->{disable_scope}
                my_add_var($v)
            $else
                func_add_var($v);
        return
    $elif $func eq "temp"
        &call each_param_v
            temp_add_var($v)
        return
    $elif $func eq "set_var_attr"
        my @plist=split /,\s*/, $param
        my $name=shift @plist
        my $var=find_var($name)
        $if $var
            $foreach $a in @plist
                $if $a=~/(\w+)=(.*)/
                    $if $2 eq "--"
                        delete $var->{$1}
                    $else
                        $var->{$1}=$2
        return
    $elif $func eq "get_var_attr"
        my @plist=split /,\s*/, $param
        my $name=shift @plist
        my $var=find_var($name)
        $if $var
            $foreach $a in @plist
                MyDef::compileutil::set_current_macro($a, $var->{$a})
        return

subcode: each_param_v
    $param=~s/\s*;\s*$//
    my @vlist=MyDef::utils::proper_split($param)
    $foreach $v in @vlist
        BLOCK

#---------------------------------------- 
subcode:: parsecode_func_other
    $elif $func eq "class"
        $global %class_names
        my @tlist=split /,\s*/, $param
        $foreach $t in @tlist
            $class_names{$t}=1
        return

subcode: check_var_special
    $if $param=~/^(\w+)\s+(.*)$/
        $if $class_names{$1}
            my $scope=$func
            my ($class, $param)=($1, $2)
            my $initname=$class."_init"
            # $print "$red{$class} - $param"
            $if $param=~/^(\w+)\s*$/
                $if $(hascode:$initname)
                    MyDef::compileutil::call_sub("$initname, $1, $scope, default")
                    return
            $elif $param=~/^(\w+)\s*:\s*(.*)/
                $if $(hascode:$initname)
                    MyDef::compileutil::call_sub("$initname, $1, $scope, $2")
                    return

#---------------------------------------- 
#- Scopes:   
#-     global/external, function, block
#- At each scope level:
#-     _list: list of, names
#-     _hash: hash to hash
#-----------------------------------------------------------------
subcode:: c_support_subs
    $sub global_add_symbol($name, $type, $value)
        $call add_var, $global_hash, none

    $sub global_add_var($name, $type, $value)
        $call add_var, $global_hash, $global_list

    $sub func_add_var($name, $type, $value)
        $if !$cur_function
            return $name
        my $var_list=$cur_function->{var_list}
        my $var_hash=$cur_function->{var_hash}
        $call add_var, $var_hash, $var_list

    $sub my_add_var($name, $type, $value)
        my $var_list=$cur_scope->{var_list}
        my $var_hash=$cur_scope->{var_hash}
        $call add_var, $var_hash, $var_list

    $sub auto_add_var($name, $type, $value)
        my $var=find_var($name)
        $if !$var
            $if $debug eq "type"
                $call warn, auto_add_var: $name - $type - $value
            func_add_var($name, $type, $value)

    $sub temp_add_var($name, $type, $value)
        my $var=parse_var($name, $type, $value)
        $name=$var->{name}

        my $macro_name=$name
        $name=MyDef::utils::uniq_name($name, \%protected_var)

        $if $debug eq "type"
            print "temp_var $macro_name -> $name of $var->{type}\n"

        my $hash=$cur_scope->{var_hash}
        $type=$var->{type}
        $if $hash->{$name} and $hash->{$name}->{temptype} ne $type
            my $i=2
            $if $name=~/[0-9_]/
                $name.="_"
            $while $hash->{"$name$i"} and $hash->{"$name$i"}->{temptype} ne $type
                $i++
            $name="$name$i"
        $if !$hash->{$name}
            $var->{name}=$name
            $var->{temptype}=$type
            $hash->{$name}=$var
            my $var_list=$cur_scope->{var_list}
            push @$var_list, $name

        MyDef::compileutil::set_current_macro($macro_name, $name)
        return $name

#------------------
subcode: check_var_collision(exist)
    my $exist=$(exist)
    $if $var->{type} eq $exist->{type}
        $if $var->{array} > $exist->{array}
            $exist->{array}=$var->{array}
            $exist->{dimension}=$var->{array}

subcode: add_var(hash, list)
    my $var=parse_var($name, $type, $value)
    $name=$var->{name}
    $if $(hash)->{$name}
        $call check_var_collision, $(hash)->{$name}
        return $name
    $else
        $(if:list!=none)
            push @$(list), $name
        $(hash)->{$name}=$var
        # $call warn, add_var $(hash) $name
        return $name

#---------------------------------------- 
#---- array, let's restrict to one dimensional arrays
#-        multi-layer is a comprehension hazard
#-        deal with it in mydef macros
fncode: parse_var($name, $type, $value)
    my $type_given=$type
    my ($init, $array, $constructor);
    my @attrs
    my $explicit_type;
    # omit ;
    $name=~s/;\s*$//
    # NOTE: space sensitive!
    $if !$type
        $if $name=~/^\s*(\S[^=]*)\s+([^= \t].*)/
            ($type, $name)=($1, $2)
            $explicit_type=1
            $call check_pointer_type_name
    $if $type
        $call check_type_attributes
    $if $name=~/(\S+?)\s*=\s*(.*)/
        ($name, $init)=($1, $2)
        $if $debug eq "type"
            print "    parse_var: name $1, init $2\n"
        $call value_from_file
        $if !$value
            $value=$init
    $if $name=~/(\w+)\[(.*)\]/
        $name=$1;
        $array=$2;
    $elif $name=~/(\w+)\((.*)\)/
        $name=$1;
        $constructor=$2;
    $if !$type
        $call infer_type

    #----------------------
    $if $type=~/struct\s+(\w+)/ and !$structs{$1}
        $if $structure_autolist{$1}
            my $s_list=[]
            my $s_hash={}
            $structs{$1}={list=>$s_list, hash=>$s_hash}
            push @struct_list, $1
            $if ref($structure_autolist{$1}) eq "ARRAY"
                $foreach $t in @{$structure_autolist{$1}}
                    $if $t=~/^\s*(.*\S)\s+(\w+);/
                        push @$s_list, $2
                        $s_hash->{$2}=$1
            $else
                $s_hash->{"-opaque"}=1

    #---- put it together ----
    my $var={}
    $var->{name}=$name
    $var->{type}=$type
    $var->{init}=$init
    $if @attrs
        $var->{attr}=join(" ", @attrs)
    $if defined $array
        $var->{array}=$array
        $var->{dimension}=$array
        #- $local pn_test[10]: int* --> same
        $if $type!~/\*$/
            #- $local n_test[10]:  int  --> int *
            $var->{type}.=" *"
        $elif $type_given or $explicit_type
            #- $local int * P[10]: int * --> int **
            $var->{type}.="*"
    $elif defined $constructor
        $var->{constructor}=$constructor
    $call @debug
    return $var

    # --------------------
    subcode: check_type_attributes
        $while $type=~/^\s*(extern|static|const|register)\s*(.*)/
            push @attrs, $1
            $type=$2

    subcode: infer_type
        $type=get_c_type($name)
        $if $fntype{$name}
            $type="function"
        $if !($type and $type ne "void" and name_with_prefix($name))
            $if defined $value
                my $val_type=infer_c_type($value)
                $if $debug eq "type"
                    print "    infer_c_type: [$value] -> $val_type\n"
                $if $val_type and $val_type ne "void"
                    $type = $val_type

    subcode: debug
        $if $debug eq "type"
            $call warn, add_var: type:[$type] - $name ($array) - $init ($value)



#---------------------------------------- 
subcode: check_pointer_type_name
    $if $name=~/^(\*+)(.+)/
        $type.=" $1"
        $name=$2
    #- c++ specific, is it worthwhile?
    $elif $name=~/^(&)(.+)/
        $type.=" $1"
        $name=$2

#---------------------------------------- 
subcode:: c_support_subs
    $sub var_declare($var)
        $if $var->{type} eq "function"
            return $fntype{$var->{name}};
        $else
            my $name=$var->{name}
            my $type=$var->{type}
            my $t
            $if defined $var->{array}
                $t=pointer_type($type)." $name"."[$var->{array}]"
            $elif defined $var->{constructor}
                $t=pointer_type($type)." $name"."($var->{constructor})"
            $else
                $t="$type $name"
            $if defined $var->{init}
                $t.=" = $var->{init}"
            $if defined $var->{attr}
                return  $var->{attr}." $t"
            $else
                return  $t

#-----------------------------------------------------------------
subcode:: c_support_subs
    $sub get_var_type_direct($name)
        my $var=find_var($name)
        $if $debug eq "type"
            print "get_var_type_direct: $name - [$var] - $var->{type}\n"

        $if $var
            return $var->{type}
        $else
            return undef

#---------------------------------------- 
subcode:: c_support_subs
    $sub get_var_type($name)
        $if $name=~/^(\w+)(.*)/
            my $tail=$2
            my $base_type=get_var_type_direct($1)
            $base_type=~s/\s*&$//
            #---- undef if not found -----
            return get_sub_type($base_type, $tail)
        $else
            return "void";

    $sub get_sub_type($type0, $tail)
        $if !$type0
            return "void"

        # print "get_sub_type: $type0 - $tail\n"

        $if $tail=~/^(\.|->)(\w+)(.*)/
            $tail=$3;
            my $type=get_struct_element_type($type0, $2)
            return get_sub_type($type, $tail)
        $elif $tail=~/^\[.*?\](.*)/
            $tail=$1;
            $if $type0=~/\*$/
                return get_sub_type(pointer_type($type0), $tail)
            $else
                $call warn, error in dereferencing pointer type $type0
                return "void"
        $else
            return $type0

#-#########################################################
subcode:: package_globals
    use File::stat
    $sub get_mtime($fname)
        my $st=stat($fname)
        return $st->[9]

subcode:: c_init
    $global @extern_binary
    @extern_binary=()

subcode: value_from_file
    $if $init=~/^=\[binary_from_file:(\S+)\]/
        $global_hash->{"_$name"}="extern char _$name"
        push @$global_list, "_$name"
        $init="=&_$name"
        push @extern_binary, "$name:$1"

subcode: process_extern_binary
    my $ofile=$page->{outdir}."/extern.o"
    my $otime=get_mtime($ofile)
    my $need_update=0
    my @externS;
    push @externS, "    .section .rodata"
    $foreach $t in @extern_binary
        $if $t=~/(.*):(.*)/
            my ($name, $fname)=($1,$2)
            push @externS, "    .global _$name"
            #push @externS, "    .type   $name, \"object\""
            push @externS, "    .align  4"
            push @externS, "_$name:"
            push @externS, "    .incbin \"$fname\""
            $if get_mtime($fname)>$otime
                $need_update=1
    $if $need_update
        print "  ---> $ofile\n"
        open Out, ">$page->{outdir}/extern.s"
        print Out join("\n", @externS), "\n";
        close Out

        my $cmd= "as -o $ofile"
        open PIPE, "|$cmd" or die "Can't run $cmd\n"
        print PIPE join("\n", @externS), "\n"
        close PIPE
    $if -f $ofile
        $objects{"extern.o"}=1

#---------------------------------------- 
subcode:: parsecode_func_other
    $elif $func eq "protect_var"
        my @tlist=MyDef::utils::proper_split($param)
        $foreach $t in @tlist
            protect_var($t)
        return
    $elif $func eq "unprotect_var"
        my @tlist=MyDef::utils::proper_split($param)
        $foreach $t in @tlist
            # $call warn, unprotect_var $t: $protected_var{$t}
            $if $protected_var{$t}>0
                $protected_var{$t}--
        return

subcode:: c_support_subs
    $global %protected_var
    $sub protect_var($v)
        # $call warn,  protect_var $v
        $if $protected_var{$v}
            $call warn, Variable $v protected: [$protected_var{$v}]
            $protected_var{$v}++
        $else
            $protected_var{$v}=1


