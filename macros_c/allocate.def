subcode:: parsecode_func_param_other
    $elif $func eq "allocate"
        allocate($param1, $param2, "malloc")
        return
    $elif $func eq "realloc"
        allocate($param1, $param2, "realloc")
        return
    $elif $func eq "local_allocate"
        allocate($param1, $param2, "auto")
        return

subcode:: parsecode_func_other
    $elif $func eq "allocate"
        allocate("1", $param, "malloc")
        return

#---------------------------------------- 
fncode: allocate($dim, $param2, $alloc_type)
    add_include("stdlib, string")
    $call get_dimension
    $call auto_post
    my @plist=split /,\s+/, $param2;
    $foreach $p in @plist
        $if $p
            $call @get_var
            my $type=pointer_type(get_var_type($p))

            my $size="sizeof($type)"
            my $tsize = $size
            $if $dim ne "1"
                $tsize = "$dim*$size"

            $if $alloc_type eq "realloc"
                push @$out, "$p=($type*)realloc($p, $tsize);";
            $elif defined $init_value and $init_value eq '0'
                push @$out, "$p=($type*)calloc($dim, $size);";
                undef $init_value
            $else
                push @$out, "$p=($type*)malloc($tsize);";

            $call @auto_post_p
            $call allocate_init

    # ----------------------------------
    subcode: auto_post
        my $post
        $if $alloc_type eq "auto"
            $post=MyDef::compileutil::get_named_block("_post")
    subcode: auto_post_p
        $if $alloc_type eq "auto"
            push @$post, "free($p);"

    subcode: get_dimension
        my $init_value;
        $if $dim=~/(.*),\s*(.*)/
            $dim=$1;
            $init_value=$2;
        $if $dim=~/[+-]/
            $dim="($dim)";

    subcode: get_var
        $if $p=~/^(\w+)$/
            my $var=find_var($p)
            $if !$var
                func_add_var($p)
                $var=find_var($p)
            $var->{dimension}=$dim
            $if $dim=~/\*/
                my @parts=split /\s*\*\s*/, $dim
                my $i=0
                $foreach $d in @parts
                    $i++
                    $var->{"dim$i"}=$d
                $if $i==2 and !$var->{class}
                    $if $debug
                        $print setting matrix class: $p
                    $var->{"class"}="matrix"
    # ------------------------------------------ 
    subcode: allocate_init
        $if defined $init_value and $init_value ne ""
            $if $init_value eq "0"
                $if $type eq "void"
                    push @$out, "memset($p, 0, $dim);"
                $else
                    push @$out, "memset($p, 0, $dim*sizeof($type));"
            $else
                temp_add_var("i", $type_name{i})
                push @$out, "for(i=0;i<$dim;i++){";
                push @$out, "    $p\[i]=$init_value;";
                push @$out, "}";

