subcode:: parsecode_func_param_other
    $elif $func eq "allocate"
	allocate($param1, $param2);
	return
    $elif $func eq "local_allocate"
	local_allocate($param1, $param2);
	return
    $elif $func eq "global_allocate"
	# at main_exit: DUMP_STUB global_cleanup
	global_allocate($param1, $param2);
	return

subcode:: parsecode_func_other
    $elif $func eq "allocate"
	allocate(1, $param);
	return

#------------------------------------------ 
subcode: allocate_dimension
    my $init_value;
    $if $dim=~/(.*),\s*(.*)/
	$dim=$1;
	$init_value=$2;
    $if $dim=~/[+-]/
	$dim="($dim)";

subcode: allocate_one(out)
    push @$(out), "$p=($type*)malloc(sizeof($type));";
    $if $init
	push @$(out), "$1_constructor($p);";
subcode: allocate_array(out)
    push @$(out), "$p=($type*)malloc($dim*sizeof($type));";
    $if $init
	func_add_var("i", "int");
	push @$(out), "for(i=0;i<$dim;i++)$1_constructor($p\[i]);";
subcode: deallocate_one(out)
    $if $init
	push @$(out), "$1_destructor($p);";
    push @$(out), "free($p);";
subcode: deallocate_array(out)
    $if $init
	func_add_var("i", "int");
	push @$(out), "for(i=0;i<$dim;i++)$1_destructor($p\[i]);";
    push @$(out), "free($p);";

subcode: check_struct_init_exit
    my ($init, $exit)
    $if $type=~/struct (\w+)/
	$init=@{$structs{$1}->{hash}->{"-init"}}
	$exit=@{$structs{$1}->{hash}->{"-exit"}}

# ----
subcode:: c_support_subs
    $sub allocate($dim, $param2)
	$includes{"<stdlib.h>"}=1;
	$call allocate_dimension
	my @plist=split /,\s+/, $param2;
	$foreach my $p in @plist
	    $if $p
		my $type;
		$if $p=~/^(\w+)$/
		    func_add_var($p)
		    $cur_function->{var_flag}->{$p}="retained"
		$type=pointer_type(get_var_type($p))
		$call check_struct_init_exit
		$if $dim == 1
		    $call allocate_one, $out
		$else 
		    $call allocate_array, $out
		$if $global_type->{memtrack_on}
		    MyDef::compileutil::call_sub("\@memtrack, $p")
	$call allocate_init_value, $out

    $sub local_allocate($dim, $param2)
	my $post=MyDef::compileutil::get_named_block("_post")
	$call auto_allocate, local

    $sub global_allocate($dim, $param2)
	my $post=MyDef::compileutil::get_named_block("global_cleanup")
	$call auto_allocate, global

subcode: auto_allocate(scope)
    $includes{"<stdlib.h>"}=1;
    $call allocate_dimension
    my @plist=split /,\s+/, $param2;
    $foreach my $p in @plist
	$if $p
	    $(if:scope=global)
		global_add_var($p);
	    $(else)
		func_add_var($p)
	    my $type=pointer_type(get_var_type($p));
	    $call check_struct_init_exit
	    $if $dim == 1
		$call allocate_one, $out
		$call deallocate_one, $post
	    $else 
		$call allocate_array, $out
		$call deallocate_array, $post
    $call allocate_init_value, $out

subcode: allocate_init_value(out)
    $if defined $init_value and $init_value ne ""
	func_add_var("i", "int");
	push @$(out), "for(i=0;i<$dim;i++){";
	$foreach my $p in @plist
	    $if $p
		push @$(out), "    $p\[i]=$init_value;";
	push @$(out), "}";
