subcode:: c_init
    $global @function_stack
    @function_stack=()

    $global %list_function_hash
    $global @list_function_list
    %list_function_hash=()
    @list_function_list=()

#---- auto_declare -----------------------------
# relying on utils to export external functions
#     need work out solutions on structure etc.
#     deprecate autoload_h, "auto" is a monster, explicit rules!
subcode: load_autodecl(inc)
    $global %structure_autolist
    my $lines=MyDef::parseutil::get_lines("$(inc)")
    my $struct_lines
    $foreach $l in @$lines
        $if $l=~/^F\s+(\S.+)\s+(\w+)\((.*)\)/
            my ($name, $type, $param)=($2, $1, $3)
            $functions{$name}={declare=>"$type $name($param)", ret_type=>$type}
            $function_autolist{$name}="declare"
        $elif $l=~/^S\s+(.*)/
            my @tlist=split /,\s*/, $1
            $foreach $t in @tlist
                $structure_autolist{$t}=1
        $elif $l=~/^struct (\w+){/
            $struct_lines=[]
            $structure_autolist{$1}=$struct_lines
        $elif $l=~/^}/
            undef $struct_lines
        $elif $struct_lines
            push @$struct_lines, $l

#---- autolist ------------------------------------ 
subcode: autolist_functions
    $global %function_autolist
    &call each_subcode, fn
        my $source=$code->{source}
        $foreach $l in @$source
            $if $l=~/^SOURCE/
                #skip
            $elif $l=~/^(lexical|parameter|return):\s*(.+?)\s*$/
                $if $1 eq "lexical"
                    $call parse_lexical
                $elif $1 eq "parameter"
                    $l="\$parameter $2"
                $elif $1 eq "return"
                    $l="\$return_type $2"
            $else
                last
        $function_autolist{$name}="static"

#---- lexical parameter ------------------------------------ 
subcode: parse_lexical
    my @tlist=split /,\s*/, $2
    my @params
    my @segs
    $foreach $t in @tlist
        $if $t=~/(.*)\((\w+)\)$/
            push @params, $1
            push @segs, $2
        $else
            push @params, $t
            $if $t=~/^(.+)\s+(\S+)$/
                push @segs, $2
            $else
                push @segs, $t
    $function_defaults{$name}="append:".join(', ', @segs)
    $l="\$parameter ". join(", ", @params)

#------------------------------------
subcode:: parsecode_func_other
    $elsif $func eq "function"
        $call parse_function
        return
    $elsif $func eq "list"
        my @tlist=split /,\s*/, $param
        $foreach $f in @tlist
            $call add_list_function, $f
            $function_autolist{$f}="global"
        return
    $elsif $func eq "fcall"
        $if $param=~/(\w+)\s*\(/
            $call add_list_function, $1
            $l=$param
        $elif $param=~/^(\w+)\s*$/
            $call add_list_function, $1
            $l="$1()"

# ------------------------------------
subcode: add_list_function(f)
    $if !$list_function_hash{$(f)}
        $list_function_hash{$(f)}=1
        push @list_function_list, $(f)
    $else
        $list_function_hash{$(f)}++

# ##############################
subcode: parsecode_post
    #---- NOOP POST_MAIN: called at end of parse or 
    #-      end of each parse group as in output_xs.def
    
    $while my $f=shift @list_function_list
        $call parse_function_list_item, $f

    # ------------------------------------
    subcode: parse_function_list_item(f)
        my $funcname=$(f)
        $if $lamda_functions{$funcname}
            my $block=$lamda_functions{$funcname}
            push @$out, @$block
            $function_autolist{$funcname}="static"
        $elif $functions{$funcname} && $functions{$funcname}->{autodecl}
        $elif $function_autolist{$funcname} eq "declare"
            push @function_declare_list, $funcname
        $else
            $call parse_name
            &call load_codelib
                &call function_block
                    MyDef::compileutil::list_sub($codelib)
                    $if $out->[-1]=~/^return/
                        $cur_function->{return}=pop @$out
                $call function_pop
        # ------------------
        subcode: parse_name
            my $codename=$(f)
            $if $codename=~/(\w+)\((\w+)\)/
                $codename=$1
                $funcname=$2
            $funcname=~s/^@//

        subcode: load_codelib
            my $codelib=MyDef::compileutil::get_def_attr("codes", $codename)
            $if !$codelib
                $print function $codename not found!
            $else
                my $params=$codelib->{params}
                my $paramline
                $if defined $params
                    $paramline=join(",", @$params)
                    $if $funcname eq "n_main" or $funcname eq "main2"
                        $funcname="main";
                $else
                    $paramline=""

                $if defined $paramline
                    BLOCK

# ---- Direct $function ------------------
subcode: parse_function
    $global %lamda_functions
    $if $param=~/(\w+)(.*)/
        my ($fname, $paramline)=($1, $2)
        $if $paramline=~/\((.*)\)/
            $paramline=$1
        $elif $paramline=~/^\s*,\s*(.*)/
            $paramline=$1

        my $funcname=MyDef::utils::uniq_name($fname, \%list_function_hash)
        my $block=[]
        &call replace_output, $block
            &call function_block
                push @$block, "BLOCK";
            push @$block, "PARSE:\$function_pop"

        $lamda_functions{$funcname}=$block
        $call add_list_function, $funcname
        MyDef::compileutil::set_current_macro("lamda", $funcname)

        return $block
    $else
        return "SKIPBLOCK"

#---------------------------------------- 
subcode:: support_subs
    $sub start_function($funcname, $paramline)
        my $func=open_function($funcname, $paramline);
        $call function_push
        #------------------
        push @function_list, $func
        my $fidx=$#function_list
        MyDef::compileutil::set_named_block("fn$fidx\_open", $func->{openblock})
        MyDef::compileutil::set_named_block("fn$fidx\_pre", $func->{preblock})
        MyDef::compileutil::set_named_block("fn$fidx\_post", $func->{postblock})
        MyDef::compileutil::set_named_block("fn$fidx\_close", $func->{closeblock})
        push @$out, "DUMP_STUB fn$fidx\_open"
        push @$out, "INDENT"
        push @$out, "DUMP_STUB fn$fidx\_pre"

        MyDef::compileutil::set_current_macro("FunctionName", $funcname)
        return $fidx

    $sub finish_function($fidx)
        push @$out, "DUMP_STUB fn$fidx\_post"
        push @$out, "DEDENT"
        push @$out, "DUMP_STUB fn$fidx\_close"


    #---------------------------------------- 
    #---- used in deflib/win32/windows.def --
    #--
    $sub start_function_block($funcname, $paramline)
        $if !$lamda_functions{$funcname}
            my $block=[]
            my $old_out=MyDef::compileutil::set_output($block)

            my $fidx = start_function($funcname, $paramline)

            $lamda_functions{$funcname}=$block
            push @list_function_list, $funcname
            $list_function_hash{$funcname}=1
            return {out=>$old_out, fidx=>$fidx}
        $else
            return undef

    $sub finish_function_block($context)
        finish_function($context->{fidx})
        MyDef::compileutil::set_output($context->{out})
        $call function_pop

#---------------------------------------- 
subcode: function_block
    my $fidx=start_function($funcname, $paramline)
    BLOCK
    finish_function($fidx)

subcode: function_push
    push @function_stack, $cur_function
    $cur_function=$func

    push @scope_stack, $cur_scope
    $cur_scope=$cur_function

subcode:: parsecode_func_other
    $elsif $func eq "function_pop"
        $call function_pop
        return

subcode: function_pop
    $cur_function=pop @function_stack
    $cur_scope=pop @scope_stack
    my $level=@function_stack
    $if $level==0
        $call case_reset

#---------------------------------------- 
fncode: inject_function($name, $params, $source)
    my $t_code={'type'=>"fn", name=>$name, 'source'=>$source, params=>$params}
    $MyDef::def->{codes}->{$name}=$t_code

    $if !$list_function_hash{$name}
        $list_function_hash{$name}=1
        push @list_function_list, $name
    $else
        $list_function_hash{$name}++


