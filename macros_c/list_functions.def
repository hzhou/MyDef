# ------------------------------------
subcode:: parsecode_func_other
    $elsif $func eq "function"
	$call parse_function
	return
    $elsif $func eq "function_end"
	# automatically generated from compileutil
	$call parse_function_end
	return
    $elsif $func eq "list"
	# $call parse_function_list
	$call add_list_functions, $param
	return
    $elsif $func eq "fcall"
	$call check_autoload_h
	$if $param=~/(\w+)\(/
	    $call add_list_function, $1
	    $l=$param
	$elif $param=~/^(\w+)\s*$/
	    $call add_list_function, $1
	    $l="$1()"

# ------------------------------------
subcode: add_list_functions(param)
    $global %list_function_hash

    $call check_autoload_h
    $if !$autoload_h
	my @tlist=split /,\s*/, $(param)
	$foreach $f in @tlist
	    $call add_list_function, $f

subcode: add_list_function(f)
    $if !$list_function_hash{$(f)}
	$list_function_hash{$(f)}=1
	push @list_function_list, $(f)
	$call add_to_autoload_h, "function-$(f)"
    $else
	$list_function_hash{$(f)}++

# #### -------------------------------
subcode: parsecode_post
    $global @list_function_list

    $while my $f=shift @list_function_list
	$call parse_function_list_item, $f

# ------------------------------------
subcode: parse_function_list_item(f)
    my $funcname=$(f)
    $if $lamda_functions{$funcname}
	my $block=$lamda_functions{$funcname}
	push @$out, @$block
    $else
	my ($paramline, $codename)
	$codename=$(f)
	$if $codename=~/(\w+)\((\w+)\)/
	    $codename=$1
	    $funcname=$2
	$funcname=~s/^@//
	my $params=MyDef::compileutil::get_sub_param_list($codename)
	$if defined $params
	    $paramline=join(",", @$params)
	    $if $funcname eq "n_main" or $funcname eq "main2"
		$funcname="main";

	$if defined $paramline
	    my $fidx=open_function($funcname, $paramline);
	    push @$out, "OPEN_FUNC_$fidx";
	    $cur_indent=1
	    push @$out, "SOURCE_INDENT"
	    MyDef::compileutil::set_current_macro("FunctionName", $funcname)
	    MyDef::compileutil::call_sub($codename, "\$list")
	    $call parse_function_end
	    push @$out, "SOURCE_DEDENT"

# ---- Direct $function ------------------
subcode: parse_function
    $global %lamda_functions
    $call check_autoload_h
    $if !$autoload_h and $param=~/(\w+)(.*)/
	my ($fname, $paramline)=($1, $2)
	$if $paramline=~/\((.*)\)/
	    $paramline=$1
	$elif $paramline=~/^\s*,\s*(.*)/
	    $paramline=$1

	my $name=MyDef::utils::uniq_name($fname, \%list_function_hash)
	$call add_to_autoload_h, "function-$name"

	my $block=[]

	my $fidx=open_function($name, $paramline)
	push @$block, "OPEN_FUNC_$fidx";
	push @$block, "SOURCE_INDENT";
	push @$block, "BLOCK";
	push @$block, "SOURCE_DEDENT";
	push @$block, "PARSE:\$function_end"

	$lamda_functions{$name}=$block
	$call add_list_function, $name
	MyDef::compileutil::set_current_macro("lamda", $name)

	return $block
    $else
	return "SKIPBLOCK"

subcode: parse_function_end
    $cur_function=pop @function_stack
    my $level=@function_stack
    $if $level==0
	$call case_reset

