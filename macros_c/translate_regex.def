#--  requires DefParser/lex.def 

fncode: translate_regex($re, $option)
    $call check_cache
    $call parse_regex

    $call inject_match_function

    return $re_hash{$pat}

    # ------------------------
    subcode: parse_regex
        my $r=MyDef::utils::parse_regex($re)
        $if $debug
            $print translate_regex: [$re]
            MyDef::utils::debug_regex($r)

        my $opt={group_idx=>0}
        $if $option=~/i/
            $opt->{i}=1

    subcode: check_cache
        $global %re_hash
        my $pat="/$re/$option"
        $if $re_hash{$pat}
            return $re_hash{$pat}

        $global $re_index=0
        $re_index++
        my $name="match_re_$re_index"
        $re_hash{$pat}="$name(input)"

    # ----------------------------
    subcode: inject_match_function
        my @output
        my $t_code={'type'=>"fn", 'source'=>\@output}
        $t_code->{params}=["input"]
        $t_code->{name}=$name
        $page->{codes}->{$name}=$t_code
        $call add_list_function, $name
        
        # add comment 
        push @output, "\$: // $pat "
        push @$out, "// $pat"
        push @output, "\$return_type bool"
        #----
        $if $r->{has_Any}>0
            $call @check_regex_Any
        $else
            $r->{0}="return false;"
            $r->{1}="input->e[0]=input->n_pos;return true;"
            my $subout=translate_regex_atom($r, $opt, 1)
            push @output, "input->s[0]=input->n_pos"
            push @output, @$subout

fncode: translate_regex_atom($r, $opt, $level)
    my ($condition, @output)
    my $v_res="tb_res_$level"
    my $v_pos="tn_pos_$level"
    $if $r->{type} =~/^(group|seq|alt|\?!|\?=)/
        my $gid
        $if $r->{type} eq "group"
            $opt->{group_idx}++
            $gid=$opt->{group_idx}
        push @output, "\$do"
        push @output, "SOURCE_INDENT"
        $if $gid and $gid<10
            push @output, "input->s[$gid]=input->n_pos"
        push @output, "$v_pos = input->n_pos"
        push @output, "$v_res = false"
        $foreach $t in @{$r->{list}}
            $if $r->{type} eq "alt"
                $t->{1}="break;"
                $t->{0}=""
            $else
                $t->{1}=""
                $t->{0}="break;"
            my $subout=translate_regex_atom($t, $opt, $level+1)
            push @output, @$subout
        $if $gid and $gid<10
            push @output, "input->e[$gid]=input->n_pos"
        push @output, "$v_res = true"
        push @output, "SOURCE_DEDENT"
        $if $r->{type} eq "alt"
            $call track_result, !$v_res, $v_res, NOOP
        $elif $r->{type} eq "?="
            push @output, "input->n_pos = $v_pos"
            $call track_result, $v_res, !$v_res, NOOP
        $elif $r->{type} eq "?!"
            push @output, "input->n_pos = $v_pos"
            $call track_result, !$v_res, $v_res, NOOP
        $else
            $call track_result, $v_res, !$v_res, input->n_pos = $v_pos

    $elif $r->{type} eq "*"
        #-- greedy, keep matching until not, then break ------
        my $t=$r->{atom}
        $t->{1}=""
        $t->{0}="break;"
        my $subout=translate_regex_atom($t, $opt, $level+1)
        push @output, "\$while 1"
        push @output, "SOURCE_INDENT"
        push @output, @$subout
        push @output, "SOURCE_DEDENT"
        $if $r->{1}
            push @output, $r->{1}

    $elif $r->{type} eq "?"
        my $t=$r->{atom}
        $t->{1}=$r->{1}
        $t->{0}=""
        my $subout=translate_regex_atom($t, $opt, $level+1)
        push @output, @$subout
        $if $r->{1}
            push @output, "    ".$r->{1}

    $elif $r->{type} eq "+"
        my $t=$r->{atom}
        my $v_cnt="tn_cnt_$level"
        $t->{1}="$v_cnt++;"
        $t->{0}="break;"
        my $subout=translate_regex_atom($t, $opt, $level+1)
        push @output, "\$my $v_cnt=0;"
        push @output, "\$while 1"
        push @output, "SOURCE_INDENT"
        push @output, @$subout
        push @output, "SOURCE_DEDENT"
        $if $r->{0} or $r->{1}
            push @output, "if($v_cnt>0){$r->{1}}else{$r->{0}}"

    $else
        push @output, "\$call input_get_c, tn_c"
        my $cond

        $if $r->{type} eq "AnyChar"
            NOOP
        $elif $r->{type} eq "class"
            $if $r->{list}
                $if $opt->{i}
                    push @output, "tn_c = toupper(tn_c)"
                    $foreach $c in @{$r->{list}}
                        $c=uc($c)
                $cond=translate_class($r->{list})
            $elif $r->{char} eq "s"
                $cond="isspace(tn_c)" 
            $elif $r->{char} eq "S"
                $cond="!isspace(tn_c)"
            $elif $r->{char} eq "d"
                $cond="isdigit(tn_c)"
            $elif $r->{char} eq "D"
                $cond="!isdigit(tn_c)"
            $elif $r->{char} eq "w"
                $cond="isalnum(tn_c) || tn_c=='_'"
            $elif $r->{char} eq "W"
                $cond="!isalnum(tn_c) && tn_c!='_'"
        $else
            $if $opt->{i} and $r->{char} ne uc($r->{char})
                push @output, "tn_c = toupper(tn_c)"
                $r->{char}=uc($r->{char})
            $cond= "tn_c=='$r->{char}'"

        $call track_result, $cond, !($cond), \$call input_back_c

    return \@output

#----
subcode: track_result(cond1, cond0, back)
    $if $r->{1}
        push @output, "if($(cond1)){"
        push @output, "    $r->{1}"
        push @output, "}"
        push @output, "else{"
    $else
        push @output, "if($(cond0)){"
    push @output, "INDENT"
    push @output, "$(back)"
    $if $r->{0}
        push @output, "$r->{0}"
    push @output, "DEDENT"
    push @output, "}"

#---------------------------------------- 
fncode: translate_class($r)
    my @tlist
    my $negate
    $if $r->[0] eq '^'
        $negate=shift @$r

    $foreach $c in @$r
        $if $c=~/(\w+)-(\w+)/
            push @tlist, "tn_c>='$1' && tn_c<='$2'"
        $else
            push @tlist, "tn_c=='$c'"

    $if $negate
        return "!(". join(' || ', @tlist). ")"
    $else
        return join(' || ', @tlist)

#---------------------------------------- 
subcode: check_regex_Any
    $if $r->{has_Any}>1
        die "Lex Regex: too many '.*'\n"
    $else
        $if $r->{type}=~/^(group|seq)/
            my $rlist=$r->{list}
            my $n=$r->{n}
            my $i=0
            $while $i<$n
                my $t=$rlist->[$i]
                $if $t->{type} eq "Any" or $t->{type} eq "group" && $t->{n}==1 && $t->{list}->[0]->{type} eq "Any"
                    last
                $i++
            my ($pre, $any, $post)
            # begin
            $if $i==1
                $pre=$rlist->[0]
            $elif $i>1
                my @t1=@$rlist[0..($i-1)]
                $pre={type=>"seq", n=>$i, list=>\@t1}
            # .*
            $if $rlist->[$i]->{type} eq "group"
                $any=$rlist->[$i]->{list}->[0]
                $any->{capture}=1
            $else
                $any=$rlist->[$i]
            # end
            $if $n-($i+1)==1
                $post=$rlist->[$i+1]
            $elif $n-($i+1)>1
                my @t1=@$rlist[($i+1)..($n-1)]
                $post={type=>"seq", n=>($n-$i-1), list=>\@t1}
            $call translate_regex_Any

        $else
            die "Lex Regex .* not supported\n"

subcode: translate_regex_Any
    $if !$post
        die "Lex Regex: trailing .* not supported\n"

    my ($gid0, $sub_pre, $gid, $sub_post)
    $if $r->{type} eq "group"
        $opt->{group_idx}++
        $gid0=$opt->{group_idx}

    $if $pre
        $pre->{0}="return false"
        $pre->{1}=""
        $sub_pre=translate_regex_atom($pre, $opt, 1)

    $if $any->{capture}
        $opt->{group_idx}++
        $gid=$opt->{group_idx}

    $if $post
        $post->{0}=""
        $post->{1}="return true"
        $if $gid0>0
            $post->{1}="if(level==0){input->s[$gid0]=tn_pos_0;input->e[$gid0]=input->n_pos;} return true;"
        $sub_post=translate_regex_atom($post, $opt, 1)

    $re_hash{$pat}="$name(input, 0)"
    push @{$t_code->{params}}, "int level"
    push @output, "tn_pos_0 = input->n_pos"
    $if !$pre
        &call lex_any_block
            $call lex_any_skip
    $else
        push @output, @$sub_pre
        &call lex_any_block
            push @output, "\$if !$name(input, level+1)"
            push @output, "SOURCE_INDENT"
            $call lex_any_skip
            push @output, "SOURCE_DEDENT"


subcode: lex_any_block
    $if $gid>0
        push @output, "\$if level==0"
        push @output, "SOURCE_INDENT"
        push @output, "input->s[$gid]=input->n_pos"
        push @output, "SOURCE_DEDENT"
    push @output, "\$while 1"
    push @output, "SOURCE_INDENT"
    $if $gid>0
        push @output, "\$if level==0"
        push @output, "SOURCE_INDENT"
        push @output, "input->e[$gid]=input->n_pos"
        push @output, "SOURCE_DEDENT"
    push @output, @$sub_post
    BLOCK
    push @output, "SOURCE_DEDENT"
    push @output, "return false"

subcode: lex_any_skip
    push @output, "\$call input_get_c, tn_c"
    push @output, "\$if tn_c==-1"
    push @output, "SOURCE_INDENT"
    push @output, "input->n_pos=tn_pos_0"
    push @output, "return false"
    push @output, "SOURCE_DEDENT"

