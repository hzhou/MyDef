subcode:: parsecode_func_other
    $elif $func eq "yield"
        $global $yield
        $yield=$param
        return
    $elif $func eq "set_function_defaults"
        $global %function_defaults
        my @plist=MyDef::utils::proper_split($param)
        my $pattern=shift @plist
        $foreach $name in @plist
            $function_defaults{$name}=$pattern
        return

#----------------------------------------------- 
fncode: check_expression($l, $context)
    #-- Note: if $l is already terminated with ';'
    #--   it is bypassed: parsing.def:parsecode_other
    $(if:0)
        $if $debug eq "expression"
            $print "check_expression: $l [$context]"

    $call check_statement
    $else
        $call parse_frame

    # ---------------------------
    subcode: check_statement
        $if $l=~/^return\b\s*(.*)/
            $if length($1)<=0
                return func_return()
            $else
                my $t=check_expression($1, $context)
                return func_return($t)
        $elif $l=~/^\s*(if|for|while|switch)/
            # -- vanila C statement ---
            return $l

    # --------------------------
    subcode: parse_frame
        my ($assign, $left, $right)
        $call @check_expression_init
        my @stack
        my @types
        $while 1
            $call check_expression_parse
            $call check_expression_push
        $if @stack==1 and $types[0] eq "atom-("
            $right=substr($stack[0], 1, -1)
        $else
            $right=join("", @stack)

        $if $assign
            $if $assign eq "="
                $if $context && $context eq "condition"
                    $if $right!~/^\w+\(.*\)$/
                        $call warn,  Assignment in [$left = $right], possible bug?
                    return "$left = $right"
                $else
                    do_assignment($left, $right)
                    return
            $elif $assign eq ":="
                # a hack for assignment in condition
                #   double parentheses is clang's trick to supress warning
                return "($left = $right)"
            $else
                $right= "$left $assign $right"
        $call process_expression_cache, $right
        return $right

    macros:
        type: 
        type1: @types>0 && $types[-1]
        type2: @types>1 && $types[-2]
        atom1: @stack>0 && $stack[-1]
        atom2: @stack>1 && $stack[-2]
    # ---------------------------------------- 
    subcode: check_expression_parse
        macros:
            exponent: (?:[eE]-?\d+)
            dot_pow: \.\d+$(exponent)?
            int_pow: \d+$(exponent)
            dec_pow: \d+\.\d*$(exponent)?
            float: ($(dot_pow)|$(dec_pow)|$(int_pow))

        my ($token, $type)
        $if $l=~/\G$/gc
            last
        #----  atom ------
        $elif $l=~/\G("([^"\\]|\\.)*")/gc
            $token=$1
            $type="atom-string"
        $elif $l=~/\G('([^'\\]|\\.)*')/gc
            $token=$1
            $type="atom-char"
        $elif $l=~/\G($(float)f?)/gc
            $token=$1
            $type="atom-number-float"
            $if $(type1) =~/^atom/ and $token=~/^\.(\d+)/
                $token=$1
                $call check_exp_tuple_member
        $elif $l=~/\G(\d[0-9a-zA-Z]*)/gc
            $token=$1
            $type="atom-number"
            $if $(atom1) eq "^" and $token<10 and $token>1
                $call check_exp_exponential
        $elif $l=~/\G(\w+)/gc
            $token=$1
            $type="atom-identifier"
            $call check_exp_member
        #---- special --------
        $elif $l=~/\G\$(\w+)/gc
            my $method=$1
            $if $method=~/^(eq|ne|le|ge|lt|gt)$/i
                $token=$1
                $type="operator"
            $else
                $call check_exp_callsub
        #----  bracket ------
        $elif $l=~/\G([\(\[\{])/gc
            $call exp_push, $1, $1
            next
        $elif $l=~/\G([\)\]\}])/gc
            $call check_exp_bracket
        #---- skip ----
        $elif $l=~/\G(\s+)/gc
            # skip
            next
        #---- operator ----
        $elif $l=~/\G(=[~=]?)/gc
            $if $1 eq '=~'
                $call check_exp_regex
            $else
                $token="$1"
                $type="operator"
        $elif $l=~/\G([=+\-\*\/%\^\&\|><\?,\.!~:]+)/gc
            $token=$1
            $type="operator"
        $elif $l=~/\G;/
            #---- semicolon marks vanilla C statement ----
            return $l
        $else
            #---- comments? ------
            last

    # ---------------------------------------- 
    subcode: check_expression_push
        check_exp_precedence:
        $if !@stack
            $call exp_push, $token, $type
        $elif $type=~/^op/
            $call is_operator
        $elif $type=~/^atom/
            $call is_atom
        # ----------------------
        subcode: is_operator
            $if $token eq "++" or $token eq "--"
                #---- postfix -----------------
                $call exp_pop, $exp
                $call exp_push, "$exp$token", "atom-postfix"
            $elif $token eq ":"
                #---- label -----------------
                $call exp_pop, $exp
                $call exp_push, "$exp$token ", "atom-label"
            $elif $token=~/^(.*)=$/ and $1!~/^[!><=]$/
                $call is_assignment
            $else
                #---- other op ----------------
                $call exp_push, $token, $type
            # ---------------
            subcode: is_assignment
                $assign=$token
                $if $left
                    $call warn,  Chained assignment not supported [left=$left, assign=$assign]!
                $if !$1 and @stack==1 and $types[0] eq "atom-("
                    $left=substr($stack[0], 1, -1)
                    $call exp_pop, undef
                $else
                    $left=join("", @stack)
                    @stack=()
                    @types=()
                $if $assign eq "="
                    $call process_expression_cache, $left
        # -----------------
        subcode: is_atom
            $if $(type1) =~/^op/
                $if $(type2) !~/^atom/
                    #---- unary -------------
                    $call exp_pop, $op
                    $token=$op.$token
                    $type="atom-unary"
                    goto check_exp_precedence
                $else
                    #---- binary -------------
                    $if $stack[-1] eq ","
                        $stack[-1]="$stack[-1] "
                    $elif $stack[-1]=~/^(eq|ne|lt|le|gt|ge)$/i
                        $call check_exp_string_op
                    $elif $stack[-1]=~/^\S+$/ && $stack[-1] ne "::"
                        $if @stack>1 and $stack[-2]!~/^[\(\[\{]$/
                            $stack[-1]=" $stack[-1] "
                    $call exp_push, $token, $type
            $elif $(type1) =~/^atom/
                $if $stack[-1]=~/\w$/
                    #---- e.g. unsigned int, struct something
                    $stack[-1].=" $token"
                $else
                    $stack[-1].=$token
                    $if $(type1) eq "atom-("
                        #---- type cast ---- 
                        $types[-1] = "atom"
            $else
                #---- open bracket ---------
                $call exp_push, $token, $type

subcode: check_exp_bracket
    my $close=$1
    my $open
    $if $close eq ')'
        $open='('
    $if $close eq ']'
        $open='['
    $if $close eq '}'
        $open='{'

    &call find_open_bracket
        $if $(type1) =~/^atom/ and $stack[-1]!~/^[0-9'"]/ and $stack[-1]=~/(\w+)$/
            $call id_bracket
        $else
            $token=$open.$exp.$close
            $type="atom-$open"
    # ------------------------
    subcode: find_open_bracket
        my $n=@stack
        my $i_open
        $for $i=$n:0
            $if $stack[$i] eq $open
                $i_open=$i
                break
        $if defined $i_open and $stack[$i_open] eq $open
            my $exp=join("", splice(@stack, $i_open+1))
            pop @stack
            splice(@types, $i_open)
            BLOCK
        $else
            $call error_unbalanced
    # ------------------
    subcode: id_bracket
        my $identifier=$1
        $call exp_pop, $primary
        my $processed
        $type="atom-exp"
        $if $open eq '('
            $call check_exp_fcall, $identifier, $exp
        $elif $open eq '['
            $call check_exp_subscript, $identifier, $exp
        $elif $open eq '{'
            $call check_exp_dict, $identifier, $exp
        $if !$processed
            $if $open eq '['
                $exp=~s/ +//g
            $token=$primary.$open.$exp.$close
    # ---------------------
    subcode: error_unbalanced
        $call warn, Error checking expression $l, unbalanced brackets
        print join(" -- ", @stack), "\n"
        $token=join("", @stack)
        $type="atom-broken"

#---------------------------------------- 
subcode: check_exp_exponential
    $call exp_pop, undef
    $call exp_pop, $primary
    $token=$primary. (" * $primary" x ($token-1))
    $type="atom-exp"

subcode: check_exp_member
    $if $(type1) =~/^op/ && ($stack[-1] eq "." or $stack[-1] eq "->")
        $if $(type2) !~/^atom/
            #error
        $token=join("", splice(@stack, -2)).$token
        $type="atom-exp"
        splice(@types, -2)

subcode: check_exp_tuple_member
    $call exp_pop, $primary
    $token="$primary.a$token"
    $type="atom-exp"

#---------------------------------------- 
subcode: check_exp_callsub
    $if $stack[-1] eq "." and $stack[-2]
        #---- darray.$push -----
        my $varname=$stack[-2]
        my $arg=$'
        $if $l=~/\G\((.*)\)/gc
            $arg=$1
        my $var=find_var($varname)
        my $call_line
        $if !$var
            $if $class_names{$varname}
                $call_line = $varname."_".$method
            $else
                $call warn, Variable $varname not found
        $elif $var->{class}
            my $subname=$var->{class}."_".$method
            $call_line="$subname, $varname"

        $if $call_line
            $arg=~s/^\s+//
            $if length($arg)>0
                $call_line .= ", $arg"
            $call exp_callsub

    $elif @stack==1 and $method eq "call"
        my $call_line= $'
        $call_line=~s/^\s*//
        $call exp_callsub

    $call warn, Method $method not defined [$l]
    $call exp_push, "\$$method", "atom-unknown"

subcode: exp_callsub
    undef $yield
    MyDef::compileutil::call_sub($call_line)
    $if $yield
        $call exp_pop, undef
        $call exp_pop, undef
        $call exp_push, $yield, "atom"
        last
    $else
        return

#---------------------------------------- 
subcode: check_exp_fcall(primary, token)
    # print "fcall: $(primary)  $(token)\n"
    $if $(primary)=~/^(sin|cos|tan|asin|acos|atan|atan2|exp|log|log10|pow|sqrt|ceil|floor|fabs)$/
        add_include("math")
        $objects{"libm"}=1
    $elif $(primary)=~/^(mem|str)[a-z]+$/
        add_include("string")
    $elif $(primary)=~/^(malloc|free)$/
        add_include("stdlib")
    $else
        $if $function_autolist{$(primary)}
            $call add_list_function, $(primary)
        $if $function_defaults{$(primary)}
            #-- prepend: essentiall implements lexical function parameters
            $if $function_defaults{$(primary)}=~/^prepend:(.*)/
                $if $(token) eq ""
                    $(token)=$1
                $else
                    $(token)=$1.",".$(token)
            $elif $function_defaults{$(primary)}=~/^append:(.*)/
                $if $(token) eq ""
                    $(token)=$1
                $else
                    $(token)=$(token).",".$1
            $else
                # Not Implemented

subcode: check_exp_subscript(primary, token)
    # print "subscript: $(primary)  $(token)\n"
    $if $(token)=~/^-/
        my $var=find_var($(primary))
        $if $var and $var->{dimension}
            $token=$(primary).'['.$var->{dimension}."$(token)".']'
            #$(token)=-$(token)
            #$token="\$($var->{class}_index_negative:$(primary),$(token)\)"
            #MyDef::compileutil::expand_macro(\$token)
            $type="atom"
            $call exp_pop, undef
            $call exp_pop, undef
            $processed=1


subcode: check_exp_dict(primary, token)
    $processed=1
    $token=$primary.$open.$exp.$close
    $cache{$token}=1

subcode:: check_expression_init
    #- %cache, for parsing hash: T{key}
    #--        such expression may involve sub call, 
    #--        so mulitiple invocation would be bad
    my %cache

subcode: process_expression_cache(t)
    $if %cache
        $foreach $t in keys %cache
            $if $t=~/(\w+)\{(.*)\}/
                my ($t1, $t2)=($1, $2)
                my $var=find_var($t1)
                $if $var and $var->{class}
                    $(if:t=$left)
                        my $call_line=$var->{class}."_lookup_left, $t1, $t2"
                    $(else)
                        my $call_line=$var->{class}."_lookup, $t1, $t2"
                    undef $yield
                    MyDef::compileutil::call_sub($call_line)
                    my $pos=-1
                    my $len=length $t
                    $while ($pos=index($(t), $t, $pos))>-1
                        substr($(t), $pos, $len)=$yield

#---------------------------------------- 
subcode: check_exp_string_op
    add_include("<string.h>")
    $call exp_pop, $op
    $call exp_pop, $exp
    my %str_op=(eq=>"==", ne=>"!=", lt=>"<", gt=>">", le=>"<=", ge=>">=")
    my $sop=$str_op{lc($op)}.' 0'
    $if $type eq "atom-string"
        $if $token=~/^"(.*)"/
            $if ord($op) < 91
                # upper case
                $token= "strcmp($exp, $token) $sop"
            $else
                my $len=length($1)
                $token= "strncmp($exp, $token, $len) $sop"
        $else
            $token= "strcmp($exp, $token) $sop"
        $type="atom"
    $else
        my $var=find_var($token)
        $if $var and $var->{strlen}
            $token="strncmp($exp, $token, $var->{strlen}) $sop"
            $type="atom"
        $else
            $token="strcmp($exp, $token) $sop"
            $type="atom"

#---------------------------------------- 
subcode: check_exp_regex
    $if $(type1) =~/^atom/
        $call exp_pop, $atom
        my $func="regex"
        my $pat
        $(set:pat=(?:[^\/\\]|\\.)*)
        $if $l=~/\G\s*(\/$(pat)\/\w*)/gc
            $pat=$1
        $elif $l=~/\G\s*(s\/$(pat)\/$(pat)\/\w*)/gc
            $pat=$1
        $else
            $call warn, =~ missing regex pattern
        my $regex_plugin=$plugin_condition{regex}
        $if !$regex_plugin
            $call warn, =~ missing regex plugin
        my $param="$atom=~$pat"
        # $print "$green regex $param"
        my $condition
        $call parsecode_run_eval, $regex_plugin
        $token=$condition
        $type="atom-regex"
    $else
        $call warn, =~ missing string variable

#--------------------------------------
subcode: exp_push(exp, type)
    push @stack, $(exp)
    push @types, $(type)

subcode: exp_pop(assign)
    $(if:assign=undef)
        pop @stack
        pop @types
    $(else)
        my $(assign)=pop @stack
        pop @types

#---------------------------------------- 
subcode: debug_stack
    $print "----\n"
    $for $i=0:@stack
        $print "    $types[$i]: $stack[$i]"

