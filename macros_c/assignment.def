fncode: do_assignment($left, $right)
    $if !defined $right
        my $type=get_var_type($left)
        $if $type and $type ne "void"
            $right=type_default($type)
            $call done_assignment
        return
    $if !defined $left
        return

    $if $debug eq "type"
        $print $cyan do_assignment: $left = $right

    $call @check_tuple_assignment

    my $type;
    $if $left=~/^(\w.*)\s+(\S+)$/
        $type=$1;
        $left=$2;

    $if $left=~/^(\w+)(.*)/
        $if $protected_var{$1}
            $call warn, Variable $1 protected (unmutable)
        $if !$2
            auto_add_var($left, $type, $right)
    $else
        # ToDo, complex left value

    $call done_assignment

    # -------------------------
    subcode: done_assignment
        push @$out, "$left = $right;";
        return

    # -------------------------
    subcode: check_tuple_assignment
        my @left_list=MyDef::utils::proper_split($left)
        my @right_list=MyDef::utils::proper_split($right)
        $call @debug
        $if @left_list>1 or @right_list>1
            $if @left_list==1
                $call assign_one_from_many
            $elif @right_list==1
                $call assign_many_from_one
            $else
                $for $i=0:@left_list
                    do_assignment($left_list[$i], $right_list[$i])
            return

        # ---------------------------------------- 
        subcode: debug
            $if $debug eq "type"
                printf "check_tuple_assignment: left $left:%d, right $right:%d\n", $#left_list+1, $#right_list+1

        subcode: assign_one_from_many
            my $type=get_var_type($left)
            # $print "left type [$type]"
            $if $type=~/^struct (\w+)$/
                $call assign_to_struct, $1, 0
            $elif $type=~/^struct (\w+)\s*\*$/
                $call assign_to_struct, $1, 1
            $elif $type=~/^(.*?)\s*\*$/ 
                # -- assign to array ----
                $for $i=0:@right_list
                    do_assignment("$left\[$i\]", $right_list[$i])
            $else
                $call warn, tuple assigned to scalar
                do_assignment($left, $right_list[0])

        subcode: assign_many_from_one
            $if $right=~/^(\w+)\((.*)\)/
                $call assign_from_function_tuple, $1, $2
            $else
                my $type=get_var_type($right)
                $if $type=~/^struct (\w+)$/
                    $call assign_from_struct, $1, 0
                $elif $type=~/^struct (\w+)\s*\*$/
                    $call assign_from_struct, $1, 1
                $elif $type=~/^(.*?)\s*\*$/ 
                    $for $i=0:@right_list
                        do_assignment($left_list[$i], "$right\[$i\]")
                $else
                    $call warn, scalar assigned to tuple
                    $for $i=0:@right_list
                        do_assignment($left_list[$i], $right)

        subcode: assign_to_struct(name, is_ref)
            # $print "assign_to_struct $(name)"
            my $s_list=$structs{$(name)}->{list}
            my $i=0
            $foreach $p in @$s_list
                $(if:is_ref=1)
                    do_assignment("$left->$p", $right_list[$i])
                $(else)
                    do_assignment("$left.$p", $right_list[$i])
                $i++

        subcode: assign_from_struct(name, is_ref)
            $if !$structs{$(name)}
                $call warn, structure $(name) not defined yet
            $else
                my $s_list=$structs{$(name)}->{list}
                my $i=0
                $foreach $p in @$s_list
                    $(if:is_ref=1)
                        do_assignment($left_list[$i], "$right->$p")
                    $(else)
                        do_assignment($left_list[$i], "$right.$p")
                    $i++

        subcode: assign_from_function_tuple(fname, param)
            #-- maybe push the check to the end
            my ($f, $p)=($(fname), $(param))
            $foreach $t in @left_list
                $p.=", \&$t"
            push @$out, "$f($p);"



