
subcode:: c_support_subs
    $sub declare_struct 
	my ($name, $param)=@_;
	my ($s_list, $s_hash)
	$if $structs{$name}
	    $s_list=$structs{$name}->{list}
	    $s_hash=$structs{$name}->{hash}
	    $s_init=$s_hash->{"-init"}
	    $s_exit=$s_hash->{"-exit"}
	$else
	    $s_init=[]
	    $s_exit=[]
	    $s_list=[]
	    $s_hash={"-init"=>$s_init, "-exit"=>$s_exit}
	    $structs{$name}={list=>$s_list, hash=>$s_hash}
	    push @struct_list, $name

	my @plist=split /,\s+/, $param;
	$foreach my $p in @plist
	    my ($name, $type, $needfree);
	    $if $p=~/^@/
		$needfree=1
		$p=$';

	    $if $p=~/(.*?)(\S+)\s*=\s*(.*)/
		$p="$1$2";
		push @$s_init, "p->$2=$3;";

	    $if $p=~/(.*\S)\s+(\S+)\s*$/
		$type=$1;
		$name=$2;
		$p=$2
	    $else
		$name=$p;
		$if $p eq "next" or $p eq "prev"
		    $type="struct $name\_node *";
		    $if !@$s_init
			push @$s_init, "p->$p=NULL;";
		$elif $p eq "list"
		    $type="struct $name\_node";
		$elif $p eq "tail"
		    $type="struct $name\_node *";
		    $if !@$s_init
			push @$s_init, "p->$p=&p->list;";
		$elif $fntype{$p}
		    $type="function";
		$elif $p
		    $type=get_c_type($p);
	    # -- init & exit
	    $foreach my $fh in @func_var_hooks
		$if $fh->{var_check}->($type)
		    my $init=$fh->{var_init}->($type, "p->$name") 
		    $if $init
			push @$s_init, "p->$p=$init;";
		    my $exit=$fh->{var_release}->($type, "p->$name", "skipcheck")
		    $if $exit
			$foreach my $l in @$exit
			    push @$s_exit, $l;
	    # ----
	    $if !$s_hash->{$name}
		push @$s_list, $name
	    $s_hash->{$name}=$type
	    $if $needfree
		$s_hash->{"$name-needfree"}=1

    $sub get_struct_element_type 
	my ($svar, $evar)=@_;
	my $stype=get_var_type($svar);
	$if $stype=~/struct\s+(\w+)/
	    my $struc=$structs{$1};
	    $if $struc->{hash}->{$evar}
		return $struc->{hash}->{$evar}
	return "void";

    $sub struct_free
	my ($out, $ptype, $name)=@_;
	my $type=pointer_type($ptype);
	$if $type=~/struct\s+(\w+)/ and $structs{$1}
	    $s_list=$structs{$1}->{list}
	    $s_hash=$structs{$1}->{hash}
	    $foreach my $p in @$s_list
		$if $s_hash->{"$p-needfree"}
		    struct_free($out, $s_hash->{$p}, "$name->$p")
	push @$out, "free($name);";
