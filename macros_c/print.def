subcode:: parsecode_func_other
    $elif $func eq "fmt"
	my ($n, $fmt)=fmt_string($param)
	MyDef::compileutil::set_current_macro("fmt_n", $n)
	MyDef::compileutil::set_current_macro("fmt", $fmt)
	return
    $elif $func eq "print"
	$if !$param
	    push @$out, "puts(\"\");"
	$else
	    $param=~s/^\s+//
	    $if $param=~/usesub:\s*(\w+)/
		$print_type=$1
	    $else
		#--- fmt_string, add newline
		my ($n, $fmt)=fmt_string($param, 1)
		$if $print_type==1
		    $if $n==0
			push @$out, "puts($fmt);"
		    $elif $fmt=~/^"%s\\n", (.*)/
			push @$out, "puts($1);"
		    $else
			push @$out, "printf($fmt);"
		$elif $print_type
		    MyDef::compileutil::call_sub("$print_type, $fmt")
	return

#---------------------------------------- 
subcode:: c_support_subs
    $sub fmt_string($str, $add_newline)
	# print "fmt_string: [$str]\n"
	my @pre_list
	$if $str=~/^\s*\"(.*)\"\s*,\s*(.*)$/
	    $str=$1
	    @pre_list=MyDef::utils::proper_split($2)
	    $foreach $a in @pre_list
		$a=check_expression($a)
	$elif $str=~/^\s*\"(.*)\"\s*$/
	    $str=$1

	$if $add_newline and $str=~/(.*)-$/
	    $add_newline=0
	    $str=$1

	my %colors=(red=>31,green=>32,yellow=>33,blue=>34,magenta=>35,cyan=>36)

	my @fmt_list
	my @arg_list

	my @group
	my $flag_hyphen=0
	&call parse_loop, $str
	    &call if_lex, %
		&call if_lex, %
		    push @fmt_list, '%%'
		&call if_lex, [-+ #]*[0-9]*(\.\d+)?[diufFeEgGxXoscpaAn]
		    #---------------------------------------- 
		    push @arg_list, shift @pre_list
		    push @fmt_list, "%$&"
		$else
		    push @fmt_list, '%%'
	    &call if_lex, \$
		&call if_lex, (red|green|yellow|blue|magenta|cyan)
		    #---------------------------------------- 
		    #- $print $green ---------
		    push @fmt_list, "\\x1b[$colors{$1}m"
		    &call if_lex, \{
			push @group, $1
		&call if_lex, (\w+)
		    #---------------------------------------- 
		    my $v=$1
		    &call if_lex, (\[.*?\])
			$v.=$1
		    &call if_lex, (\{.*?\})
			$v.=$1
			$v=check_expression($v)
		    #- $print $var ---------
		    push @arg_list, $v
		    push @fmt_list, get_var_fmt($v, 1)
		    &call if_lex, -
			# print $var-follow ----
		&call if_lex, \{(.*?)\}
		    push @arg_list, $1
		    push @fmt_list, get_var_fmt($1, 1)
		$else
		    push @fmt_list, '$'
	    &call if_lex, \\\$
		push @fmt_list, '$'
	    &call if_lex, \}
		#---------------------------------------- 
		#- $print $green{some text}
		$if @group
		    pop @group
		    $if !@group
			push @fmt_list, "\\x1b[0m"
		    $else
			my $c=$group[-1]
			push @fmt_list, "\\x1b[$colors{$c}m"
		$else
		    push @fmt_list, '}'
	    &call if_lex, [^%\$\}]+
		push @fmt_list, $&

	$if @pre_list
	    warn "Extra fmt arg list: ", join(", ", @pre_list), "\n"

	$if @arg_list and $add_newline
	    my $tail=$fmt_list[-1]
	    $if $tail=~/(.*)-$/
		$fmt_list[-1]=$1
	    $elif $tail!~/\\n$/
		push @fmt_list, "\\n"

	$if !@arg_list
	    return (0, '"'.join('',@fmt_list).'"')
	$else
	    my $vcnt=@arg_list
	    return ($vcnt, '"'.join('',@fmt_list).'", '.join(', ', @arg_list))

# -------------------------------------
subcode:: c_support_subs
    $sub debug_dump($param, $prefix, $out)
	my %colors=(red=>31,green=>32,yellow=>33,blue=>34,magenta=>35,cyan=>36)
	my @vlist=split /,\s+/, $param;
	my @a1;
	my @a2;
	$foreach my $v in @vlist
	    $if $v=~/^(\w+):(.*)/
		my ($color,$v)=($1,$2)
		push @a2, $v;
		push @a1, "\\x1b[$colors{$color}m" . "$v=".get_var_fmt($v, 1) . "\\x1b[0m"
	    $else
		my $fmt=get_var_fmt($v)
		$if !defined $fmt
		    push @a1, $v
		$else
		    push @a2, $v;
		    push @a1, "$v=".get_var_fmt($v, 1)
	$if $prefix
	    $if $prefix=~/(red|green|yellow|blue|magenta|cyan)/
		push @$out, "printf(\"\x1b[$colors{$prefix}m\");"
		push @$out, "printf(\"    :".join(", ", @a1)."\\n\", ".join(", ", @a2).");";
		push @$out, "printf(\"\x1b[0m\");"
	    $else
		push @$out, "fprintf(stdout, \"    :[$prefix] ".join(", ", @a1)."\\n\", ".join(", ", @a2).");";
	$else
	    push @$out, "fprintf(stdout, \"    :".join(", ", @a1)."\\n\", ".join(", ", @a2).");";
	$includes{"<stdio.h>"}=1;

