subcode: c_dump_init
    my @dump_init

    #  @ <-- $dump->{block_init} <-- DUMP_STUB global_init
    $dump->{block_init}=\@dump_init
    my $global_init=MyDef::compileutil::get_named_block("global_init")
    unshift @$global_init, "INCLUDE_BLOCK block_init"

    # @ --> $dump_out
    my $dump_out=\@dump_init

    $if %objects
        push @$dump_out, "/* link: $lib_list $obj_list */\n"

    $call dump_includes
    $call dump_defines
    $call dump_enums
    $call dump_typedefs
    $call @dump_classes
    $call dump_structs
    $call dump_function_declares
    $call dump_declares
    $call dump_structs_functions
    $call dump_globals
    $call dump_code_list

subcode: dump_classes
    $global $dump_classes
    $if $dump_classes
        $foreach $l in @$dump_classes
            push @$dump_out, $l

# ---- Includes ----
subcode:: c_init
    $global @include_list
    $global %includes, %objects
    @include_list=()
    %includes=()
    %objects=()

fncode: add_include($l)
    my @flist=split /,\s*/, $l
    $foreach $f in @flist
        my $key
        $if $f=~/\.\w+$/
            $key="\"$f\""
        $elif $f=~/^[A-Z_]+/
            # e.g. freetype2 #include FT_FREETYPE_H
            $key=$f
        $elif $f=~/^".*"$/
            $key=$f
        $elif $f=~/^<.*>$/
            $key=$f
        $elif $f=~/^\S+$/
            $key="<$f.h>"
        $else
            $key=$f
        $if !$includes{$key}
            $includes{$key}=1
            push @include_list, $key

subcode: dump_includes
    $if @include_list
        $foreach $k in @include_list
            push @$dump_out, "#include $k\n";
        push @$dump_out, "\n";

# ---- Defines ----
subcode:: c_init
    $global $define_id_base, @define_list, %defines
    $define_id_base=1000
    @define_list=()
    %defines=()

fncode: add_define($name, $var)
    $if !defined $defines{$name}
        push @define_list, $name
    $else
        warn "Duplicate define $name: [$defines{$name}] -> [$var]\n"
    $defines{$name}=$var

subcode: dump_defines
    $if $page->{use_bool} and !$page->{skip_bool}
        push @$dump_out, "typedef int bool;\n"
        push @$dump_out, "#define true 1\n"
        push @$dump_out, "#define false 0\n"
        push @$dump_out, "\n";
    $if @define_list
        $foreach $k in @define_list
            $call dump_define, $k
        push @$dump_out, "\n";

subcode: dump_define(k)
    push @$dump_out, "#define $(k) $defines{$(k)}\n";

# ---- TypeDefs ----
subcode:: c_init
    $global @typedef_list, %typedef_hash
    @typedef_list=()
    %typedef_hash=()

subcode:: support_subs
    $sub add_typedef($param)
        $if $param=~/(.*)\s+(\w+)\s*$/
            $typedef_hash{$2}=$1
            push @typedef_list, $2
        $elif $param=~/\(\*\s*(\w+)\)/
            $typedef_hash{$1}=$param
            push @typedef_list, $1

subcode: dump_typedefs
    $if @typedef_list
        $foreach $k in @typedef_list
            $call dump_typedef, $k
        push @$dump_out, "\n";

subcode: dump_typedef(k)
    my $t=$typedef_hash{$(k)}
    $if $t=~/\(\*\s*(\w+)\)/
        push @$dump_out, "typedef $t;"
    $else
        push @$dump_out, "typedef $t $(k);"

# ---- Enums ----
subcode:: c_init
    $global %enums, @enum_list
    %enums=()
    @enum_list=()

subcode: dump_enums
    $if @enum_list
        $foreach $name in @enum_list
            my $t=$enums{$name};
            $if $name=~/^ANONYMOUS/
                push @$dump_out, "enum {$t};\n";
            $elif $name=~/^typedef,\s*(\w+)/
                push @$dump_out, "typedef enum {$t} $1;\n";
            $elif $name=~/^,\s*(\w+)/ 
                push @$dump_out, "enum {$t} $1;\n";
            $else
                push @$dump_out, "enum $name {$t};\n";
        push @$dump_out, "\n";

# ---- Global Variables ----
subcode: dump_globals
    $if @$global_list
        $foreach $name in @$global_list
            my $v=$global_hash->{$name}
            my $decl=var_declare($v)
            $if $decl
                push @$dump_out, "$decl;\n";
        push @$dump_out, "\n";

#---- Function Delcares ----
subcode:: c_init
    $global @function_declare_list
    @function_declare_list=()

subcode: dump_function_declares
    $foreach $t in @function_declare_list
        my $func=$functions{$t}
        $if !$func->{skip_declare}
            $call declare, $func
    $if $#$dump_out>-1 and $dump_out->[-1] ne "\n"
        push @$dump_out, "\n";

    # ---------------------
    subcode: declare(k)
        $(if:k!=$func)
            my $func=$functions{$(k)}
        push @$dump_out, $func->{declare}.";\n"

# ---- Declares ----
subcode:: c_init
    $global %declare_hash, @declare_list
    %declare_hash=()
    @declare_list=()

subcode:: do_declare(param)
    $if !$declare_hash{$(param)}
        push @declare_list, $(param)
        $declare_hash{$(param)} = 1

subcode: dump_declares
    $foreach $l in @declare_list
        $if $l!~/;\s*$/
            $l.=";"
        push @$dump_out, "$l\n";
    $if @declare_list
        push @$dump_out, "\n";

# ---- Structures ----
subcode:: c_init
    $global %structs, @struct_list
    %structs=()
    @struct_list=()

subcode: dump_structs
    $foreach $name in @struct_list
        my $s_list=$structs{$name}->{list}
        my $s_hash=$structs{$name}->{hash}
        $if $s_hash->{"-opaque"}
            push @$dump_out, "struct $name;\n"
        $else
            $if $s_hash->{"-public"}
                push @$dump_out, "struct $name { /*public*/\n";
            $else
                push @$dump_out, "struct $name {\n";
            my $indent=4
            my $sp=' 'x$indent
            $foreach $p in @$s_list
                my $type=$s_hash->{$p}
                $if $type eq "function"
                    push @$dump_out, "$sp".$fntype{$p}.";\n";
                $elif $type eq "union"
                    my $uhash=$s_hash->{-union}
                    push @$dump_out, "$sp"."union {\n"
                    $sp=' 'x($indent+4)
                    $foreach %$uhash
                        push @$dump_out, "$sp$v $k;\n"
                    $sp=' 'x($indent)
                    push @$dump_out, "$sp} $p;\n"
                $else
                    push @$dump_out, "$sp$type $p;\n";
            push @$dump_out, "};\n\n";

#---- Simple Constructors/Destructors ----------------------------------------
subcode: dump_structs_functions
    $foreach $name in @struct_list
        my ($param, $init)=get_struct_constructor($name)
        $if defined $init
            $if !@$param
                push @$dump_out, "void $name\_constructor(struct $name* p){\n";
            $else
                my $param_line=join(", ", @$param)
                push @$dump_out, "void $name\_constructor(struct $name* p, $param_line){\n";

            $foreach $l in @$init
                push @$dump_out, "    p->$l;\n"
            push @$dump_out, "}\n";
        #------------------------------
        my $s_list=$structs{$name}->{list}
        my $s_hash=$structs{$name}->{hash}
        my $s_exit=$s_hash->{"-exit"}
        $if $s_exit and @$s_exit
            push @$dump_out, "void $name\_destructor(struct $name* p){\n";
            $foreach $l in @$s_exit
                push @$dump_out, "    $l\n";
            push @$dump_out, "}\n";
        # ------------------------
    $if $#$dump_out>-1 and $dump_out->[-1] ne "\n"
        push @$dump_out, "\n";

# ---- Init codes ----
subcode:: c_init
    $global @initcodes
    @initcodes=()

subcode: dump_code_list
    $foreach my $l in @initcodes
        push @$dump_out, "$l\n";
    $if @initcodes
        push @$dump_out, "\n";

