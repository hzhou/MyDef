subcode: c_dump_init
    my @dump_init
    $dump->{block_init}=\@dump_init
    unshift @$out, "INCLUDE_BLOCK block_init"

    $call dump_includes
    $call dump_defines
    $call dump_enums
    $call dump_structs
    $call dump_typedefs
    $call dump_function_declares
    $call dump_declares
    $call dump_structs_functions
    $call dump_globals
    $call dump_code_list

# ---- Includes ----
subcode:: package_globals
    our %includes
    our %objects
    $sub add_include 
	my $l=shift;
	my @tlist=split /,/, $l;
	$foreach my $t in @tlist
	    $if $t=~/(\S+)/
		$includes{"<$1>"}=1;

subcode:: c_init
    %includes=()
    %objects=()

subcode: dump_includes
    my $cnt=0
    $while my ($k, $t)=each %includes
	push @dump_init, "#include $k\n";
	$cnt++
    $if $cnt>0
	push @dump_init, "\n";

# ---- Defines ----
subcode:: package_globals
    our $define_id_base=1000;
    our @define_list;
    our %defines;

subcode:: c_init
    $define_id_base=1000
    @define_list=()
    %defines=()

subcode:: support_subs
    $sub add_define($name, $var)
	$if !defined $defines{$name}
	    push @define_list, $name
	$defines{$name}=$var

subcode: dump_defines
    my $cnt=0
    $foreach $k in @define_list
	push @dump_init, "#define $k $defines{$k}\n";
	$cnt++
    $if $cnt>0
	push @dump_init, "\n";

# ---- TypeDefs ----
subcode:: package_globals
    our @typedef_list
subcode:: c_init
    @typedef_list=()

subcode: dump_typedefs
    $if @typedef_list
	$foreach $k in @typedef_list
	    push @dump_init, "typedef $k;"
	push @dump_init, "\n";

# ---- Enums ----
subcode:: package_globals
    our %enums;
    our @enum_list;

subcode:: c_init
    %enums=()
    @enum_list=()

subcode: dump_enums
    my $cnt=0
    $foreach $name in @enum_list
	my $t=$enums{$name};
	$if $name=~/^,\s*(\w+)/ 
	    push @dump_init, "enum {$t} $1;\n";
	$else
	    push @dump_init, "enum $name {$t};\n";
	$cnt++
    $if $cnt>0
	push @dump_init, "\n";

# ---- Global Variables ----
subcode:: package_globals
    our $global_type={};
    our $global_flag={};
    our @global_list;

subcode:: c_init
    $global_type={}
    $global_flag={}
    @global_list=()

subcode: dump_globals
    my $cnt=0
    $foreach my $v in @global_list
	$call dump_global
    $if $cnt>0
	push @dump_init, "\n";

subcode: dump_global
    $call dump_global_std

subcode: dump_global_std
    push @dump_init, "$v;\n";
    $cnt++

# ---- Function Delcares ----
subcode:: package_globals
    our @function_declare_list

subcode:: c_init
    @function_declare_list=()

subcode: dump_function_declares
    my $cnt=0
    $foreach my $t in @function_declare_list
	my $func=$functions{$t};
	$if !$func->{skip_declare}
	    my $name=$func->{name};
	    my $ret_type=$func->{'ret_type'};
	    if(!$ret_type){$ret_type="void";}
	    my $paramlist=$func->{'param_list'};
	    my $param=join(', ', @$paramlist);
	    push @dump_init, "$ret_type $name($param);\n";
	    $cnt++
    $if $cnt>0
	push @dump_init, "\n";

# ---- Declares ----
subcode:: package_globals
    our @declare_list

subcode:: c_init
    @declare_list=()

subcode: dump_declares
    $foreach my $l in @declare_list
	push @dump_init, "$l\n";
    $if @declare_list
	push @dump_init, "\n";

# ---- Structures ----
subcode:: package_globals
    our %structs;
    our @struct_list;

subcode:: c_init
    %structs=()
    @struct_list=()

subcode: dump_structs
    $foreach my $name in @struct_list
	push @dump_init, "struct $name {\n";
	my $s_list=$structs{$name}->{list}
	my $s_hash=$structs{$name}->{hash}
	my $i=0;
	$foreach my $p in @$s_list
	    $i++;
	    $if $s_hash->{$p} eq "function"
		push @dump_init, "\t".$fntype{$p}.";\n";
	    $else
		push @dump_init, "\t$s_hash->{$p} $p;\n";
	push @dump_init, "};\n\n";

subcode: dump_structs_functions
    my $cnt=0
    $foreach my $name in @struct_list
	my $s_hash=$structs{$name}->{hash}
	my $s_init=$s_hash->{"-init"}
	$if @$s_init
	    push @dump_init, "void $name\_constructor(struct $name* p){\n";
	    foreach my $l(@$s_init){
		push @dump_init, "    $l\n";
	    }
	    push @dump_init, "}\n";
	    $cnt++
	my $s_exit=$s_hash->{"-exit"}
	$if @$s_exit
	    push @dump_init, "void $name\_destructor(struct $name* p){\n";
	    foreach my $l(@$s_exit){
		push @dump_init, "    $l\n";
	    }
	    push @dump_init, "}\n";
	    $cnt++
	# ------------------------
    $if $cnt>0
	push @dump_init, "\n";

# ---- Init codes ----
subcode:: package_globals
    our @initcodes

subcode:: c_init
    @initcodes=()

subcode: dump_code_list
    $foreach my $l in @initcodes
	push @dump_init, "$l\n";
    $if @initcodes
	push @dump_init, "\n";

