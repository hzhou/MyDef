
subcode:: support_subs
    sub getfieldtype {
	my ($ff, $colname)=@_;
	my $type;
	#if($colname=~/_id/){print "$colname, $ff->{type}, $ff\n";}
	if($ff->{type}){
	    return $ff->{type};
	}
	elsif($colname=~/_id$/){
	    $type="uint";
	}
	elsif($colname=~/_date$/ or $colname=~/^date_/){
	    $type="date";
	}
	elsif($colname eq "time_inserted" or $colname eq "time_in" or $colname eq "time_out"){
	    $type="now"
	}
	elsif($colname eq "date_inserted" ){
	    $type="today"
	}
	elsif($colname=~/_flag$/ or $colname=~/^flag_/){
	    $type="boolean";
	}
	elsif($colname=~/_quantity$/){
	    $type="int";
	}
	elsif($colname=~/^number_/){
	    $type="int";
	}
	elsif($colname eq "password"){
	    $type="password";
	}
	elsif($colname =~/phone/){
	    $type="phone";
	}
	elsif($colname eq 'city'){
	    $type='city';
	}
	elsif($colname eq 'state'){
	    $type='state';
	}
	elsif($colname =~ /zip(code)?/){
	    $type='zip'
	}
	elsif($colname =~ /email/){
	    $type='email';
	}
	elsif($colname =~ /city_state_zip/){
	    $type='city_state_zip';
	}
	$ff->{type}=$type;
	return $type;
    }

    sub sql_createtable {
	my ($tablename)=@_;
	my $fields=$MyDef::def->{fields};
	my $table=$MyDef::def->{fieldsets}->{$tablename};
	my $flist=$table->{fields};
	my $lastf=$$flist[-1];
	my $name=$table->{name};
	if(!$name){$name=$tablename;}
	my @out;
	push @out,  "DROP TABLE IF EXISTS $name;\n";
	push @out,  "CREATE TABLE $name (\n";
	if($table->{useid}){
	    push @out,  "\tid INT UNSIGNED NOT NULL AUTO_INCREMENT,\n";
	    push @out,  "\tPRIMARY KEY (id),\n";
	}
	if($table->{timestamp}){
	    push @out, "\ttimestamp TIMESTAMP,\n";
	}
	my $unique;
	if($table->{unique}){
	    my @list=split /,\s*/, $table->{unique};
	    push @out, "\tUNIQUE (".join(", ", @list)."),\n";
	}
	if($table->{fulltext}){
	    push @out, "\tFULLTEXT (".$table->{fulltext}."),\n";
	}
	if($table->{key}){
	    my @list=split /,\s*/, $table->{key};
	    push @out, "\tPRIMARY KEY (".join(", ", @list)."),\n";
	}
	if($table->{insertdate}){
	    push @out, "\tdate_inserted DATE,\n";
	}
	foreach my $f (@$flist){
	    my $size=50;
	    my $type;
	    my $defname=$f;
	    my $colname=$f;
	    if($f=~/(\w+)\((\w+)\)/){
		$defname=$1;
		$colname=$2;
	    }
	    elsif($f=~/$name\_(\w+)/){
		$defname=$f;
		$colname=$1;
	    }
	    push @out,  "\t$colname ";
	    my $ff=$fields->{$defname};
	    $type=getfieldtype($ff, $colname);
	    $size=getfieldsize($ff, $type);
	    if($type eq "password"){
		push @out,  "VARCHAR($size) BINARY";
	    }
	    elsif($type eq "datetime"){
		push @out,  "DATETIME";
	    }
	    elsif($type eq "curdate"){
		push @out,  "DATE";
	    }
	    elsif($type eq "money"){
		push @out,  "DECIMAL(10, 2)";
	    }
	    elsif($type eq "uint"){
		push @out,  "INT UNSIGNED";
	    }
	    elsif($type){
		push @out, uc($type);
	    }
	    else{
		push @out,  "VARCHAR($size)";
	    }
	    if($ff->{notnull}){push @out, " NOT NULL";}
	    if(defined $ff->{default}){
		push @out, " DEFAULT $ff->{default}";
	    }
	    if($f eq $lastf){
		if($unique){
		    push @out, ",\n\t$unique\n);\n";
		}
		else{
		    push @out,  "\n);\n";
		}
	    }
	    else{
		push @out,  ",\n";
	    }
	}
	# initialization
	if($table->{initlist}){
	    my @values=split /,\s*/, $table->{initlist};
	    my $f=$flist->[0];
	    my $ff=$fields->{$f};
	    $type=getfieldtype($ff, $colname);
	    $size=getfieldsize($ff, $type);
	    foreach my $v (@values){
		push @out, "INSERT INTO $name ($f) VALUES (".sql_quote($type, $v).");\n";
	    }
	    push @out,  "\n";
	}
	elsif($table->{init}){
	    my $tlist=$table->{init};
	    my $insert_a="INSERT INTO $name (". join(", ", @$flist).") VALUES ";
	    foreach my $init_line (@$tlist){
		my @l=split /,\s*/, $init_line;
		push @out, $insert_a."('".join("', '", @l)."');\n";
	    }
	}
	return join '', @out;
    }

    sub sql_quote {
	my ($type, $v)=@_;
	if($type =~/int|DATE/i){
	    return $v;
	}
	else{
	    return "'$v'";
	}
    }

    #-----------------------------------------#
subcode:: support_subs
    sub display_list_field {
	my ($out, $f, $fields, $suffix, $csv)=@_;
	my $colname;
	$if $f=~/(.*)\((.*)\)/
	    $colname=$2;
	    $f=$1;
	$else
	    $colname=$f;
	my $ff=$fields->{$f};
	my $display;
	$if $csv and $ff->{text_display}
	    $display=$ff->{text_display}
	$elsif $ff->{display}
	    $display=$ff->{display}

	$if $display
	    $if $display=~/function (\w+)\((.*)\)/
		my $t0=$1;
		my $t1=$2;
		$t1=~s/\$\(colname\)/$colname/g;
		push @$out, "    $t0($t1);";
	    $elsif $display=~/function (\w+)/
		push @$out, "    $1(\$i$suffix);";
	    $elsif $display=~/call\s+(.*)/
		MyDef::compileutil::call_sub($1);
	    $elsif $display=~/do\s+(.*)/
		push @$out, "    $1;";
	    $else
		my @tt;
		$display=~s/"/\\"/g;
		$while $display=~/\$\[(.*?)\]/
		    push @tt, "\"$`\"";
		    push @tt, "\$i$suffix\['$1'\]";
		    $display=$';
		push @tt, "\"$display\"";
		push @$out, "        print ".join('.',@tt).";";
	$elsif $ff->{type} eq "boolean" and $ff->{list}
	    @l=split /,\s*/, $ff->{list};
	    push @$out, "if(\$i$suffix\['$f']){";
	    push @$out, "    print \"$l[0]\";";
	    push @$out, "}else{";
	    push @$out, "    print \"$l[1]\";";
	    push @$out, "}"
	$else
	    $listname=getfieldlistname($ff, $f);
	    if($listname){
		push @$out, "if(!empty(\$$listname) and array_key_exists(\$i$suffix\['$f'], \$$listname)){";
		push @$out, "    print \$$listname\[\$i$suffix\['$f']];";
		push @$out, "}else{";
		push @$out, "    print \$i$suffix\['$f'];";
		push @$out, "}"
	    }
	    else{
		if($f=~/^\$/){
		    push @$out, "        print \$i$suffix\[$f];";
		}
		else{
		    push @$out, "        print \$i$suffix\['$f'];";
		}
	    }
	$if $csv
	    push @$out, "PRINT , "
    }
    # list $itemlist in a csv 
    #      accepts a fieldlist of column definitions.
    #
    sub csvlist {
	my ($out, $listname, $full, $suffix)=@_;
	#$full Print table header row.
	my $fields=$MyDef::def->{fields};
	my $table=$MyDef::def->{fieldsets}->{$listname};
	my $flist;
	if(!$table){
	    @$flist=split /,\s*/, $listname;
	}
	else{
	    $flist=$table->{fields};
	}
	if($full){
	    foreach my $f (@$flist){
		if($f=~/(.*)\((.*)\)/){
		    $colname=$2;
		    $f=$1;
		}
		my $ff=$fields->{$f};

		my $title=$f;
		if($ff->{title}){$title=$ff->{title};}
		push @$out, "PRINT $title, ";
	    }
	    push @$out, "PRINTLN ";
	}
	push @$out, "\$j$suffix=0;";
	push @$out, "foreach(\$itemlist$suffix as \$i$suffix){";
	foreach my $f (@$flist){
	    display_list_field($out, $f, $fields, $suffix, "csv");
	}
	push @$out, "PRINTLN ";
	push @$out, "    \$j$suffix++;";
	push @$out, "}";
    }

    #-----------------------------------------#
    # list $itemlist in a table 
    #      accepts a fieldlist of column definitions.
    #
    $sub tablelist($out, $listname, $full, $suffix)
	#$full Print table header row.
	my $fields=$MyDef::def->{fields};
	my $table=$MyDef::def->{fieldsets}->{$listname};
	my $flist;
	if(!$table){
	    @$flist=split /,\s*/, $listname;
	}
	else{
	    $flist=$table->{fields};
	}
	push @$out, "PRINT <table class=\"tablelist$suffix\" cellspacing=2>";
	my $use_paritycolumn;
	$if $full
	    push @$out, "PRINT <tr>";
	    foreach my $f (@$flist){
		my $parity;
		if($f=~/^parity-(.*)/){
		    $f=$1;
		    $parity=1;
		}
		if($f=~/(.*)\((.*)\)/){
		    $colname=$2;
		    $f=$1;
		}
		my $ff=$fields->{$f};
		if($parity){
		    $use_paritycolumn=$f;
		}

		my $title=$f;
		if($ff->{title}){$title=$ff->{title};}
		my $width="";
		if($ff->{width}){$width=" width=\"$ff->{width}\"";}
		if($ff->{sort}){
		    $title="<a href=\"{\$_SERVER['PHPSELF']}?$ff->{sort}\">$title<\/a>";
		}
		push @$out, "PRINT <th $width align=center>$title</th>";
	    }
	    push @$out, "PRINT </tr>";
	push @$out, "\$j$suffix=0;";
	if($use_paritycolumn){
	    #push @$out, "\$old_parity;";
	    push @$out, "\$cur_parity=\"\";";
	}
	push @$out, "foreach(\$itemlist$suffix as \$i$suffix){";
	if($use_paritycolumn){
	    push @$out, "   \$cur_parity=\$i$suffix\['$use_paritycolumn'];";
	    push @$out, "   if(!isset(\$old_parity)){\$old_parity=\$cur_parity;}";
	    push @$out, "    if(\$cur_parity!=\$old_parity){\$old_parity=\$cur_parity; \$j$suffix++;}";
	}
	else{
	    push @$out, "    \$j$suffix++;";
	}
	push @$out, "    if(\$j$suffix%2){\$tdclass=\"even$suffix\";}";
	push @$out, "    else{\$tdclass=\"odd$suffix\";}";
	my $rlink=$MyDef::compileutil::deflist->[-1]->{rlink}
	my $attr="class=\\\"\$tdclass\\\""
	$if $rlink
	    $rlink=~s/\$\[(.*?)\]/{\$i$suffix\['\1']}/g
	    $attr.=" onclick=\\\"window.location.href='$rlink'\\\""
	push @$out, "    print \"<tr $attr>\";";
	# !!!!!! Note that the former foreach loop changed the $flist values
	foreach my $f (@$flist){
	    my $ff=$fields->{$f};
	    my $align="center";
	    if($ff->{align}){
		$align=$ff->{align};
	    }
	    my $width="";
	    if($ff->{width}){$width=" width=\\\"$ff->{width}\\\"";}
	    push @$out, "    print \"<td align=$align $width>\";";
	    display_list_field($out, $f, $fields, $suffix);
	    push @$out, "    print \"</td>\";";
	}
	push @$out, "    print \"</tr>\";";
	push @$out, "}";
	push @$out, "PRINT </table>";

    sub script_selectother {
	my ($name)=@_;
	my @lines;
	push @lines, "function selectother_$name(e){";
	push @lines, "    if(e.value=='other'){";
	push @lines, "        document.getElementById('other_$name').style.display='block';";
	push @lines, "    }";
	push @lines, "    else{";
	push @lines, "        document.getElementById('other_$name').style.display='none';";
	push @lines, "    }";
	push @lines, "}";
	$MyDef::def->{scripts}->{"selectother_$name"}=\@lines;
    }
    sub loadoptlist {
	my ($out, $f)=shift;
	my $ff=$MyDef::def->{fields}->{$f};
	if(!$ff){print "loadoptlist: $f not defined.\n";}
	if($ff->{list} and $ff->{type} ne 'boolean'){
	    my $listname="$f"."_optlist";
	    my @list;
	    if($ff->{list}=~/^\s*(\d+)-(\d+)\s*$/){
		for(my $j=$1; $j<=$2; $j++){
		    push @list, "\"$j\"=>\"$j\"";
		}
	    }
	    else{
		my @opts=split /,\s*/, $ff->{list};
		foreach my $o(@opts){
		    if($o=~/(.*):(.*)/){
			push @list, "\"$1\"=>\"$2\"";
		    }
		    else{
			push @list, "\"$o\"=>\"$o\"";
		    }
		}
	    }
	    push @$out, "\$$listname=array(".join(', ', @list).");";
	}
    }

    sub formpreloadselection {
	my ($out, $formname)=@_;
	my $form=$MyDef::def->{fieldsets}->{$formname};
	my $fields=$MyDef::def->{fields};
	my $flist=$form->{fields};
	foreach my $f (@$flist){
	    my $ff=$fields->{$f};
	    if($ff->{list}){
		my $listname="$f"."_optlist";
		my @opts=split /,\s*/, $ff->{list};
		my @list;
		foreach my $o(@opts){
		    push @list, "\"$o\"=>\"$o\"";
		}
		push @$out, "\$$listname=array(".join(', ', @list).");";
	    }
	}
    }
    sub getfieldsize {
	my ($ff, $type) =@_;
	my $size=$ff->{size};
	if(!$size){
	    $if $type eq "year"
		$size=4;
	    $elsif $type eq "date"
		$size=10; if($ff->{optional}){$valign="valign=\"middle\"";}
	    $elsif $type eq "money"
		$size=10;
	    $elsif $type eq "zip"
		$size=5;
	    $elsif $type eq "int"
		$size=5;
	    $elsif $type eq "phone"
		$size=15;
	    $elsif $type eq "email"
		$size=25;
	    $elsif $type eq "usdollar"
		$size=12;$prefix='\$';
	    $else
		$size=50;
	}
	return $size;
    }

    sub getfieldlistname {
	my ($ff, $f)=@_;
	if($ff->{listname}){
	    return $ff->{listname};
	}
	elsif($ff->{list}){
	    return $f.'_optlist';
	}
    }

    sub getfieldlabel {
	my ($ff, $f) =@_;
	my $title=$f;
	if($ff->{title}){$title=$ff->{title};}
	return "$title";
    }


    sub formbutton {
	my ($out, $param)=@_;
	my @bb=split /,\s*/, $param;	    
	push @$out, "PRINT &nbsp;";
	my $MODE;
	if($bb[1]){
	    $MODE="onclick=\\\"this.form.MODE.value='$bb[1]'; return true;\\\"";
	}
	push @$out, "print \"<input class=\\\"formbutton\\\" type=\\\"submit\\\" value=\\\"$bb[0]\\\" onmouseover=\\\"this.style.borderColor='silver';\\\" onmouseout=\\\"this.style.borderColor='gray';\\\" $MODE>\";";
	push @$out, "PRINT &nbsp;";
    }

    #################################################
    sub get_f_type {
	my $f=shift;
	my $ff=$MyDef::def->{fields}->{$f};
	my $type;
	if($ff->{type}){
	    return $ff->{type};
	}
	elsif($f=~/_id$/){
	    $type="uint";
	}
	elsif($f=~/_date$/ or $f=~/^date_/){
	    $type="date";
	}
	elsif($f=~/_flag$/ or $f=~/^flag_/){
	    $type="boolean";
	}
	elsif($f=~/_quantity$/){
	    $type="int";
	}
	elsif($f=~/^number_/){
	    $type="int";
	}
	elsif($f eq "password"){
	    $type="password";
	}
	elsif($f =~/phone/){
	    $type="phone";
	}
	elsif($f eq 'city'){
	    $type='city';
	}
	elsif($f eq 'state'){
	    $type='state';
	}
	elsif($f =~ /zip(code)?/){
	    $type='zip'
	}
	elsif($f =~ /email/){
	    $type='email';
	}
	elsif($f =~ /city_state_zip/){
	    $type='city_state_zip';
	}
	$ff->{type}=$type;
	return $type;
    }


    sub get_f_name {
	my $f=shift;
	my $ff=$MyDef::def->{fields}->{$f};
	if(!$ff or !$ff->{name}) {return $f;}
	return $ff->{name};
    }

    sub get_f_listname {
	my $f=shift;
	my $ff=$MyDef::def->{fields}->{$f};
	if($ff->{listname}){
	    return $ff->{listname};
	}
	elsif($ff->{list}){
	    return $f.'_optlist';
	}
	return;
    }

    sub get_f_label {
	my $f=shift;
	my $ff=$MyDef::def->{fields}->{$f};
	if(!$ff){return $f;}
	if($ff->{title}){return $ff->{title};}
	if($ff->{label}){return $ff->{label};}
	return $f;
    }

    sub get_f_display {
	my $f=shift;
	my $ff=$MyDef::def->{fields}->{$f};
	if($ff->{display}){return;}
	my $listname=getfieldlistname($ff, $f);
	my $type=getfieldtype($ff, $f);
	if($type eq "boolean"){
	    my $y="Yes";
	    my $n="No";
	    if($ff->{list}){
		my @l=split(/,\s*/, $ff->{list});
		$y=$l[0];
		$n=$l[1];
	    }
	    push @$out, "if(\$$f==1){print \"$y\";}";
	    push @$out, "else{print \"$n\";}";
	}
	elsif($type eq "file"){
	}
	elsif($type eq "imagefile"){
	}
	elsif($type eq "password"){
	    push @$out, "*** ***";
	}
	else{
	    if($listname){
		push @$out, "if(\$$listname){";
		push @$out, "    print \$$listname\[\$$f\];";
		push @$out, "}";
		push @$out, "else{";
		push @$out, "    print \$$f;";
		push @$out, "}";  
	    }
	    else{
		push @$out, "print \$$f;";
	    }
	}
    }

    $sub field_label($f)
	my $ff=$MyDef::def->{fields}->{$f};
	my $title=ucfirst($f);
	$if $ff->{label}
	    $title=$ff->{label}
	$elif $ff->{title}
	    $title=$ff->{title}
	push @$out, "print \"$title\";"

    $sub field_input($f)
	my $ff=$MyDef::def->{fields}->{$f};
	my $type=getfieldtype($ff, $f);
	my $size=getfieldsize($ff, $type);

	my $disabled="";
	$if $ff->{disabled}
	    $disabled=" disabled";

	my $listname=getfieldlistname($ff, $f);
	my $prefix=$ff->{prefix};
	my $suffix=$ff->{suffix};
	my $isout=0;

	$if $type eq "boolean"
	    $call field_input_boolean
	$elsif $type eq "checkbox"
	    push @$out, "if(!empty(\$$f)){\$t=' checked';}else{\$t='';}";
	    push @$out, "PRINT <input type=\"checkbox\" name=\"$f\" \$t$handler $input_style>";
	    push @$out, "PRINT &nbsp;&nbsp;";
	$elsif $listname
	    $call field_input_selection
	$elsif $type eq "date"
	    if(!$ff->{optional}){
		$inputdate="inputdate_us";
		$php->{$inputdate}=1;
		$php->{inputoptionlist}=1;
		push @$out, "if(empty(\$$f)){";
		push @$out, "    $inputdate(\"$f\", '');";
		push @$out, "}";
		push @$out, "else{";
		push @$out, "    $inputdate(\"$f\", \$$f);";
		push @$out, "}";
	    }
	$elsif $type eq "blob" or $type eq "text"
	    push @$out, "PRINT <textarea class=\"input\" name=\"$f\" id=\"input-$f\">\$$f</textarea>";
	$else
	    my $typestr="text";
	    $if $type eq "password"
		$typestr="password";

	    push @$out, "if(!empty(\$$f)){\$val_clause=\"value=\\\"\$$f\\\"\";}";
	    push @$out, "else{\$val_clause='';}";
	    push @$out, "PRINT $prefix<input type=\"$typestr\" name=\"$f\" id=\"input-$f\" class=\"input\" \$val_clause $disabled >$suffix";
	    $isout=1;
	$if $ff->{suffix}
	    $if $ff->{suffix}=~/\$button (.*)/
		formbutton($out, $1);
	    $else
		push @$out, $ff->{tail};

    sub fielddisplay {
	my ($out, $f, $ff) =@_;
	my $listname=getfieldlistname($ff, $f);
	my $type=getfieldtype($ff, $f);
	if($type eq "boolean"){
	    my $y="Yes";
	    my $n="No";
	    if($ff->{list}){
		my @l=split(/,\s*/, $ff->{list});
		$y=$l[0];
		$n=$l[1];
	    }
	    push @$out, "if(\$$f==1){print \"$y\";}";
	    push @$out, "else{print \"$n\";}";
	}
	elsif($type eq "file"){
	}
	elsif($type eq "imagefile"){
	}
	elsif($type eq "password"){
	    push @$out, "*** ***";
	}
	else{
	    if($listname){
		push @$out, "if(\$$listname){";
		push @$out, "    print \$$listname\[\$$f\];";
		push @$out, "}";
		push @$out, "else{";
		push @$out, "    print \$$f;";
		push @$out, "}";  
	    }
	    else{
		push @$out, "print \$$f;";
	    }
	}
    }

subcode: field_input_boolean
    my $y="Yes";
    my $n="No";
    if($ff->{list}){
	my @l=split(/,\s*/, $ff->{list});
	my $j=0;
	foreach my $tl(@l){
	    if($tl=~/(.*)(=>|:)([01])/){
		if($3 eq "0"){
		    $n=$1;
		}
		else{
		    $y=$1;
		}
	    }
	    else{
		if($j==0){
		    $y=$tl;
		}
		else{
		    $n=$tl;
		}
	    }
	    $j++;
	}
    }
    push @$out, "if(!empty(\$$f)){\$t=' checked';}else{\$t='';}";
    push @$out, "PRINT $y<input type=\"radio\" name=\"$f\" value=\"1\" \$t$handler $input_style>";
    push @$out, "PRINT &nbsp;&nbsp;";
    push @$out, "if(empty(\$$f)){\$t=' checked';}else{\$t='';}";
    push @$out, "PRINT $n<input type=\"radio\" name=\"$f\" value=\"0\" \$t$handler $input_style>";
    $isout=1;

subcode: field_input_selection
    push @$out, "if (\$$listname){";
    my $sizestr;
    my $name=$f;
    if($ff->{size}=~/(\d+)/){
	$sizestr="size=$1";
    }
    if($ff->{multiple}){
	$sizestr.=" multiple=\"yes\"";
	$name.="[]";
    }
    if($ff->{other}){
	push @$out, "PRINT <select class=\"\$inputclass\" name=\"$name\" onchange=\"selectother_$f(this);\" $sizestr $input_style>";
	push @$out, '$selected=0;';
    }
    else{
	push @$out, "PRINT <select class=\"\$inputclass\" name=\"$name\" $handler $sizestr $input_style>";
    }
    if($ff->{listnoselect}){
    }
    else{
	my $void="Select";
	if($ff->{void}){$void=$ff->{void};}
	push @$out, "if (!isset(\$$f) or (\$$f=='')){print \"<option value=\\\"\\\" selected>$void</option>\"; \$selected=1;}else{print \"<option value=\\\"\\\">Select</option>\";}";
    }
    push @$out, "foreach (\$$listname as \$v=>\$o){";
    push @$out, "    if(isset(\$$f) and \$v==\$$f){";
    push @$out, "        print \"<option value=\\\"\$v\\\" selected>\$o</option>\";";
    push @$out, "        \$selected=1;";
    push @$out, "    }";
    push @$out, "    else{";
    push @$out, "        print \"<option value=\\\"\$v\\\">\$o</option>\";";
    push @$out, "    }";
    push @$out, "}";
    if($ff->{other}){
	push @$out, "if (!\$selected){print \"<option value=\\\"other\\\" selected>other</option>\";}else{print \"<option value=\\\"other\\\">other</option>\";}";
    }
    push @$out, 'print "</select>";';
    if($ff->{other}){
	push @$out, "if(\$selected){";
	push @$out, '    print "<div id=\"other_'.$f.'\" style=\"display: none; margin-top: 10px;\"><div class=\"formprompt\">Please specify '.$title.':</div><input class=\"fullinput\" type=\"text\" name=\"other_'.$f.'\" value=\"$other_'.$f.'\" /></div>";';
	push @$out, "}else{";
	push @$out, '    print "<div id=\"other_'.$f.'\" style=\"display: block; margin-top: 10px;\"><div class=\"formprompt\">Please specify '.$title.':</div><input class=\"fullinput\" type=\"text\" name=\"other_'.$f.'\" value=\"$'.$f.'\" /></div>";';
	push @$out, "}";
    }
    push @$out, "}";
    push @$out, "else{";
    if($ff->{selectonly}){
	push @$out, "PRINT $prefix<input class=\"$inputclass\" type=\"text\" name=\"$f\" value=\"\$$f\" size=\"$size\"$handler disabled $input_style>$suffix";
    }
    else{
	push @$out, "PRINT $prefix<input class=\"$inputclass\" type=\"text\" name=\"$f\" value=\"i\$$f\" size=\"$size\"$handler $input_style>$suffix";
    }
    push @$out, "}";
    $isout=1;

