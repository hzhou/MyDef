subcode: enter_js
    push @$out, "<script type=\"text/javascript\">\n";

subcode: exit_js
    push @$out, "<\/script>\n"

subcode: js_parse_func_param
    $if $func eq "listen"
	$call js_parse_listen
    $elif $func eq "setf"
	$call js_parse_setf

subcode: js_parse_func
    my $param1=""
    my $param2=$param
    $if $func eq "listen"
	$call js_parse_listen
    $elif $func eq "setf"
	$call js_parse_setf
    $elif $func =~ /^(if|while)$/
	return single_block("$1($param){", "}")
    $elif $func =~ /^(el|els|else)if$/
	return single_block("else if($param){", "}")
    $elif $func eq "else"
	return single_block("else{", "}")

    $elif $func eq "for" or $func eq "foreach"
	$call js_parse_for

subcode: js_parse_for
    $if $param=~/(\w+)=(.*?):(.*?)(:.*)?$/
	my ($var, $i0, $i1, $step)=($1, $2, $3, $4);
	my $stepclause;
	$if $step
	    my $t=substr($step, 1);
	    $if $t eq "-1"
		$stepclause="var $var=$i0;$var>$i1;$var--";
	    $elif $t=~/^-/
		$stepclause="var $var=$i0;$var>$i1;$var=$var$t";
	    $else
		$stepclause="var $var=$i0;$var<$i1;$var+=$t";
	$else
	    $if $i1 eq "0"
		$stepclause="var $var=$i0-1;$var>=0;$var--";
	    $elif $i1=~/^-?\d+/ and $i0=~/^-?\d+/ and $i1<$i0
		$stepclause="var $var=$i0;$var>$i1;$var--";
	    $else
		$stepclause="var $var=$i0;$var<$i1;$var++";
	return single_block("for($stepclause){", "}")
    $else
	return single_block("$func($param){", "}")



# -------------------------
subcode: js_parse_listen
    $global $js_event_handler_index=0
    my ($obj, $event, $cap)=split /,\s*/, $param2
    $if !$cap
	$cap="false"
    $js_event_handler_index++
    push @$out, "$obj.addEventListener('$event', listener$js_event_handler_index, $cap)"
    return single_block("function listener$js_event_handler_index($param1){", "}")

subcode: js_parse_setf
    return single_block("$param2 = function($param1){", "}")
