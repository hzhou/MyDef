include: c_input.def

#### ---------------------------------------------
# Regular Expression Matching: the Virtual Machine Approach
# http://swtch.com/~rsc/regexp/regexp2.html
subcode:: _autoload
    $enum Match, Char, Split, Jmp, AnyChar, Range, Class
    $struct(VMInst) int opcode, int c, int x, int y
    
    $struct(regex_vm) n, pn_clist, pn_nlist, struct VMInst * nfa
    $list regex_vm_init, regex_vm_finish
    $list regex_vm_match

fncode: regex_vm_init(n_size, struct VMInst * nfa)
    $local struct regex_vm * vm
    $allocate vm
    vm->n=n_size
    vm->nfa=nfa
    $allocate(n_size+1) vm->pn_clist
    $allocate(n_size+1) vm->pn_nlist

fncode: regex_vm_finish(struct regex_vm * vm)
    free(vm->pn_clist)
    free(vm->pn_nlist)

subcode: add_vm_thread(tlist, thread)
    $for i=0:$(tlist)[0]
        $if $(tlist)[i+1]==$(thread)
            return
    $call add_vm_thread_direct(tlist, thread)

subcode: add_vm_thread_direct(tlist, thread)
    $(tlist)[0]++
    $(tlist)[$(tlist)[0]]=$(thread)

fncode: regex_vm_match(struct regex_vm * vm, struct c_input * b)
    $return_type int
    $local int * clist, int * nlist
    $local struct VMInst * nfa
    clist=vm->pn_clist
    nlist=vm->pn_nlist
    nfa=vm->nfa

    clist[0]=0;
    nlist[0]=0;
    b->n_start=b->n_pos

    n_last_match_len=0
    n_last_match_id=0

    $call add_vm_thread_direct, clist, 0
    $while clist[0]>0
	$call @get_char
	$if c==EOF
	    return EOF
	# -- Lock-Step running of all threads --
	$for i=1:clist[0]+1;i++
	    $local struct VMInst* pInst
            pInst=nfa+clist[i];
	    $call regex_vm_opcode
	$local int * tlist;
	tlist=nlist; nlist=clist; clist=tlist;
	nlist[0]=0;
    $if n_last_match_len>0
	b->n_pos--
    return n_last_match_id

subcode: regex_vm_opcode
    $local int c
    $if pInst->opcode==Match
	tn_len=b->n_pos-b->n_start-1
	$if tn_len>n_last_match_len
	    n_last_match_len=tn_len
	    n_last_match_id=pInst->c
    $elif pInst->opcode==Jmp
	$call add_vm_thread, clist, pInst->x
    $elif pInst->opcode==Split
	$call add_vm_thread, clist, pInst->x
	$call add_vm_thread, clist, pInst->y
    $else
	$if pInst->opcode==Char
	    $if c != pInst->c
		break
	$elif pInst->opcode==Range
	    $if c<pInst->x || c>pInst->y
		break
	$elif pInst->opcode==Class
	    $if pInst->c == 's'
		$if c!=' ' && c!='\t'
		    break
	    $elif pInst->c == 'S'
		$if c==' ' && c=='\t'
		    break
	    $elif pInst->c=='d'
		$if c<'0' || c>'9'
		    break
	    $elif pInst->c=='D'
		$if c>='0' && c<='9'
		    break
	    $elif pInst->c=='w'
		$if c!='_' && (c<'0' || c>'9') && (c<'A' || c>'Z') && (c<'a' || c>'z') 
		    break
	    $elif pInst->c=='W'
		$if c=='_' || (c>='0' && c<='9') || (c>='A' && c<='Z') || (c>='a' && c<='z') 
		    break
	$call add_vm_thread, nlist, clist[i]+1


