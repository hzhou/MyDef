#include: ref_counting.def
include: c_slist.def

## frame
subcode: basic_frame
    $include stdio
    $include stdlib
    $call @global
    $(if:hascode:n_main)
	$list n_main
    $(if:hascode:main2)
	$list main2

###############################################################
## Utility
subcode: assert(check)
    $if !($(check))
	$call assert_action

subcode: assert_action
    printf("Assert Error: ($(check)) at line %d \n", __LINE__)
    exit(1)

## FILE IO
subcode: mmap(filename, strname, strsize)
    $include sys/mman
    $include sys/stat
    $include fcntl
    $include unistd
    tn_fd=open($(filename), O_RDONLY)
    struct stat st
    fstat(tn_fd, &st)
    $(strsize)=st.st_size
    $(strname)=mmap(0, $(strsize), PROT_READ, MAP_SHARED, tn_fd, 0)
    BLOCK
    munmap($(strname), $(strsize))
    close(tn_fd)

# --------------------------------
subcode: open_w(file)
    file_out=fopen($(file), "wb")
    $if file_out==NULL
        fprintf(stderr, "Can't write %s\n", $(file))
    $else
        BLOCK
        fclose(file_out)

subcode: open_r(file)
    file_in=fopen($(file), "rb")
    $if file_in==NULL
        fprintf(stderr, "Can't open %s\n", $(file))
    $else
        BLOCK
        fclose(file_in)

subcode: write_sig(name)
    t_n=fwrite("$(name)", 1, $(name:len), file_out)

subcode: read_sig(name, len)
    t_n=fread($(name), 1, $(len), file_in)
    $(name)[$(len)]=0

subcode: write_var(name)
    t_n=fwrite(&$(name), sizeof($(name)), 1, file_out)

subcode: read_var(name)
    t_n=fread(&$(name), sizeof($(name)), 1, file_in)

subcode: write_data(name, size)
    t_n=fwrite($(name), 1, $(size), file_out)

subcode: read_data(name, size)
    t_n=fread($(name), 1, $(size), file_in)

# --------------------------------
subcode: die(msg)
    fprintf(stderr, $(msg))
    exit(-1)

# --------------------------------
perlcode: tempstr
    my ($n, $fmt)=fmt_string($param)
    $if $n>0
	func_add_var("ts_temp_buf[100]", "local")
	push @$out, "snprintf(ts_temp_buf, 100, $fmt);"
	MyDef::compileutil::set_current_macro("tempstr", "ts_temp_buf")
    $else
	MyDef::compileutil::set_current_macro("tempstr", $fmt)

# ---- sprintf ------------
perlcode: parse_fmt
    my ($n, $fmt)=fmt_string($param)
    MyDef::compileutil::set_current_macro("fmt", $fmt)

subcode: sprint(@fmt)
    $global s_printf_buffer[100], n_printf_length=0
    $eval parse_fmt, $(fmt)
    n_printf_length=snprintf(s_printf_buffer, 100, $(fmt))
    $if n_printf_length>=100
	n_printf_length=99
    $(mexport:s=s_printf_buffer,n=n_printf_length)

