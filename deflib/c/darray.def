subcode:: _autoload
    $class darray

#--- dynamic array ----------------------------
#    Consideration:: 
# 	do not over worry about global name collision
#       rather, work on how to get program detect name collisions

#---------------------------------------- 
#-   $my darray P of int
subcode: darray_init(var, scope, @type)
    $(if:$(type:list:n)=1)
	$$(scope) $(type)* $(var)=NULL
    $(else)
	$tuple $(type)
	$$(scope) struct $(T) * $(var)=NULL

    $set_var_attr $(var), class=darray, dimension=$(var)_len
    $$(scope) int $(var)_len=0
    $$(scope) int $(var)_size=0

subcode: darray_exit(var)
    $if $(var)_size>0
	free($(var))

subcode: darray_resize(var, n)
    $(if:n=0)
	$if $(var)_size>0
	    free($(var))
	    $(var)=NULL
	    $(var)_len=0
	    $(var)_size=0
    $(else)
	$if $(var)_size<$(n)
	    $(var)_size=$(n)
	    $call darray_expand, $(var) 
	$(var)_len=$(n)

#- P.push ("me", 30)
subcode: darray_push(var, @p)
    $call darray_check, $(var)
    $var_assign($(var)[$(var)_len]) $(p)
    $(var)_len++

macros:
    darray_index_negative: $1[$1_len-$2]

subcode: darray_pop(var)
    $(var)_len--
    $yield $(var)[$(var)_len]

#----------------------------------------------------
subcode: darray_check(var)
    $(export:len=$(var)_len)
    $(export:size=$(var)_size)

    $if $(len)+1>$(size)
	$get_pointer_type(type) $(var)
	$fcall $(var)=f_darray_expand($(var), sizeof($(type)), &$(var)_size)

subcode: darray_expand(var)
    $get_pointer_type(type) $(var)
    $(var)=($(type) *)realloc($(var), $(var)_size*sizeof($(type)))
    $call @assert, $(var)

fncode: f_darray_expand(void * P, n_rec_size, pn_size)
    $return_type void *
    tn_temp=(*pn_size)*2/3
    $if tn_temp<64
	tn_temp=64
    (*pn_size)+=tn_temp
    P=realloc(P, (*pn_size)*n_rec_size)
    $call @assert, P
    return P

#----------------------------------------------------
/*
subcode: darray_init(var)
    $(var)=NULL
    $(var)_len=0
    $(var)_size=0

subcode: darray_clear(var)
    free($(var))
    $call darray_init, $(var)

#----------------------------------------------------
subcode: local_darray(type, var)
    $local $(type) * $(var)=NULL
    $local int $(var)_len=0
    $local int $(var)_size=0

subcode: global_darray(type, var)
    $global $(type) * $(var)=NULL
    $global int $(var)_len=0
    $global int $(var)_size=0

subcode: use_darray(var)
    $(export:len=$(var)_len)
    $(export:size=$(var)_size)

#---------------------------------------- 
subcode: da_push(var, @val)
    $call darray_check, $(var)
    $get_pointer_type(type) $(var)
    $(var)[$(var)_len]=($(type))$(val) ;
    $(var)_len++
    # $(export:item=$(var)[$(var)_len-1])

subcode: da_pop(var)
    $(var)_len--
    $(export:item=$(var)[$(var)_len])
*/
