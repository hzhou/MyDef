
###############################################################
## doubly linked list
#    $struct(name_node) prop1, prop2, ..., prev, next 
#    $struct(name) prop1, prop2, ..., head
#    the current node is always referred with p
subcode: dlist(name, list, node)
    $struct($(name)_node) $(node), struct $(name)_node * prev, struct $(name)_node * next
    $struct($(name)) $(list), n, struct $(name)_node* head
    $call dlist_support

subcode: dlist_support
    $register_name(plist) struct $(name) *
    $register_name(p) struct $(name)_node *
    $list dlist_new($(name)_new)
    $list dlist_push($(name)_push)
    $list dlist_pop($(name)_pop)
    $list dlist_shift($(name)_shift)
    $list dlist_unshift($(name)_unshift)

fncode: dlist_new
    plist=(struct $(name) *)malloc(sizeof(struct $(name)))
    p=(struct $(name)_node *)malloc(sizeof(struct $(name)_node))
    p->prev=p
    p->next=p
    plist->n=0
    plist->head=p
    return plist

fncode: dlist_push(plist)
    p=(struct $(name)_node *)malloc(sizeof(struct $(name)_node))
    p->next=plist->head
    p->prev=plist->head->prev
    p->prev->next=p
    p->next->prev=p
    plist->n++
    return p

fncode: dlist_pop(plist)
    $if plist->n>0
	p=plist->head->prev
	$call dlist_unlink, plist, p
	return p
    $else
	return NULL

fncode: dlist_shift(plist)
    $if plist->n>0
	p=plist->head->next
	$call dlist_unlink, plist, p
	return p
    $else
	return NULL

fncode: dlist_unshift(plist)
    p=(struct $(name)_node *)malloc(sizeof(struct $(name)_node))
    p->next=plist->head->next
    p->prev=plist->head
    p->next->prev=p
    p->prev->next=p
    plist->n++
    return p

subcode: dlist_unlink(plist, p)
    $(p)->prev->next=$(p)->next
    $(p)->next->prev=$(p)->prev
    $(plist)->n--

subcode: dlist_each(plist, p)
    $(p)=$(plist)->head->next
    $while $(p) != $(plist)->head
        BLOCK
        $(p)=$(p)->next

subcode: dlist_each_safe(plist, p, p2)
    $(p2)=$(plist)->head->next
    $while $(p2) != $(plist)->head
	$(p)=$(p2)
        $(p2)=$(p2)->next
        BLOCK

subcode: dlist_each_inverse(plist, p)
    $(p)=$(plist)->head->prev
    $while $(p) != $(plist)->head
        BLOCK
        $(p)=$(p)->prev

subcode: dlist_each_inverse_safe(plist, p, p2)
    $(p2)=$(plist)->head
    $while $(p2)->prev != $(plist)->head
	$(p)=$(p2)->prev
        BLOCK
        $(p2)=$(p2)->prev

