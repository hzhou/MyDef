subcode: _autoload
    $class image

subcode: image_declare(type)
    $(if:type=gray)
        $struct(image_gray) int w, int h, unsigned char * image
    $(elif:type=rgb)
        $struct(image_rgb) int w, int h, unsigned char * image
    $(elif:type=rgba)
        $struct(image_rgba) int w, int h, unsigned char * image
    $(elif:type=float)
        $struct(image_float) int w, int h, float * image
    $(elif:type=double)
        $struct(image_double) int w, int h, double * image

#---- init ------------------------------------ 
subcode: image_init(var, scope, @type)
    $(if:type=default)
        $(set:type=float)
        $(set:pixel_type=float)
    $(if:type=float or type=double)
        $(set:pixel_type=$(type))
    $(else)
        $(set:pixel_type=unsigned char)
    $$(scope) $(pixel_type) * $(var)=NULL
    $$(scope) int $(var)_w=0, int $(var)_h=0

    $set_var_attr $(var), class=image
    $set_var_attr $(var), pixel_type=$(pixel_type), image_type=$(type)

subcode: image_set_size(var, w, h)
    $(var)_w=$(w)
    $(var)_h=$(h)
    $allocate($(w)*$(h)) $(var)

subcode: image_clear(var)
    delete($(var))
    $(var)_w=0
    $(var)_h=0
    $(var)=NULL

subcode: image_each_pixel(var)
    $my k
    k=0
    $for i=0:$(var)_h
        $call @inc_y
        $for j=0:$(var)_w
            $(set:pixel=$(var)[k])
            BLOCK
            $call @inc_x
            k++

#------------------------------------------ 
#- default: single precision floating point

#---- simple integer scale down ----
#-  $local image img2
#-  $call image_scale_down, img1, 5, img2
#-  
subcode: image_scale_down(var, scale, var2)
    $(for:w in w,h)
        tn_$(w)2=$(var)_$(w)/$(scale)
        $if $(var)_$(w) > tn_$(w)2*$(scale)
            tn_$(w)2++
    $call image_set_size, $(var2), tn_w2, tn_h2
    memset($(var2), 0, tn_w2*tn_h2)

    tf_factor=(float)($(scale)^2)
    &call image_each_pixel, $(var)
        $(set:pixel2=$(var2)[k2])
        $(pixel2) += $(pixel)
    &call image_each_pixel, $(var2)
        $(pixel)/=tf_factor

    subcode: inc_y
        k2 = i/$(scale) * tn_w2
        i2=0

    subcode: inc_x
        i2++
        $if i2==$(scale)
            i2=0
            k2++

#---------------------------------------- 
subcode: image_interp(var, x, y)
    tn_x=(int)$(x)
    tn_y=(int)$(y)
    tf_a=$(x)-tn_x
    tf_b=$(y)-tn_y
    $(mset:a=tf_a,a1=(1-tf_a),b=tf_b,b1=(1-tf_b))
    $(set:p0=$(var)[k])
    $(set:p1=$(var)[k+1])
    $(set:p2=$(var)[k+$(var)_w])
    $(set:p3=$(var)[k+$(var)_w+1])
    k2=tn_y*$(var)_w+tn_x
    tf_val = $(a1)*$(b1)*$(p0) + $(a)*$(b1)*$(p1) + $(a1)*$(b)*$(p2) + $(a)*$(b)*$(p3)



#---- conversion ------------------------------------ 
subcode: image_convert(var, var2)
    $call image_set_size, $(var2), $(var)_w, $(var)_h
    $get_var_attr $(var), image_type(type1)
    $get_var_attr $(var2), image_type(type2)
    $(if:type2=float or type2=double)
        $(if:type1!=rgb and type1!=rgba)
            $for i=0:$(var)_w*$(var)_h
                $(var2)[i]=($(type2))$(var)[i]
    $(elif:type1=float and type2=gray)
        $for i=0:$(var)_w*$(var)_h
            $if $(var)[i]<0
                $(var2)[i]=0
            $elif $(var)[i]>255
                $(var2)[i]=255
            $else
                $(var2)[i]=(unsigned char)$(var)[i]

#---- fft ------------------------------------ 
subcode: image_fft(var, var2)
    $include fftw3
    $uselib fftw3

    $get_var_attr $(var), image_type(type1)
    $(if:type1!=double)
        $print image_fft only supports double precision (not $(type1))
        exit(1)

    tn_w=$(var)_w/2+1
    $local fftw_complex * p_out, fftw_plan p
    $local_allocate($(var)_h*tn_w) p_out
    p = fftw_plan_dft_r2c_2d($(var)_h, $(var)_w, $(var), p_out, FFTW_ESTIMATE)
    fftw_execute(p)
    
    $call set_output

    fftw_destroy_plan(p)

    # -----
    subcode: set_output
        $(var2).$set_size $(var)_w, $(var)_h
        $print set_output $$(var)_w, $$(var)_h, $tn_w
        tf_max=0
        &call image_each_pixel, $(var2)
            i2 = i-$(var)_h/2
            j2 = j-$(var)_w/2
            $if j2<0
                i2 = -i2
                j2 = -j2
            $if i2<0
                i2 += $(var)_h

            k2=i2*tn_w+j2
            $(pixel) = log(p_out[k2][0]^2+p_out[k2][1]^2+1)
            $if tf_max<$(pixel)
                tf_max=$(pixel)

        tf_scale=255/tf_max
        $print max: $tf_max, scale: $tf_scale
        &call image_each_pixel, $(var2)
            $(pixel) *= tf_scale
        
    

