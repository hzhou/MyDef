subcode:: _autoload
    #---- Box type
    $struct(box) char type, next, unsigned char * string, int strlen, int strsize
    $struct(box_char) class box, int code
    $struct(box_horizontal) class box, struct box * boxlist, float width, float height, float depth
    $struct(box_vertical) class box_horizontal

    $struct(box_float) class box, float x, float y, float w, float h, struct box * boxlist

macros:
    Box_Char: 0

    Box_Horizontal: 1
    Box_Text:1

    Box_Vertical: 2
    Box_Float: 3

#---------------------------------------- 
fncode: layout_start(int type, n_x, n_y, n_w, n_h)
    $local struct box_float * box
    box->type=type
    box->next=NULL
    box->string=NULL
    box->strlen=0
    $allocate box
    $(for:x in x,y,w,h)
        box->$(x)=n_$(x)
    return box

fncode: layout_append_char(struct box * box, int code)
    $if box->string==NULL
        box->string=malloc(100)
        box->strsize=100
    $local s_utf[6]
    $fcall tn_ret=to_utf8(s_utf, code)
    $if box->strlen+4>box->strsize
        tn_new_size=box->strsize*5/3
        box->string=realloc(box->string, tn_new_size)
        box->strsize=tn_new_size
    strcpy(box->string+box->strlen, s_utf, tn_ret)
    box->strlen+=tn_ret

fncode: layout_set_string(struct box * box, char * s, n_len)
    $if box->string
        free(box->string)
    box->string=malloc(n_len)
    box->strsize=n_len
    box->strlen=n_len
    memcpy(box->string, s, n_len)

fncode: layout_text(struct box_horizontal * box)
    n_pos=0
    $local unsigned int code
    $local struct box * pbox=box->boxlist
    $local struct box * plast=NULL
    $while code=get_utf8(box->string, &n_pos, box->strsize)
        $if pbox==NULL
            

#---------------------------------------- 
fncode: to_utf8(unsigned int code, unsigned char * utf)
    $if code<=0x7f
        utf[0]=code
        return 1
    $elif code<=0x7ff
        utf[0]=0xc0+(code>>6)
        utf[1]=0x80+(code&0x3f)
        return 2
    $elif code<=0xffff
        utf[0]=0xe0+(code>>12)
        utf[1]=0x80+((code & 0xfff ) >>6)
        utf[2]=0x80+(code & 0x3f)
        return 3
    $elif code<=0x1fffff
        utf[0]=0xe0+(code>>18)
        utf[1]=0x80+((code & 0x3ffff ) >>12)
        utf[2]=0x80+((code & 0xfff ) >>6)
        utf[3]=0x80+(code & 0x3f)
        return 4
    $elif code<=0x3ffffff
        utf[0]=0xe0+(code>>24)
        utf[1]=0x80+((code & 0xffffff ) >>18)
        utf[2]=0x80+((code & 0x3ffff ) >>12)
        utf[3]=0x80+((code & 0xfff ) >>6)
        utf[4]=0x80+(code & 0x3f)
        return 5
    $else
        utf[0]=0xe0+(code>>30)
        utf[1]=0x80+((code & 0x3fffffff ) >>24)
        utf[2]=0x80+((code & 0xffffff ) >>18)
        utf[3]=0x80+((code & 0x3ffff ) >>12)
        utf[4]=0x80+((code & 0xfff ) >>6)
        utf[5]=0x80+(code & 0x3f)
        return 6

subcode: get_utf8(unsigned char * utf, int * pos, int limit)
    $local unsigned char * s=utf+(*pos)
    $local unsigned int code
    $if (*pos)<limit &&  s[0] & 0x80 ==0 
        *pos+=1
        return *s
    $elif (*pos)<limit-1 && (s[0]>>5)==0x6
        *pos+=2
        code=s[0]&0x1f
        code<<=6
        code+=s[1]&0x3f
        return code
    $elif (*pos)<limit-2 && (s[0]>>4)==0xe
        *pos+=3
        code=s[0]&0xf
        code<<=6
        code+=s[1]&0x3f
        code<<=6
        code+=s[2]&0x3f
        return code
    $elif (*pos)<limit-3 && (s[0]>>3)==0x1e
        *pos+=4
        code=s[0]&0x1f
        code<<=6
        code+=s[1]&0x3f
        code<<=6
        code+=s[2]&0x3f
        code<<=6
        code+=s[3]&0x3f
        return code
    $elif (*pos)<limit-4 && (s[0]>>2)==0x3e
        *pos+=5
        code=s[0]&0x1f
        code<<=6
        code+=s[1]&0x3f
        code<<=6
        code+=s[2]&0x3f
        code<<=6
        code+=s[3]&0x3f
        code<<=6
        code+=s[4]&0x3f
        return code
    $elif (*pos)<limit-5 && (s[0]>>1)==0x7e
        *pos+=6
        code=s[0]&0x1f
        code<<=6
        code+=s[1]&0x3f
        code<<=6
        code+=s[2]&0x3f
        code<<=6
        code+=s[3]&0x3f
        code<<=6
        code+=s[4]&0x3f
        code<<=6
        code+=s[5]&0x3f
        return code

