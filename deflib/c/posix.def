include: c/socket.def
subcode:: _autoload
    $include string

#---- Read/Write Wrapper --------------------------------
subcode: Read(fd, buf, size)
    $fcall tn_ret=read1($(fd), $(buf), $(len))

subcode: Write(fd, buf, len)
    $fcall tn_ret=writen($(fd), $(buf), $(len))

fncode: read1(int fd, void * p, n)
    &call retry_block
        tn_read=read(fd, p, n)
        $if tn_read<0 && errno==EINTR
            $call retry
    return tn_read

fncode: readn(int fd, void * p, n)
    tn_remain=n
    $while tn_remain>0
        tn_read=read(fd, p, tn_remain)
        $if tn_read<0
            $if errno=EINTR
                tn_read=0
            $else
                return -1
        $elif tn_read==0
            break
        $else
            tn_read-=tn_read
            p+=tn_read
    return n-tn_remain

fncode: writen(int fd, void * p, n)
    $return_type int
    tn_remain=n
    $while tn_remain>0
        tn_written=write(fd, p, tn_remain)
        $if tn_written<=0
            $if tn_written<0 && errno==EINTR
                tn_written==0
            $else
                return -1
        $else
            tn_remain-=tn_written
            p+=tn_written
    return n

# ---- Generic Client -------------------------------------
subcode: socket_common
    $include arpa/inet
    $include errno

# ---- TCP Wrapper ---------------------------------------
subcode: tcp_connect(host, port)
    $call socket_common
    $include netdb
    $local struct addrinfo ai_hint
    memset(&ai_hint, 0, sizeof(ai_hint))
    ai_hint.ai_family=AF_UNSPEC
    ai_hint.ai_socktype=SOCK_STREAM
    $local struct addrinfo * ai_res
    tn_ret=getaddrinfo($(host), $(port), &ai_hint, &ai_res)
    $call assert, tn_ret==0
    ai_p=ai_res
    $while ai_p
        tn_socket=socket(ai_p->ai_family, ai_p->ai_socktype, ai_p->ai_protocol)
        $if tn_socket<0
            ai_p=ai_p->ai_next
            continue
        tn_ret=connect(tn_socket, ai_p->ai_addr, ai_p->ai_addrlen)
        $if tn_ret==0
            break
        $else
            $print Failed to connect.
            close(tn_socket)
            ai_p=ai_p->ai_next
            continue
    $call assert, ai_p
    freeaddrinfo(ai_res)

# ---- Read Loop ---------------------------------------
subcode: socket_read_loop
    $(set:SIZE=1000)
    $local ts_socket_buffer[$(SIZE)+1]
    $while 1
        # $call Read, tn_socket, ts_socket_buffer, $(SIZE)
        n=read(tn_socket, ts_socket_buffer, $(SIZE))
        $if n<0
            $call debug_errno, Read Error
            break
        $elif n==0
            break
        $else
            BLOCK

# ---- Generic Server -------------------------------------
subcode: socket_server(port)
    $local socket server: 0:$(port)
    server.$listen

    $while 1
        $print "Accepting connection at port $(port)"
        server.$accept client_addr
        $if tn_socket>=0
            BLOCK
            tn_socket.$close

# ---- Common Util-----------------------------------------
subcode: fork_server
    tn_pid=fork()
    $if tn_pid==0
        $call Close, tn_socket_listen
        BLOCK
        $call Close, tn_socket
        exit(0)

subcode: print_client_address
    $local ts_ip_buffer[16]
    ts_ip=(char *)inet_ntop(AF_INET, &client_addr.sin_addr, ts_ip_buffer, 16)
    $call assert, ts_ip
    tn_port=ntohs(client_addr.sin_port)
    printf("Connection from %s:%d\n", ts_ip, tn_port)

subcode: sig_child
    $include sys/wait
    &call signal, SIGCHLD
        int tn_pid, tn_stat
        $while 1
            tn_pid=waitpid(-1, &tn_stat, WNOHANG)
            $if tn_pid>0
                printf("child %d terminated.\n", tn_pid)
            $else
                break

#---- Daemon ---------------------------------
fncode: daemon_start
    $include unistd
    $call daemon_fork
    # -- new session leader --
    $if setsid()<0
        return -1
    $call signal_ignore, SIGHUP
    $call daemon_fork
    # -- non_session_leader --
    chdir("/")
    $for i=0:3
        close(i)
    $include fcntl
    open("/dev/null", O_RDONLY)
    open("/dev/null", O_RDWR)
    open("/dev/null", O_RDWR)

    $call sig_child

subcode: daemon_fork
    tn_pid=fork()
    $if tn_pid<0
        $print "daemon_fork failed!"
        return -1
    $elif tn_pid>0
        # parent
        _exit(0)


#---- syslog ------------------------------------
subcode: syslog_start(prog)
    $include syslog
    openlog($(prog), LOG_NDELAY, LOG_USER)

subcode: syslog(@msg)
    syslog(LOG_INFO, $(msg))

# ---- Wrapper -----------------------------------------------------
subcode: Close(fd)
    tn_ret=close($(fd))
    $call assert, tn_ret==0

# ---- Signal handling ---------------------------
subcode: signal(signo)
    $function on_$(signo)(int signo)
        BLOCK
        return
    $call signal_set, $(signo), on_$(signo)

subcode: signal_ignore(signo)
    $call signal_set, $(signo), SIG_IGN

subcode: signal_set(signo, handler)
    $include signal
    $local struct sigaction struct_sigaction, struct sigaction struct_sigaction_out
    struct_sigaction.sa_handler=$(handler)
    sigemptyset(&struct_sigaction.sa_mask)
    struct_sigaction.sa_flags=0
    tn_ret=sigaction($(signo), &struct_sigaction, &struct_sigaction_out)
    $call assert, tn_ret>=0

# ---- Select -----------------------------------
subcode: select_read(fd)
    $if $(fd)>tn_select_max
        tn_select_max=$(fd)
    FD_SET($(fd), &select_rset)

subcode: select(@plist)
    $include sys/select
    $local fd_set select_rset
    tn_select_max=0

    $(foreach:p)
        $(if:p~timeout:)
            $eval select_timeout, $(p)
        $(elif:p~callsub:)
            $call $(p:8:strip)
        $(else)
            $call select_read, $(p)

    tn_select_max+=1
    $local tn_ret
    $(if:select_timeout)
        $my struct timeval select_timeout
        select_timeout.tv_sec=$(select_sec)
        select_timeout.tv_usec=$(select_usec)
        tn_ret=select(tn_select_max, &select_rset, NULL, NULL, &select_timeout)
    $(else)
        tn_ret=select(tn_select_max, &select_rset, NULL, NULL, NULL)
    $call assert, tn_ret>=0

    BLOCK

perlcode: select_timeout
    $if $param=~/timeout:(\d+)(\.(\d+))?/
        MyDef::compileutil::export_macro(-2, "select_timeout", 1)
        MyDef::compileutil::export_macro(-2, "select_sec", $1)
        $if !$3
            MyDef::compileutil::export_macro(-2, "select_usec", 0)
        $elif length($3)==3
            MyDef::compileutil::export_macro(-2, "select_usec", $3."000")
        $else
            MyDef::compileutil::export_macro(-2, "select_usec", $3)

subcode: on_select(fd)
    $if FD_ISSET($(fd), &select_rset)
        BLOCK

subcode: on_select_timeout
    $if select_timeout.tv_sec==0 && select_timeout.tv_usec==0
        BLOCK

#---- Thread -------------------------------------------------
subcode: run_thread(subname)
    $uselib pthread                                                 
    $function thread_fn(void * p_dummy)
        $return_type void *                                             
        $call $(subname)
    $local pthread_t thread_id                                      
    pthread_create(&thread_id, NULL, $(lamda), NULL)          
                                                                    
# DEBUG #############################################

subcode: debug_errno(label)
    # /usr/include/asm-generic/errno.h
    $print "$(label): errno = %d ", errno
    $map debug_errno_code, EAGAIN, EWOULDBLOCK, EBADF, EFAULT, EINTR, EINVAL, EIO, EISDIR, ECONNRESET
    $else
        $print "Unknown\n"

subcode: debug_errno_code(code)
    $case errno==$(code)
        $print "$(code)\n"

