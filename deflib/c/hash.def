include: c/str_pool.def
subcode:: _autoload
    $class hash, int_hash, str_hash
    $include stdlib
    $include string

macros: 
    hash_size: n_size, n_count, n_val_size
    hash_key: char * p_exist, int * p_key
    strhash: $(hash_size), $(hash_key), $(strpool)
    inthash: $(hash_size), $(hash_key)

subcode: libhash(int)
    $struct($(int)hash) $($(int)hash), void * p_val
    $list f_$(int)hash_resize, f_$(int)hash_lookup, f_$(int)hash_lookup_left, f_$(int)hash_exist

#---- init ------------------------------------ 
subcode: int_hash_init(var, scope, @type)
    $(set:hashtype=int)
    $call hash_init, $(var), $(scope), $(type)

subcode: str_hash_init(var, scope, @type)
    $(set:hashtype=str)
    $call hash_init, $(var), $(scope), $(type)

#----
subcode: hash_init(var, scope, @type)
    $(if:hashtype=int)
        $(set:hash=$(inthash))
    $(else)
        $(set:hashtype=str)
        $(set:hash=$(strhash))

    $(if:!use_libmydef)
        $struct($(hashtype)hash) $(hash), void * p_val

    $call hash_value_type
    $$(scope) struct $(hashtype)hash_$(T) * $(var)

    $allocate $(var)
    memset($(var), 0, sizeof($(var)))
    $(var)->n_val_size=sizeof($(type))

    $set_var_attr $(var), member_count=$(type_n)
    $set_var_attr $(var), exit=$(hashtype)_hash_exit
    $(if:hashtype=int)
        $set_var_attr $(var), class=int_hash
    $(else)
        $set_var_attr $(var), class=str_hash

#----
subcode: hash_value_type
    $(if:type=default)
	$(set:type=int)

    $(set:type_n=$(type:list:n))
    $(if:type_n=1)
        $(set:T=$(type))
	$struct($(hashtype)hash_$(T)) $(hash), $(type) * p_val
    $(else)
        $tuple $(type)
	$struct($(hashtype)hash_$(T)) $(hash), struct $(T) * p_val
	$(set:type=struct $(T))

    $(mexport:type,type_n,T)

#---- lookup ------------------------------------ 
#-- str_hash -----
subcode: str_hash_lookup(var, key)
    $call strhash_check_key, $(key)

    $(set:k=f_strhash_lookup($(var),$(key),$(keylen)))
    $yield $(var)->p_val[$(k)]

subcode: str_hash_lookup_left(var, key)
    $call strhash_check_key, $(key)

    $temp int k
    $(k)=f_strhash_lookup_left($(var),$(key),$(keylen))
    $yield $(var)->p_val[$(k)]

subcode: str_hash_exist(var, key)
    $call strhash_check_key, $(key)
    $yield f_strhash_exist($(var), $(key), $(keylen))

subcode: strhash_check_key(key)
    $(if:key~^")
	$(export:keylen=$(key:strlen))
    $(else)
	$get_type(keytype) $(key)
	$(if:keytype!=char *)
	    $(export:key="$(key)")
	    $(export:keylen=$(key:len))
	$(else)
            $get_var_attr $(key), strlen
            $(if:!strlen)
                $(export:keylen=strlen($(key)))
            $(else)
                $(export:keylen=$(strlen))

#-- int_hash -----
subcode: int_hash_lookup(var, key)
    $(set:k=f_inthash_lookup($(var),$(key)))
    $yield $(var)->p_val[$(k)]

subcode: int_hash_lookup_left(var, key)
    $temp int k
    $(k)=f_inthash_lookup_left($(var),$(key))
    $yield $(var)->p_val[$(k)]

subcode: int_hash_exist(var, key)
    $yield f_inthash_exist($(var), $(key))

#---- resize ------------------------------------ 
subcode: str_hash_resize(var, n)
    f_strhash_resize($(var), $(n))

subcode: int_hash_resize(var, n)
    f_inthash_resize($(var), $(n))

#---------------------------------------- 
#---------------------------------------- 
macros:
    hash_resize_ratio: 5/3
    hash_resize_upper: 85/100
    hash_resize_lower: 75/100

fncode: f_strhash_resize(void * hash, n_size)
    $local struct strhash * h = hash
    $call hash_resize, str

fncode: f_inthash_resize(void * hash, n_size)
    $call hash_resize, int

subcode: hash_resize(type)
    $local struct $(type)hash * h = hash
    $if n_size==0
        $if h->n_size<=0
            n_size=10
        $else
            n_size=h->n_size*$(hash_resize_ratio)
    $elif n_size<=h->n_size
	return

    $local tp_exist = h->p_exist
    $local tp_key=h->p_key
    $local tp_val=h->p_val
    tn_old_size=h->n_size
    h->n_size=n_size
    $(set:n=h->n_val_size)

    n_size++
    $allocate(n_size, 0) h->p_key, h->p_exist
    $allocate(n_size*$(n), 0) h->p_val

    $(if:type=str)
        $call resize_str_pool_n, h, n_size
    #---- copy contents -------------------
    $if tn_old_size>0
	$for i=1:tn_old_size+1
            $if tp_exist[i]
                $(if:type=str)
                    $call get_str_pool, h, tp_key[i]
                    k=f_strhash_lookup(h, $(s), $(strlen))
                $(else)
                    k=f_inthash_lookup(h, tp_key[i])
                h->p_exist[k]=1
                h->p_key[k]=tp_key[i]
                memcpy(h->p_val+k*$(n), tp_val+i*$(n), $(n))
        free(tp_exist)
	free(tp_key)
	free(tp_val)

#---------------------------------------- 
#---------------------------------------- 
fncode: f_strhash_lookup(void* hash, pc_key, int keylen)
    $call hash_lookup, str

fncode: f_inthash_lookup(void * hash, int key)
    $call hash_lookup, int

subcode: hash_lookup(type)
    $return_type int
    $local struct $(type)hash * h = hash
    $if h->n_size==0
	return 0
    #---------------------------------------- 
    $call get_$(type)hash_k
    #---------------------------------------- 
    $(if:type=int)
        $(set:keyeq=h->p_key[k]==key)
    $(else)
        $call get_str_pool, h, h->p_key[k]
        $(set:keyeq=$(strlen)==keylen && memcmp($(s), pc_key, keylen)==0)
    $while 1
	$if ! h->p_exist[k]
	    return k
        $else
            $if $(keyeq)
                return k
            $else
                #---- basic open addressing ----
                $if k==0
                    k=h->n_size-1
                $else
                    k--

#---- Hashing function,  *critical*
#-- FNV-1 hash 32bit
macros: 
    fnv_prime: 16777619
    fnv_offset: 2166136261u

subcode: get_strhash_k
    $(set:M=h->n_size)
    tu_h= $(fnv_offset)
    $for i=0:keylen
        tu_h=tu_h ^ pc_key[i]
        tu_h=tu_h * $(fnv_prime)
    k = tu_h % $(M)

subcode: get_inthash_k
    $(set:M=h->n_size)
    pc_key=(unsigned char *)&key
    tu_h= $(fnv_offset)
    $for i=0:sizeof(int)
        tu_h=tu_h ^ pc_key[i]
        tu_h=tu_h * $(fnv_prime)
    k = tu_h % $(M)

#---------------------------------------- 
#-  _left refer to lvalue in a assignment
fncode: f_strhash_lookup_left(void* hash, pc_key, int keylen)
    $call hash_lookup_left, str
    k=f_strhash_lookup(h, pc_key, keylen)
    $if !h->p_exist[k]
        h->p_key[k]=h->i_str
        $call addto_str_pool, h, pc_key, keylen
        h->p_exist[k]=1
        h->n_count++
    return k

fncode: f_inthash_lookup_left(void* hash, int key)
    $call hash_lookup_left, int
    k=f_inthash_lookup(h, key)
    $if !h->p_exist[k]
        h->p_key[k]=key
        h->p_exist[k]=1
        h->n_count++
    return k

subcode: hash_lookup_left(type)
    $local struct $(type)hash * h = hash
    $(set:limit=h->n_count+1>=h->n_size)
    $(set:upper=h->n_count >= h->n_size * $(hash_resize_upper))
    $if h->n_size==0 || $(limit) || (h->n_size>20 && $(upper))
        f_$(type)hash_resize(h, 0)
        # $print "f_$(type)hash_resize @ %s -> %d", pc_key, h->n_size

#---------------------------------------- 
fncode: f_strhash_exist(void* h, pc_key, int keylen)
    $return_type bool
    k=f_strhash_lookup(h, pc_key, keylen)
    return ((struct strhash *)h)->p_exist[k];

fncode: f_inthash_exist(void* h, int key)
    $return_type bool
    k=f_inthash_lookup(h, key)
    return ((struct inthash *)h)->p_exist[k];

########################################
#---- exit ------------------------------------ 
subcode: str_hash_exit(var)
    $if $(var)->n_size>0
        free($(var)->pn_str)
        free($(var)->pc_pool)

	free($(var)->p_exist)
	free($(var)->p_key)
	free($(var)->p_val)
    free($(var))

subcode: int_hash_exit(var)
    $if $(var)->n_size>0
	free($(var)->p_exist)
	free($(var)->p_key)
	free($(var)->p_val)
    free($(var))

#---------------------------------------- 
subcode: str_hash_each(var)
    $for 0:$(var)->n_size
        $if $(var)->p_exist[$(i)]
            $(set:value=$(var)->p_val[$(i)])
            $call get_str_pool, $(var), $(var)->p_key[$(i)]
            tn_temp=$(s)[$(strlen)]
            $(s)[$(strlen)]=0
            $(set:key=$(s))
            BLOCK
            $(s)[$(strlen)]=tn_temp

subcode: str_hash_foreach(var)
    &call each_str_pool, $(var)
        k=f_strhash_lookup($(var), $(s), $(strlen))
        $(set:value=$(var)->p_val[k])
        $(set:key=$(s))
            BLOCK

subcode: int_hash_each(var)
    $for 0:$(var)->n_size
        $if $(var)->p_exist[$(i)]
            $(set:value=$(var)->p_val[$(i)])
            $(set:key=$(var)->p_key[$(i)])
            BLOCK

#---------------------------------------- 
subcode: hash_debug(var)
    $print hash_debug $(var):
    &call hash_iter, $(var)
	$print "%d: %s => ${$(value)}", $(i), $(key)

