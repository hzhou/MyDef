subcode:: _autoload
    $include string
    $class socket

subcode: check_socket_error(name)
    $if tn_err<0
        $include <errno.h>
        $symbol int errno
        $print "socket error in $(name): errno = $errno"

subcode: socket_init(var, scope, @type)
    $$(scope) int $(var)

    $call get_sockaddr, default, $(type)
    $set_var_attr $(var), class=socket
    $set_var_attr $(var), af_family=$(af_family), sock_type=$(sock_type)

    $(var)=socket($(af_family), $(sock_type), 0)
    $(if:default_addrname)
        $(if:af_family=AF_UNIX)
            unlink($(path))
        tn_err=bind($(var), (const struct sockaddr  *)&$(default_addrname), sizeof($(default_addrname)))
        $call @check_error

subcode: get_sockaddr(addr, @param)
    $(unset:default_addrname)
    $eval parse_sockaddr, $(param)
    $(if:default_addrname)
        $(if:addr=default)
            $(set:addr=$(default_addrname))
        $(if:af_family=AF_INET)
            $call ip_addr, $(addr), $(ip), $(port)
        $(elif:af_family=AF_UNIX)
            $call unix_addr, $(addr), $(path)
        $(export:default_addrname)
    $(mexport:af_family,sock_type)
    $(if:path)
        $(export:path)

perlcode: parse_sockaddr
    my @tlist=split /,\s*/, $param
    my $af_family="AF_INET"
    my $sock_type="SOCK_STREAM"
    my ($ip, $port, $path)
    $foreach $t in @tlist
        $if $t eq "udp"
            $sock_type="SOCK_DGRAM"
        $elif $t eq "tcp"
            $sock_type="SOCK_STREAM"

        $elif $t =~/(\d+)\.(\d+)\.(\d+)\.(\d+):(\d+)/
            $af_family="AF_INET"
            $ip=sprintf("0x%02x%02x%02x%02x", $1,$2,$3,$4)
            $port=$5
        $elif $t =~/(.*):(\d+)/
            $af_family="AF_INET"
            $if $1 eq "localhost"
                $ip="0x7f000001"
            $elif $1 eq "0"
                $ip="0x0"
            $else
                print "only numerical ip address supported\n"
            $port=$2

        $elif $t=~/^\//
            $af_family="AF_UNIX"
            $path="\"$t\""

    my $default_addrname
    $if $ip or $path
        $if $af_family eq "AF_INET"
            $default_addrname="t_addr_inet"
        $else
            $default_addrname="t_addr_unix"

    $(for:a in af_family, sock_type, ip, port, path, default_addrname)
        $if $$(a)
            MyDef::compileutil::set_current_macro("$(a)", $$(a))

#----- Socket Address ----------------------------------- 
subcode: ip_addr(addr, ip, port)
    $include <netinet/in.h>
    $local struct sockaddr_in $(addr)
    memset(&$(addr), 0, sizeof($(addr)))
    $(addr).sin_family=AF_INET
    $(addr).sin_port=htons($(port))
    $(addr).sin_addr.s_addr=htonl($(ip))

subcode: unix_addr(addr, path)
    $include <sys/socket.h>
    $include <sys/un.h>
    $local struct sockaddr_un $(addr)
    memset(&$(addr), 0, sizeof($(addr)))
    $(addr).sun_family=AF_UNIX
    strcpy($(addr).sun_path, $(path))

subcode: ip6_addr(addr, ip, port)
    # to be implemented

#------
subcode: socket_addr_param(var, addr)
    $(if:addr!=NULL)
        $get_var_attr $(var), af_family
        $(if:af_family=AF_UNIX)
            $local struct sockaddr_un $(addr)
        $(else)
            $local struct sockaddr_in $(addr)
        tu_sock_size=sizeof($(addr))
        $(set:addr_param=(struct sockaddr *)&$(addr), &tu_sock_size)
    $(else)
        $(set:addr_param=NULL, 0)
    $(export:addr_param)

#---- 
subcode: socket_close(var)
    close($(var))

#---- UDP send/recv ------------------------------------ 
subcode: socket_sendto(var, addr, msg)
    $(if:addr=NULL)
        $(set:addr_param=NULL, 0)
    $(else)
        $(set:addr_param=(struct sockaddr *)&$(addr), sizeof($(addr)))
    $(if:msg~")
        tn_err=sendto($(var), $(msg), $(msg:strlen), 0, $(addr_param))
    $(else)
        $get_type(type) $(msg)_len
        $(if:type=int)
            tn_err=sendto($(var), $(msg), $(msg)_len, 0, $(addr_param))
        $(else)
            tn_err=sendto($(var), $(msg), strlen($(msg)), 0, $(addr_param))
    $call check_socket_error, sendto

subcode: socket_recvfrom(var, addr, msg)
    $call socket_addr_param, $(var), $(addr)
    $local char $(msg)[4096]
    $local int $(msg)_len
    $(msg)_len=recvfrom($(var), $(msg), 4096, 0, $(addr_param))
    tn_err=$(msg)_len
    $call check_socket_error, recvfrom
    $else
        $(msg)[$(msg)_len]=0

subcode: socket_recv(var, msg)
    $call socket_recvfrom, $(var), NULL, $(msg)

subcode: socket_send(var, msg)
    $call socket_sendto, $(var), NULL, $(msg)

#---- TCP ------------------------------------------
subcode: socket_listen(var)
    tn_err=listen($(var), 4)
    $call check_socket_error, listen

subcode: socket_accept(var, addr)
    $call socket_addr_param, $(var), $(addr)
    $local tn_socket
    $set_var_attr tn_socket, class=socket
    $get_var_attr $(var), af_family, sock_type
    $set_var_attr tn_socket, af_family=$(af_family), sock_type=$(sock_type)
    tn_socket = accept($(var), $(addr_param))
    tn_err=tn_socket
    $call check_socket_error, accept

subcode: socket_connect(var, addr)
    $(set:addr_param=(struct sockaddr *)&$(addr), sizeof($(addr)))
    tn_err=connect($(var), $(addr_param))
    $call check_socket_error, connect
