
subcode: skip(@pat)
    $case $src=~/\G$(pat)/gc
        next

subcode: symbol(@pat)
    $case $src=~/\G($(pat))/gc
        $cur = [$1, $1]

subcode: token(type, @pat)
    $case $src=~/\G($(pat))/gc
        $cur = [$1, "$(type)"]

# --------------
subcode: double_quote
    $case $src=~/\G("(?:[^\\]+|\\.)*")/gc
        $cur = [$1, '"']

subcode: single_quote
    $case $src=~/\G('(?:[^\\]+|\\.)*')/gc
        $cur = [$1, "'"]

subcode: bracket
    $case $src=~/\G([\(\[\{])/gc
        #-- %prec '('=>-1, 't('=>100, ...
        $cur = [$1, "t$1"]
    $elif $src=~/\G([\)\]\}])/gc
        $cur = [$1, $1]

subcode: brace
    $case $src=~/\G(\{)/gc
        #-- %prec '('=>-1, 't('=>100, ...
        $cur = [$1, "t$1"]
    $elif $src=~/\G(\})/gc
        $cur = [$1, $1]

# ---- routines for grab ---------------- 
subcode: grab_brace
    $(set:o={)
    $(set:c=})
    $call grab_group

subcode: grab_bracket
    $(set:o=[)
    $(set:c=])
    $call grab_group

subcode: grab_brace
    $(set:o=()
    $(set:c=))
    $call grab_group

subcode: grab_group
    $(if:type=brace)
    my $t
    &call if_lex, \s*\$(o)
        my $level=1
        $while 1
            &call if_lex, (\\.|[^\\]+)
                $t.=$1
            &call if_lex, \$(o)
                $level++
                $t.='$(o)'
            &call if_lex, \$(c)
                $level--
                $if $level>0
                    $t.='$(c)'
                $else
                    break

# ---- routines for process -----------
# -- check_precedence, reduce_stack

