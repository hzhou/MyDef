# $(set:timer_repeat=1) to set periodic timer

subcode: set_timer(ID, timeout)
    $eval timer_id_define, $(ID)
    $(if:!$(ID)_fn)
        $function timerfn_$(ID)(HWND hwnd, UINT msg, UINT_PTR id, DWORD n_time)
            $return_type VOID CALLBACK
            BLOCK
            $(if:!timer_repeat)
                KillTimer(hwnd, id)
        $(set0:$(ID)_fn=$(lambda))
    SetTimer(hwnd_main, $(ID), $(timeout), $($(ID)_fn)) 

subcode: set_timer_with_pointer(ID, timeout, pointer)
    $eval timer_id_define, $(ID)
    $get_type(type) $(pointer)
    $(if:!$(ID)_fn)
        $function timerfn_$(ID)(HWND hwnd, UINT msg, UINT_PTR id, DWORD n_time)
            $return_type VOID CALLBACK
            $local $(type) $(pointer)
            $(pointer)=($(type))(id-$(ID))
            BLOCK
            $(if:!timer_repeat)
                KillTimer(hwnd, id)
        $(set0:$(ID)_fn=$(lambda))
    SetTimer(hwnd_main, (UINT_PTR)$(pointer)+$(ID), $(timeout), $($(ID)_fn)) 

# -------------------------------------
subcode: kill_timer(ID)
    KillTimer(hwnd_main, $(ID))

# ------------------
perlcode: timer_id_define(ID)
    $if $param=~/^(\w+)/
        $if !defined $defines{$1}
            $if !$misc_vars{timer_id_base}
                $misc_vars{timer_id_base}=1
            $else
                $misc_vars{timer_id_base}++
            add_define($1, $misc_vars{timer_id_base})

