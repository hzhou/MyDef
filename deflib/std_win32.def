include: std_c.def
include: ext.def
include: win32_gdi.def

# GUI needs Model View Controller
# think about the editor: 
#    View is the window
#    Model is the text buffer
#    Controller is the code that connects View and Model
subcode: win32_autoload
    $register_prefix(ui) UINT
    $register_prefix(lpstr) LPSTR

    $register_prefix(hwnd) HWND
    $register_prefix(hdc) HDC
    $register_prefix(hmenu) HMENU
    $register_prefix(rect) RECT
    $register_prefix(hfont) HFONT

    $register_prefix(bmph) BITMAPINFOHEADER
    $register_prefix(bmp) DWORD *

    $define(snprintf) sprintf_s

subcode: basic_frame
    $call main_fn_list
    $list WinMain

fncode: WinMain
    $call win_main
    $call win_loop

subcode: win_main(mainname)
    $global hwnd_main
    $call register_wndclass, "$(mainname)", WndProc_main
    $call create_window, hwnd_main, "$(mainname)"
    $call win_show, hwnd_main

subcode: win_show(hwnd)
    NEWLINE
    ShowWindow($(hwnd), n_cmdshow)
    UpdateWindow($(hwnd))

subcode: win_loop
    NEWLINE
    $local MSG msg
    $while GetMessage(&msg, NULL, 0, 0)>0
	TranslateMessage(&msg)
	DispatchMessage(&msg)

# ---------
subcode: on_paint
    $local PAINTSTRUCT ps
    $local HDC hdc
    hdc = BeginPaint(hwnd, &ps)
    BLOCK
    EndPaint(hwnd, &ps)
    return 0

###############################################################
subcode:: autoload_symbols
    $symbol s_printf_buffer[100], n_printf_length=0
    
subcode: sprint(@fmt)
    $auto_global s_printf_buffer[100], n_printf_length=0
    $eval parse_fmt, $(fmt)
    n_printf_length=_snprintf(s_printf_buffer, 100, $(fmt))
    $if n_printf_length<0
	s_printf_buffer[99]='\0'
	n_printf_length=99
    $(mexport:s=s_printf_buffer,n=n_printf_length)

# ----------------------------------------------------------------
subcode: init_println
    $local n_cur_text_x, n_cur_text_y, n_text_height
    n_cur_text_x=10
    n_cur_text_y=10
    n_text_height=20
    $call newfont

subcode: move_to(x, y)
    n_cur_text_x=$(x)
    n_cur_text_y=$(y)

subcode: println(@msg)
    $uselib gdi32
    _snprintf(ts_msg_buffer, 200, $(msg))
    TextOut(hdc, n_cur_text_x, n_cur_text_y, ts_msg_buffer, strlen(ts_msg_buffer))
    n_cur_text_y+=n_text_height

subcode: fillrect(left, top, right, bot)
    $local t_rect
    t_rect.left=$(left)
    t_rect.top=$(top)
    t_rect.right=$(right)
    t_rect.bottom=$(bot)
    FillRect(hdc, &t_rect, (HBRUSH)(COLOR_WINDOW+1))
###############################################################
subcode: msgbox(@msg)
    $local ts_msg_buffer[1000]
    sprintf(ts_msg_buffer, $(msg))
    MessageBox(hwnd_main, ts_msg_buffer, "Message Box", MB_OK)

subcode: init_console
    AllocConsole()
    freopen("conout$","w",stdout)
    freopen("conout$","w",stderr)
    printf("Console ready ...\n")     
###############################################################
subcode: openfilename
    $uselib comdlg32
    $register_name(ofn) OPENFILENAME
    $local ofn, ts_file[260], b_result
    ZeroMemory(&ofn, sizeof(ofn))
    ofn.lStructSize=sizeof(ofn)
    ofn.hwndOwner=hwnd_main
    ofn.lpstrFile=ts_file
    ofn.lpstrFile[0]='\0'
    ofn.nMaxFile=sizeof(ts_file)
    ofn.lpstrFilter="All\0*.*\0\0"
    ofn.nFilterIndex=1
    ofn.lpstrFileTitle=NULL
    ofn.nMaxFileTitle=0
    ofn.lpstrInitialDir=NULL
    ofn.Flags=OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
    b_result=GetOpenFileName(&ofn)

# ---------------------------------------------------------------
subcode: dialog(name)
    $(block:global_init)
	$eval wndproc, DlgProc_$(name)
    DialogBox(cur_instance, MAKEINTRESOURCE(dialog_$(name)), hwnd, DlgProc_$(name))

subcode: create_dialog(name, var)
    $(block:global_init)
	$eval wndproc, DlgProc_$(name)
    $(var)=CreateDialog(cur_instance, MAKEINTRESOURCE(dialog_$(name)), hwnd, DlgProc_$(name))

# ---------------------------------------------------------------
subcode: SetClassLong(val)
    $(if:val:4=IDC_)
	SetClassLongPtr(hwnd, GCL_HCURSOR, (LONG_PTR)LoadCursor(NULL, MAKEINTRESOURCE($(val))))

# ---------------------------------------------------------------
subcode: create_font(hfont, name, size)
    $(hfont) = CreateFont ($(size), 0, 0, 0, FW_DONTCARE, FALSE, FALSE, FALSE, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, FF_DONTCARE, $(name))

