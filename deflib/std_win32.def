# GUI needs Model View Controller
# think about the editor: 
#    View is the window
#    Model is the text buffer
#    Controller is the code that connects View and Model
subcode: win32_autoload
    $register_prefix(ui) UINT
    $register_prefix(lpstr) LPSTR

    $register_prefix(hwnd) HWND
    $register_prefix(hmenu) HMENU
    $register_prefix(rect) RECT
    $register_prefix(hfont) HFONT

    $register_prefix(bmph) BITMAPINFOHEADER
    $register_prefix(bmp) DWORD *

subcode: basic_frame
    $call init_error
    #$call hgdiobj_collector
    $call main_fn_list
    $list WinMain

fncode: WinMain
    $call win_main
    $call win_loop

subcode: win_main
    $MakeView main

    ShowWindow(view->hwnd, n_cmdshow)
    UpdateWindow(view->hwnd)
    NEWLINE

subcode: win_loop
    $local MSG msg
    $while GetMessage(&msg, NULL, 0, 0)>0
	TranslateMessage(&msg)
	DispatchMessage(&msg)

###############################################################
subcode: WM_MSG(MSG)
    case WM_$(MSG):
	BLOCK
	break;

subcode: WM_PAINT
    case WM_PAINT:
	$local PAINTSTRUCT ps, HDC hdc
	hdc=BeginPaint(hwnd, &ps)
	BLOCK
	EndPaint(hwnd, &ps)
	break

###############################################################
subcode: init_error
    $global s_errormsg_buffer[1000], n_errormsg_end=0

subcode: add_error_f(msg)
    $if n_errormsg_end+128<1000
	char* s=s_errormsg_buffer+n_errormsg_end+1
	int n=sprintf(s, $(msg))
	$if n>100
	    n=sprintf(s, "Error Message Buffer Overrun!")
	s_errormsg_buffer[n_errormsg_end]=n
	n_errormsg_end+=n+1

subcode: draw_hello
    $if n_errormsg_end>0
	int x=10
	int y=50
	char* s=s_errormsg_buffer
	$while s-s_errormsg_buffer<n_errormsg_end
	    #MoveToEx(hdc, x, y, NULL)
	    TextOut(hdc, x, y, s+1, (int)*s)
	    s+=*s+1
	    y+=20
    $else
	TextOut(hdc, 10, 20, "Hello World", 11)

# -----------------------------------------------------------------------
subcode: hgdiobj_collector
    $call ref_counting, 100, hgdi, HGDIOBJ

subcode: hgdi_free
    DeleteObject(tp->value)
# ----
subcode: init_println
    $local n_cur_text_x, n_cur_text_y, n_text_height
    n_cur_text_x=10
    n_cur_text_y=10
    n_text_height=20
    $call newfont

subcode: move_to(x, y)
    n_cur_text_x=$(x)
    n_cur_text_y=$(y)

subcode: println(@msg)
    $uselib gdi32
    _snprintf(ts_msg_buffer, 200, $(msg))
    TextOut(hdc, n_cur_text_x, n_cur_text_y, ts_msg_buffer, strlen(ts_msg_buffer))
    n_cur_text_y+=n_text_height

subcode: fillrect(left, top, right, bot)
    $local t_rect
    t_rect.left=$(left)
    t_rect.top=$(top)
    t_rect.right=$(right)
    t_rect.bottom=$(bot)
    FillRect(hdc, &t_rect, (HBRUSH)(COLOR_WINDOW+1))
###############################################################
subcode: msgbox(@msg)
    sprintf(ts_msg_buffer, $(msg))
    MessageBox(hwnd_main, ts_msg_buffer, "Message Box", MB_OK)

subcode: init_console
    AllocConsole()
    freopen("conout$","w",stdout)
    freopen("conout$","w",stderr)
    printf("Console ready ...\n")     
###############################################################
subcode: openfilename
    $uselib comdlg32
    $register_name(ofn) OPENFILENAME
    $local ofn, ts_file[260], b_result
    ZeroMemory(&ofn, sizeof(ofn))
    ofn.lStructSize=sizeof(ofn)
    ofn.hwndOwner=hwnd_main
    ofn.lpstrFile=ts_file
    ofn.lpstrFile[0]='\0'
    ofn.nMaxFile=sizeof(ts_file)
    ofn.lpstrFilter="All\0*.*\0\0"
    ofn.nFilterIndex=1
    ofn.lpstrFileTitle=NULL
    ofn.nMaxFileTitle=0
    ofn.lpstrInitialDir=NULL
    ofn.Flags=OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;
    b_result=GetOpenFileName(&ofn)

resource: view_main
    size: 800, 600
    text: default window

########## Defaults ######################################
resource: default_wnd
    cbSize: sizeof(WNDCLASSEX)
    style: 0
    cbClsExtra: 0
    cbWndExtra: 0
    hIcon: NULL
    hIconSm: NULL
    hCursor: LoadCursor(NULL, IDC_ARROW)
    hbrBackground: NULL
    lpszMenuName: NULL

resource: default_view
    style_ex: 0
    style: 0
    position: 10, 10
    size: 800, 600
    id: NULL
    text: No Name

resource: default_font
    lfHeight: 12
    lfWidth: 0
    lfEscapement: 0
    lfOrientation: 0
    lfWeight: FW_DONTCARE
    lfItalic: 0
    lfUnderline: 0
    lfStrikeOut: 0
    lfCharSet: DEFAULT_CHARSET
    lfOutPrecision: OUT_DEFAULT_PRECIS
    lfClipPrecision: CLIP_DEFAULT_PRECIS
    lfQuality: DEFAULT_QUALITY
    lfPitchAndFamily: FF_ROMAN|DEFAULT_PITCH
    lfFaceName: "Times New Roman"

######### Control Views #########################################
resource: ctl_label
    wndclass: STATIC
    style: WS_CHILD|WS_VISIBLE|SS_LEFT
    font: Arial, 12

resource: ctl_button
    wndclass: button
    style: WS_CHILD|WS_VISIBLE|BS_PUSHBUTTON

#### Default Calls ################################################
# ----
subcode: register_wndclass(@plist)
    $local WNDCLASSEX wc
    
    wc.cbSize = sizeof(WNDCLASSEX);
    wc.style = 0;
    $(ifeach:p:8=WndProc_)
	wc.lpfnWndProc = $(p);
    $(else)
	wc.lpfnWndProc = WndProc;
    wc.cbClsExtra = 0;
    wc.cbWndExtra = 0;
    wc.hInstance = cur_instance;
    $(ifeach:p=CUSTOM_ICON)
	#skip
    $(else)
	$call register_wndclass_icon, $(plist)
    $(ifeach:p:4=IDC_)
	wc.hCursor = LoadCursor(NULL, $(p))
    $(else)
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = NULL;
    wc.lpszMenuName = NULL;
    $(ifeach:p:2=s_)
	wc.lpszClassName = $(p)
    $(else)
	wc.lpszClassName = "Default"

    RegisterClassEx(&wc);

subcode: register_wndclass_icon(@plist)
    $(ifeach:p:4=IDI_)
	wc.hIcon = LoadImage(cur_instance, MAKEINTRESOURCE($(p)), IMAGE_ICON, GetSystemMetrics(SM_CXICON), GetSystemMetrics(SM_CYICON), LR_DEFAULTCOLOR|LR_SHARED);
	wc.hIconSm = LoadImage(cur_instance, MAKEINTRESOURCE($(p)), IMAGE_ICON, GetSystemMetrics(SM_CXSMICON), GetSystemMetrics(SM_CYSMICON), LR_DEFAULTCOLOR|LR_SHARED);
    $(else)
	wc.hIcon = NULL
	wc.hIconSm = NULL

# ---------------------------------------------------------------
subcode: create_window(hwnd, name)
    $(hwnd)=CreateWindowEx(0, $(name), $(name), WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, tn_w, tn_h, NULL, NULL, cur_instance, NULL)
    
# ---------------------------------------------------------------
subcode: SetClassLong(val)
    $(if:val:4=IDC_)
	SetClassLongPtr(hwnd, GCL_HCURSOR, (LONG_PTR)LoadCursor(NULL, MAKEINTRESOURCE($(val))))

# ---------------------------------------------------------------
subcode: create_font(hfont, name, size)
    $(hfont) = CreateFont ($(size), 0, 0, 0, FW_DONTCARE, FALSE, FALSE, FALSE, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, FF_DONTCARE, $(name))

# ---------------------------------------------------------------
subcode: quick_gdi(name)
    BLOCK RELEASE
    $my HGDIOBJ t_old_$(name)
    t_old_pen=SelectObject(hdc, t_new_$(name))
    $(block:_post)
	SelectObject(hdc, t_old_$(name))
	DeleteObject(t_new_$(name))

subcode: quick_pen(@plist)
    BLOCK RELEASE
    $my HPEN t_new_pen
    $(set:ps=PS_SOLID,pw=0,color=0)
    $(ifeach:p:3=PS_)
	$(export:ps=$(p))
    $(ifeach:p~[0-9]+)
	$(export:pw=$(p))
    $(ifeach:p:6=color_)
	$(export:color=$(p))
    t_new_pen=CreatePen($(ps), $(pw), $(color))
    $call quick_gdi, pen

subcode: local_brush(var, @plist)
    BLOCK RELEASE
    my HBRUSH $(var)
    $(set:ps=color=0)
    $(ifeach:p:6=color_)
	$(export:color=$(p))
    $(var)=CreateSolidBrush($(color))
    $(block:_post)
	DeleteObject($(var))
