include: c_darray.def

## AST Definitions ####################################
# ---- ast: Abstract Syntax Tree --------------
subcode:: _autoload
    $struct(ast) int id, int type
    $define(AST_GROUP) 1
    $define(AST_STRING) 2

# ----
subcode: new_ast(type, id)
    $(set:ast=tp_ast_$(type))
    $local struct ast_$(type) * $(ast)
    $(ast)=(struct ast_$(type)*)malloc(sizeof(struct ast_$(type)))
    $(ast)->id=$(id)
    $(export:ast)

# ---- Group ----
subcode:: _autoload
    $struct(ast_group) int id, int type, int n, struct ast ** list

subcode: new_ast_group(id, n)
    $call new_ast, group, $(id)
    $(ast)->type=AST_GROUP
    $(ast)->n=$(n)
    $if $(n)>0
	$(ast)->list=(struct ast**)malloc($(n)*sizeof(struct ast *))
    $(export:ast)

subcode: get_ast_group(p)
    $(export:v=((struct ast_group *)$(p)))

subcode: ast_group_each(p, p2)
    $(set:v=((struct ast_group *)$(p)))
    $for i=0:$(v)->n
	$local struct ast * p2
	p2=$(v)->list[i]
	BLOCK
    
# ---- String ----
subcode:: _autoload
    $struct(ast_string) int id, int type, char * val

subcode: new_ast_string(id, s)
    $call new_ast, string, $(id)
    $(ast)->type=AST_STRING
    $(ast)->val=$(s)
    $(export:ast)

subcode: get_ast_string(p)
    $(export:v=(((struct ast_string *)$(p))->val))

## AST iteration ##########################################
subcode:: _autoload
    $list get_rule_name
    $list free_ast, print_ast
    # $list dump_ast, string_ast 

subcode: iter_ast(name)
    # Recursively go through p, 
    #   $(name) is the recursive name
    $if p
	$if p->id>0
	    #  placeholder for extension cases such number type --------
	    $call @$(name)_ast_cases 
	    #  Otherwise, classic types ---------------------------------
	    $if p->type==AST_STRING
		$call get_ast_string, p
		$call @$(name)_ast_string
	    $elif p->type==AST_GROUP
		$call get_ast_group, p
		$call @$(name)_ast_group
	$else
	    $call @$(name)_ast_0

# ------------------------------------
fncode: free_ast(struct ast *p)
    $call iter_ast, free

subcode:: free_ast_string
    free($(v))
    free(p)

subcode: free_ast_group
    $if $(v)->n>0
	$for i=0:$(v)->n
	    free_ast($(v)->list[i])
	free($(v)->list)
    free(p)

subcode: free_ast_0
    free(p)

# ------------------------------------
fncode: print_ast(struct ast * p, n_indent)
    $call iter_ast, print

subcode: print_ast_indent(n)
    $for i=0:$(n)
	    printf("    ")

subcode: print_ast_string
    $call print_ast_indent, n_indent
    printf("%s \x1b[35m%s\x1b[0m\n", get_rule_name(p->id), $(v))

subcode: print_ast_group
    $call @print_token_process
    $call print_ast_indent, n_indent
    printf("%s [%d]\n", get_rule_name(p->id), $(v)->n)
    $for i=0:$(v)->n
	print_ast($(v)->list[i], n_indent+1)

subcode: print_ast_0
    $call print_ast_indent, n_indent
    printf("id=%d\n", p->id)

# ------------------------------------
fncode: dump_ast(struct ast * p)
    $call iter_ast, dump

subcode: dump_ast_string
    printf("%s", $(v))

subcode: dump_ast_group
    $for i=0:$(v)->n
	dump_ast($(v)->list[i])

# ------------------------------------
fncode: string_ast(struct ast *p)
    $return_type char *
    $call iter_ast, string
	    
subcode: string_ast_string
    return strdup($(v))

subcode: string_ast_group
    $local n
    n=$(v)->n
    $allocate(n) tpn_len, tps_str
    tn_len=0
    $for i=0:n
	tps_str[i]=string_ast($(v)->list[i])
	tpn_len[i]=strlen(tps_str[i])
	tn_len+=tpn_len[i]
    $allocate(tn_len) s_str
    t_s=s_str
    $for i=0:n
	memcpy(t_s, tps_str[i], tpn_len[i])
	free(tps_str[i])
	t_s+=tpn_len[i]
    s_str[tn_len]='\0'
    return s_str

## Type extension ##########################################
perlcode: ast_id_define
    $if $param=~/^(\w+)/
	$if !defined $defines{$1}
	    $if !$misc_vars{ast_id_base}
		$misc_vars{ast_id_base}=20001
	    $else
		$misc_vars{ast_id_base}++
	    add_define($1, $misc_vars{ast_id_base})

	    my $blockout=MyDef::compileutil::get_named_block("reverse_ast_id")
	    push @$blockout, "else if(n_id==$1) return \"$1\";"

fncode: get_rule_name(n_id)
    $return_type char *
    $if 0
	return NULL
    DUMP_STUB reverse_ast_id
    $else NoWarn
	$global s_printf_buffer[201]
	snprintf(s_printf_buffer, 200, "[%d]", n_id )
	return s_printf_buffer
/*
# ---- extension: number ----------------------
subcode:: _autoload
    $eval ast_id_define, G_number
    $struct(ast_number) int id, double val

subcode: new_ast_number(v)
    $call new_ast, number, G_number
    $(ast)->val=$(v)
    $(export:ast)

subcode: get_ast_number(p, var)
    $(export:$(var)=(((struct ast_number *)$(p))->val))

subcode:: free_ast_cases
    $if p->id==G_number
	free(p)
	return

subcode:: print_ast_cases
    $if p->id==G_number
	$call get_ast_number, p, v
	printf("T_%s \x1b[35m%g\x1b[0m\n", get_lex_name(p->id), $(v))
	return
*/

