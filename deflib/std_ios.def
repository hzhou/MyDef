subcode: ios_autoload
    $register_prefix(id) id
    $register_prefix(obj) id
    $register_prefix(rct) CGRect
    $register_prefix(pt) CGPoint
    $register_prefix(sz) CGSize
    $register_prefix(nss) NSString *
    $register_prefix(nsarray) NSArray *
    $register_prefix(nsdict) NSDictionary *

    $register_name(touch) UITouch *

#### Basic Frame
subcode: basic_frame
    $call @appmain
    $subclass AppDelegate
	$prop(strong,nonatomic) UIWindow * window
	$method on_start
	    self.window=new UIWindow
	    self.window.backgroundColor = [UIColor whiteColor]
	    $call on_start
	    self.window->makeKeyAndVisible
	    return YES
	$method on_finish
	    $call @on_finish
    $list n_main

subcode: on_start
    root=new root_controller
    self.window->addSubview root.view

fncode: n_main
    @autoreleasepool {
	return UIApplicationMain(argc, argv, nil, @"AppDelegate")
    }

#### Debug Routines
subcode: dump_rct(rct)
    NSLog(@"$(rct): %fx%f+%f+%f", $(rct).size.width, $(rct).size.height, $(rct).origin.x, $(rct).origin.y);

#### Convienient Routine
subcode: makebutton(name, x, y, w, h, title)
    $(name)=new UIButton
    $(name)->setFrame CGRectMake($(x), $(y), $(w), $(h))
    $(name)->setTitle @"$(title)" forState:UIControlStateNormal

subcode: prepare_sound_item(name)
    $include AVFoundation/AVAudioPlayer
    nss_f$(name)=FILE($(name).caf)
    @audio_$(name)=new AVAudioPlayer nss_f$(name)
    audio_$(name)->prepareToPlay
    audio_$(name).delegate=self

#### Short Methods
subcode: support_popover
    $implement UIPopoverControllerDelegate

subcode: SET_Rotate(type)
    $method shouldAutorotate
	$(if:type=auto)
	    return YES
	$(elif:type==portrait)
	    return  (interfaceOrientation == UIInterfaceOrientationPortrait || interfaceOrientation == UIInterfaceOrientationPortraitUpsideDown) 
	$(elif:type==landscape)
	    return  (interfaceOrientation == UIInterfaceOrientationLandscapeLeft || interfaceOrientation == UIInterfaceOrientationLandscapeRight) 
	$(else)
	    return NO

#### UINavigationController
subcode: nav_button(title, method)
    btn_rightbar=new UIBarTitle $(title), self, $(method)
    self.navigationItem.rightBarButtonItem=btn_rightbar

subcode: nav_to(subcontroller)
    [self.navigationController pushViewController:$(subcontroller) animated:YES]

#### TableViewController
subcode: tableview_standard
    $method on_init
	$if self = [super initWithStyle:UITableViewStylePlain]
	    @array_content=new Array 5
	return self
    $method num_sections
	return 1
    $method num_rows
	$if [array_content count]
	    return [array_stacks count]
	$else
	    return 1

subcode: tableview_on_cell
    $method on_cell
	$register_name(cell) UITableViewCell *
	cell=[tableView dequeueReusableCellWithIdentifier:@"cell"]
	$if cell==nil
	    cell=new UITableViewCell @"cell"
	n_row=indexPath.row
	$if [array_content count]
	    BLOCK
	$else
	    cell.textLabel.text=@"Empty."
	return cell

#### Fields and Macroes
resource: class_default
    Default:
	dealloc_post: [super dealloc]
    ## Basics
    Hash:
	class: NSMutableDictionary
	init_spec: initWithCapacity:$1
    Array:
	class: NSMutableArray
	init_spec: initWithCapacity:$1
    ## Delegates
    AppDelegate:
	class: UIResponder
	protocol: UIApplicationDelegate
	on_start: - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions: (NSDictionary *)launchOptions
	on_finish: - (void) applicationWillTerminate: (UIApplication *)app
    ## NSTimer
    NSTimer:
	create_spec: scheduledTimerWithTimeInterval:$1 target:self selector:@selector($2) userInfo:nil repeats:YES
    NSTimerOnce:
	class: NSTimer
	create_spec: scheduledTimerWithTimeInterval:$1 target:self selector:@selector($2) userInfo:nil repeats:NO

    ## Dialogs and Buttons
    UIPopoverControllerDelegate:
	on_dismiss: - (void) popoverControllerShouldDismissPopover: (UIPopoverController *)uipop
	after_dismiss: - (void) popoverControllerDidDismissPopover: (UIPopoverController *)uipop
    UIPop:
	class: UIPopoverController
	init_spec: initWithContentViewController:$1
    UIBarSystem:
	class: UIBarButtonItem
	init_spec: initWithBarButtonSystemItem:UIBarButtonSystemItem$1 target:$2 action:@selector($3)
    UIBarTitle:
	class: UIBarButtonItem
	init_spec: initWithTitle:@"$1" style:UIBarButtonItemStylePlain target:$2 action:@selector($3)

    ## UIViewController
    UINavigationController:
	super: UIViewController
	init_spec: initWithRootViewController:[[$1 alloc] init]
    UITableViewController:
	super: UIViewController
	init_spec: initWithStyle:UITableViewStyle$1 #Plain or Grouped
	on_init: - (id)init
	num_sections: - (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
	num_rows: - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
	on_cell: - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
	on_select: - (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
    UIViewController:
	shouldAutorotate: - (BOOL)shouldAutorotateToInterfaceOrientation: (UIInterfaceOrientation)interfaceOrientation
    ## Acessory
    UITableViewCell:
	init_spec: initWithFrame:CGRectZero reuseIdentifier:$1

    ## UIView
    UIWindow:
	init_default: initWithFrame:[[UIScreen mainScreen] bounds]

    UIView:
	init_spec: initWithFrame:$1
	layerClass: + (Class) layerClass
	on_init: - (id)initWithFrame:(CGRect)aRect
	    pre: [super initWithFrame:aRect]
	    post: return self
	on_layout: - (void)layoutSubviews
	touchesBegan: - (void)touchesBegan: (NSSet *)touches withEvent:(UIEvent *)event
	touchesMoved: - (void)touchesMoved: (NSSet *)touches withEvent:(UIEvent *)event
	touchesEnded: - (void)touchesEnded: (NSSet *)touches withEvent:(UIEvent *)event
	on_draw: - (void)drawRect: (CGRect)rect
	    pre: $call cg_start

    ## Multimedia
    AVAudioPlayer:
	init_spec: initWithContentsOfURL:[NSURL fileURLWithPath:$1] error: nil
    ## OpenGL
    EAGLContext:
	init_default: initWithAPI:kEAGLRenderingAPIOpenGLES1
	init_spec: initWithAPI:kEAGLRenderingAPIOpenGLES$1

macros:
    MainScreen: [UIScreen mainScreen]
    AppFrame: [$(MainScreen) applicationFrame]

##################################################
resource: ctl_label
    class: UILabel
    do_text: $view.text=@"$text"

resource: ctl_edit
    class: UITextField
    
resource: ctl_image
    class: UIImageView

resource: ctl_button
    class: UIButton
    type: UIButtonTypeRoundedRect
    create: $view = [UIButton buttonWithType:$type]
    do_text: [$view setTitle:@"$text" forState:UIControlStateNormal]
