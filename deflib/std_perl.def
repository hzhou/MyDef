
subcode: sub_new
    $sub new($class, $self)
      $class = ref($class) || $class;
      if (!defined $self) { $self = { }; }
      bless ($self, $class);
      BLOCK
      return $self

subcode: export(list)
    use Exporter
    our @ISA = qw(Exporter)
    our @EXPORT = qw($(list))

subcode: block
    {
	BLOCK
    }

# -- IO -------------------------
subcode: open_r(name)
    $(if:name~")
	$(set:name=$(name:strip))
    open In, "$(name)" or die "Can't open $(name).\n"
    $while <In>
        BLOCK
    close In

subcode: open_w(name)
    $(if:name~")
	$(set:name=$(name:strip))
    open Out, ">$(name)" or die "Can't write $(name).\n"
    BLOCK
    close Out

subcode: assert(cond)
    $if !($(cond))
        die "$(cond) - FALSE!\n"

subcode: get_file_t(name)
    $(if:name~")
	$(set:name=$(name:strip))
    my $t
    &call block
	open In, "$(name)" or die "Can't open $(name).\n"
	local $/
	$t=<In>
	close In

# -- HTML -----------------------------
subcode: html_tag(tag)
    print Out "<$(tag)>"
    BLOCK
    print Out "</$(tag)>\n"


# -- COMMON PATTERNS ---------------
subcode: topdown_loop(name, top)
    my %$(name)_hash
    my @$(name)_list
    $global @topdown_list
    @topdown_list = ($(top))

    $while my $$(name)=pop @topdown_list
	$if !$$(name)_hash{$$(name)}
	    $$(name)_hash{$$(name)}=1
	    BLOCK

# -- Parser -------------------
subcode: parse_loop(l)
    $while 1
	$if $(l)=~/\G$/gc
	    last
	BLOCK

subcode: if_lex(@pattern)
    $(allow_recurse:10)
    $case $(l)=~/\G$(pattern)/gc
	BLOCK

# -- Parsing indentation ----
subcode: support_indentation
    $global @indent_stack=(0)
    $sub getindent($s)
	use integer;
	1 while $s=~s/\t+/' ' x (length($&) * 8 - length($`) % 8)/e;
	my $i=length($s);
	$if $i==$indent_stack[-1]
	    NOOP
	$elif $i>$indent_stack[-1]
	    push @indent_stack, $i
	$else
	    $while $i<$indent_stack[-1]
		pop @indent_stack;
	
	return $#indent_stack;
