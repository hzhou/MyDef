#---------------------------------------- 
#-- level 2 facility, called within perlcode

subcode: replace_output(name)
    my $tempout=$MyDef::compileutil::out
    $MyDef::compileutil::out=$(name)
    $out=$(name)
    BLOCK
    $MyDef::compileutil::out=$tempout
    $out=$tempout

subcode: push_open_function
    push @$out, "OPEN_FUNC_$fidx"
    push @$out, "SOURCE_INDENT"
    BLOCK
    push @$out, "SOURCE_DEDENT"

subcode: push_indent_block
    $(allow_recurse:10)
    push @$out, "INDENT"
    BLOCK
    push @$out, "DEDENT"

#---- &call perlcode [optional approach]
subcode: grab_codelist
    my $codelist = $MyDef::compileutil::named_blocks{"last_grab"}
    $if $codelist
        $call filter_SOURCE
    $else
        $call @direct

    subcode: filter_SOURCE
        #-- remove SOURCE line ---
        my (@t, $indent)
        $foreach $t in @$codelist
            $if $t=~/^SOURCE_INDENT/
                $indent++
            $elif $t=~/^SOURCE_DEDENT/
                $indent--
            $elif $t!~/^SOURCE/
                $if $indent>0
                    push @t, ("    "x$indent) . $t
                $else
                    push @t, $t
        $codelist = \@t


subcode: filter_codelist
    my $codelist = $MyDef::compileutil::named_blocks{"last_grab"}
    my @source
    $if $codelist
        $foreach $t in @$codelist
            $if $t =~/^SOURCE/
                push @source, $t
            $else
                BLOCK
        # $call @debug
    $else
        $call @direct
    $if @source
        MyDef::compileutil::parseblock({source=>\@source, name=>"filtered"})

    subcode: debug
        $foreach $l in @source
            $print [$l]

