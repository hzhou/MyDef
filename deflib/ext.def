macros:
    hascode: $MyDef::def->{codes}->{"$1"} or $MyDef::page->{codes}->{"$1"}
    callsub: MyDef::compileutil::callsub($1)
    getmacro: MyDef::compileutil::get_macro_word($1, 1)
    setmacro: MyDef::compileutil::set_current_macro

#---------------------------------------- 
#-- level 2 facility, called within perlcode
#--    ref: output_www/deflib/html/code.def

subcode: replace_output(name)
    my $old_out=MyDef::compileutil::set_output($(name))
    BLOCK
    MyDef::compileutil::set_output($old_out)

subcode: push_indent_block
    $(allow_recurse:10)
    push @$out, "INDENT"
    BLOCK
    push @$out, "DEDENT"

#---- &call perlcode [optional approach]
subcode: grab_codelist
    require MyDef::ext
    my $codelist = $MyDef::ext::grab_codelist
    $if !$codelist
        $call @direct

subcode: filter_codelist
    my $codelist = $MyDef::compileutil::named_blocks{"last_grab"}
    my @source
    $if $codelist
        $foreach $t in @$codelist
            $if $t =~/^SOURCE/
                push @source, $t
            $else
                BLOCK
        # $call @debug
    $else
        $call @direct
    $if @source
        MyDef::compileutil::parseblock({source=>\@source, name=>"filtered"})

    subcode: debug
        $foreach $l in @source
            $print [$l]

#---------------------------------------- 
#-- used in perl prgrams
subcode: grab_block
    my $codelist = $MyDef::compileutil::named_blocks{"last_grab"} 
    push @$out, "my \@source=(\n"
    $foreach $l in @$codelist
        $if $l=~/^SOURCE_INDENT/
            push @$out, "    'INDENT',"
        $elif $l=~/^SOURCE_DEDENT/
            push @$out, "    'DEDENT',"
        $elif $l!~/^SOURCE/
            $l=~s/'/\\'/g
            push @$out, "    '$l',"
    push @$out, ");"
