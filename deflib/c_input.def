subcode:: _autoload
    $struct(c_input) FILE * f, s_buf, n_size, n_start, n_end, n_pos, b_eof, n_bulk_size
    $list c_input_create, c_input_delete
    $list c_input_flush, c_input_file
    $list c_input_add

fncode: c_input_create(n_size)
    $local struct c_input * b
    $allocate b
    $allocate(n_size) b->s_buf
    b->n_size=n_size
    b->n_start=0
    b->n_end=0
    b->n_pos=0
    b->f=NULL
    b->b_eof=1
    b->n_bulk_size=1
    return b

fncode: c_input_delete(struct c_input * b)
    free(b->s_buf)
    free(b)

fncode: c_input_flush(struct c_input * b)
    b->n_start=0
    b->n_end=0
    b->n_pos=0

# -----
fncode: c_input_file(struct c_input *b, FILE * f, n_bulk_size)
    b->f=f
    b->b_eof=0
    b->n_bulk_size=n_bulk_size

fncode: c_input_add(struct c_input * b, s_mem, n_size)
    $call cimem_check_space, n_size
    $call cimem_copy

subcode: cimem_check_space(more)
    $if b->n_size-b->n_end<$(more)
	$if b->n_size>$(more)+b->n_end-b->n_start
	    $call cimem_shift
	$else
	    $call cimem_realloc, $(more)

subcode: cimem_copy
    memcpy(b-s_buf, s_mem, n_size)
    b->n_end+=n_size
subcode: cimem_shift
    memmove(b->s_buf, b->s_buf+b->n_start, b->n_end-b->n_start)
    b->n_end=-=b->n_start
    b->n_start=0
subcode: cimem_realloc(more)
    tn_size_new=$(more)+b->n_end-b->n_start+128
    b->s_buf=realloc(b->s_buf, tn_size_new)
    b->n_size=tn_size_new
    $if b->n_start>0
	$call cimem_shift

# ----- 
# default get_char, need define b
subcode: get_char
    $if b->n_pos==b->n_end
	$if b->b_eof
	    return EOF
	$elif b_interactive
	    $call cimem_check_space, 1
	    c=fgetc(b->f)
	    $if c==EOF
		b->b_eof=1
		return EOF
	    b->s_buf[b->n_end]=(char)c
	    b->n_end++
	$else
	    $call cimem_check_space, 1000
	    tn_ret=fread(b->s_buf+b->n_end, 1000, 1, b->f)
	    $if tn_ret==0
		b->b_eof=1
		return EOF
	    $else
		b->n_end+=tn_ret
    c=(int)(b->s_buf[b->n_pos]
    b->n_pos++
