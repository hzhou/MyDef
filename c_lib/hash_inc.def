subcode:: _autoload
    $class hash, int_hash, str_hash
    $include mydef_hash.h

#----------------------------------------------- 
subcode: hash_init(var, scope, @type)
    $call str_hash_init, $(var), $(scope), $(type)

subcode: int_hash_init(var, scope, @type)
    $call new_hash, int

subcode: str_hash_init(var, scope, @type)
    $call new_hash, str

subcode: new_hash(type)
    $$(scope) struct $(type)_hash * $(var)
    $allocate $(var)
    memset($(h), 0, sizeof(*$(var))

    $call init_hash_record

    $set_var_attr $(var), class=hash, member_count=$(type_n)
    $set_var_attr $(var), type=$(type)
    $set_var_attr $(var), exit=hash_exit

subcode: hash_exit(var)
    $get_var_att $(var), type
    $(type)_hash_exit($(var))

subcode: init_hash_record
    $(if:type=default)
        $(set:type_n=0)
    $(else)
        $(set:type_n=$(type:list:n))
        $(if:type_n=1)
            $(var)->n_rec_size=sizeof($(type))
            $set_var_attr $(var), record=$(type)
        $(else)
            $tuple $(type)
            $(var)->n_rec_size=sizeof($(T))
            $set_var_attr $(var), record=$(T)

#----------------------------------------------- 
subcode: hash_lookup_condition(var, key)
    $get_var_att $(var), type
    $(if:type=int)
        $yield hash_lookup_int($(var), $(key))
    $(else)
        $call hash_lookup_check_str_key, $(key)
        $yield hash_lookup_str($(var), $(key), $(keylen))
    
subcode: hash_lookup(var, key)
    $get_var_att $(var), type

subcode: hash_lookup_left(var, key)
    $get_var_att $(var), type

#-- str key utility -------------
subcode: hash_lookup_check_str_key(key)
    $(if:key~^")
	$(export:keylen=$(key:strlen))
    $(else)
	$get_type(keytype) $(key)
	$(if:keytype!=char *)
	    $(export:key="$(key)")
	    $(export:keylen=$(key:len))
	$(else)
	    $(export:keylen=strlen($(key)))

