include: macros_util/debug.def
include: macros_output/case.def
include: macros_output/for.def

subcode: output_main
    our $debug;
    our $mode;
    our $page;
    our $out;
    $call @package_globals

    $sub get_interface
	$(if:interface_type)
	    my $interface_type="$(interface_type)"
	$(else)
	    my $interface_type="general"
	return (\&init_page, \&parsecode, \&set_output, \&modeswitch, \&dumpout, $interface_type);

    $sub init_page
	($page)=@_;
	# ---- Set output file extension
	my $ext="$(ext)"
	$if $MyDef::var->{filetype}
	    $ext=$MyDef::var->{filetype}
	$if $page->{type}
	    $ext=$page->{type};
	$call @init_page
	$page->{pageext}=$ext 
	my $init_mode=$page->{init_mode}
	return ($ext, $init_mode)

    $sub set_output
	$out = shift

    # ---- www has php,  html and js mode ----------
    $sub modeswitch
	my ($mode, $in)=@_;
	$call @modeswitch

    # ---- All specialized parsing goes here.
    $sub parsecode
	my $l=shift;
	$if $debug eq "parse"
	    $call dump_line, parsecode
	$if $l=~/^DEBUG (\w+)/
	    $if $1 eq "OFF"
		$debug=0
	    $else
		$debug=$1
	    return
	$call parsecode_eval
	$call parsecode

    # ---- Final output, allows for 2nd pass translation
    $sub dumpout($f, $out, $pagetype)
	my $dump={out=>$out,f=>$f}
	$call @dumpout
	MyDef::dumpout::dumpout($dump);

    $call single_blocks
    $call @support_subs

    1;

# -------------------------
subcode: inherit_c
    use MyDef::output_c
    $(export:C=MyDef::output_c::)
    $(export:Cpage=$MyDef::output_c::page)
    $(export:Cout=$MyDef::output_c::out)

    $call @package_globals

    $sub get_interface
	return (\&init_page, \&parsecode, \&$(C)set_output, \&modeswitch, \&dumpout);

    $sub modeswitch($mode, $in)
	$call @on_modeswitch

    $sub init_page
	my ($page)=@_
	$if !$page->{type}
	    $page->{type}="$(ext)"
	my ($ext, $c_init_mode) = $(C)init_page(@_)
	$call @on_init
	return ($ext, "$(init_mode)");

    $sub parsecode($l)
	$call parsecode_eval
	$call @on_parsecode
	return $(C)parsecode($l)

    $sub dumpout($f, $out, $pagetype)
	$call @on_dumpout
	$(C)dumpout($f, $out, $pagetype)

    $call @support_subs

    1;

# -------------------------
subcode: parsecode
    push @$out, $l

subcode: parsecode_PRINT
    push @$out, $l
    return 0

subcode: parsecode_eval
    $case $l=~/^\$eval\s+(\w+)(.*)/
	my ($codename, $param)=($1, $2)
	$param=~s/^\s*,\s*//
	my $t=MyDef::compileutil::eval_sub($codename)
	#print "eval [$t]\n\n"
	eval $t
	$if $@
	    print "Error [$l]: $@\n"
	    print "  $t\n"
	return

subcode: parsecode_common
    # print "parsecode_common: input [$l]\n"
    $if $MyDef::compileutil::cur_mode eq "PRINT"
	$call @parsecode_PRINT
    $call @parsecode_special
    $elif $l=~/^\s*\$(\w+)\((.*?)\)\s+(.*)$/
	# $function(param1) param2 ---------------------------
	my ($func, $param1, $param2)=($1, $2, $3)
	$call parsecode_plugin
	$call parsecode_func_param
	$call parsecode_check_plugin
    $elif $l=~/^\s*\$(\w+)\s*(.*)$/
	# $function param  -----------------------------------
	my ($func, $param)=($1, $2)
	$if $param !~ /^=/
	    $call parsecode_func
	    $call parsecode_check_plugin

    $call @parsecode_other

    # print "parsecode_common: push out [$l]\n"
    push @$out, $l

subcode: single_blocks
    $sub single_block($t1, $t2, $scope)
	push @$out, "$t1";
	push @$out, "INDENT";
	push @$out, "BLOCK";
	push @$out, "DEDENT";
	push @$out, "$t2";
	$if $scope
	    return "NEWBLOCK-$scope"
	$else
	    return "NEWBLOCK";

    $sub single_block_pre_post($pre, $post, $scope)
	$if $pre
	    push @$out, @$pre
	push @$out, "BLOCK";
	$if $post
	    push @$out, @$post
	$if $scope
	    return "NEWBLOCK-$scope";
	$else
	    return "NEWBLOCK";

# ------------------------------------------
subcode: debug_plugin
    $while my ($funcname, $codename)=each %plugin_statement
	print " plugin statement:  $funcname => $codename\n"
    $while my ($funcname, $codename)=each %plugin_condition
	print " plugin condition:  $funcname => $codename\n"

subcode: parsecode_plugin
    $global %plugin_statement
    $global %plugin_condition
    $case $func eq "plugin"
	$if $param2=~/_condition$/
	    $plugin_condition{$param1}=$param2
	$else
	    $plugin_statement{$param1}=$param2
	return

subcode: parsecode_run_eval
    my $codename=$plugin_statement{$func}
    my $t=MyDef::compileutil::eval_sub($codename)
    eval $t
    $if $@
	print "plugin - $func\n"
	print "[$t]\n"
	print "eval error: [$@]\n"

subcode: parsecode_check_plugin
    $if $plugin_statement{$func}
	$call parsecode_run_eval
	return

subcode: parse_condition_check_plugin
    $if $plugin_condition{$func}
	my $condition
	$call parsecode_run_eval
	return $condition

# -------------------------------------------
subcode: parse_condition_map
    my @args=MyDef::utils::proper_split($param)
    my $map=shift @args
    # print "map: [$map]\n"
    $if $map=~/\$map\((.*?),\s+(.*)\)/
	# print "map: sep [$1], template [$2]\n"
	my $sep=$1
	my $template=$2
	my @segs
	$foreach $a in @args
	    my $t=$template
	    $t=~s/\$1/$a/g
	    push @segs, $t
	return $pre . join($sep, @segs)
    $else
	return $pre . $param

# -------------------------------------------
