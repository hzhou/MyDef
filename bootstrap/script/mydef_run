#!/usr/bin/perl
use strict;
use MyDef;
my (%config, $pagename);
my $page;
foreach my $a (@ARGV){
    if($a=~/-m(\w+)$/){
        $config{module}=$1;
    }
    elsif($a=~/-rule$/){
        $config{dump_rule}=1;
    }
    elsif($a=~/(.*)\.def/){
        $config{def_file}=$a;
    }
    elsif(-f $a){
        $config{_file}=$a;
    }
}
if($config{def_file}){
    guess_module:
    my $under_page;
    open In, "$config{def_file}" or die "Can't open $config{def_file}.\n";
    while(<In>){
        if(/^page:\s*(\w+)/){
            $under_page = $1;
        }
        if(/module:\s*(\w+)/){
            if(!$config{module} or $pagename eq $under_page){
                $config{module}=$1;
            }
        }
        elsif(/^run:\s*(\S+\.def)/){
            $config{def_file}=$1;
            goto guess_module;
        }
        elsif(/^run:\s*(\w+)/){
            $pagename = $1;
        }
        elsif(/^prerun:\s*(.+)/){
            system $1;
        }
        elsif(/^\/\*\s*expect (\S+):\s*$/){
            $config{expect_type}=$1;
            my @expect;
            while(<In>){
                if(/^\*\//){
                    $config{expect} = \@expect;
                    last;
                }
                else{
                    s/\s+/ /g;
                    s/\s*$//g;
                    push @expect, $_;
                }
            }
        }
    }
    close In;
    if(!$config{module}){
        $config{module}=$MyDef::var->{module};
    }
    if(!$config{module}){
        $config{module}="general";
    }
    MyDef::init(%config);
    MyDef::import_data($config{def_file});
    if(!$pagename){
        $pagename=$MyDef::def->{pagelist}->[0];
    }
    if($pagename){
        MyDef::createpage($pagename);
        $page=$MyDef::page;
        if($page->{skiprun}){
            exit;
        }
    }
    else{
        exit;
    }
}
elsif($config{_file}){
    $page={outname=>$config{_file}};
}
else{
    die "Usage: $0 input_defile.def\n";
}
my $file=$page->{outname};
my $file_dir;
if($file=~/(.*)\/(.+)/){
    $file_dir=$1;
}
my ($name, $type);
if($file=~/^(.*)\.(\w+)$/){
    ($name, $type)=($1, $2);
}
my $exe = "$name";
if($page->{exe_type}){
    $exe .= "." . $page->{exe_type};
}
elsif($MyDef::var->{exe_type}){
    $exe .= "." . $MyDef::var->{exe_type};
}
elsif($config{module} eq "win32"){
    $exe .= ".exe";
}
my $cmd;
if($page->{run}){
    $cmd=$page->{run};
}
elsif($type=~/^c(pp)?$/){
    my $cc = "gcc -std=c99 -O2";
    if($file=~/\.cpp$/){
        $cc = "g++ -std=c++11 -O2";
    }
    if($page->{cc}){
        $cc = $page->{cc};
    }
    elsif($MyDef::var->{cc}){
        $cc = $MyDef::var->{cc};
    }
    $cmd="$cc -o$exe $file $page->{lib_list}";
    if($config{dump_rule}){
        if($exe=~/([^\/]+)$/){
            $exe = "script/$1";
        }
        if($name=~/([^\/]+)$/){
            $name = "$1";
        }
        $cmd = '$'."{CC} -o\$@ \$< $page->{lib_list}";
        print "\nCC=$cc\n\n";
        print "$exe: $name\n";
        print "\t$cmd\n";
        exit;
    }
    else{
        if($exe!~/\//){
            $exe = "./$exe";
        }
        my $exe = "$exe";
        if($page->{exe}){
            $exe = $page->{exe};
        }
        elsif($MyDef::var->{exe}){
            $exe = $MyDef::var->{exe};
        }
        if($exe ne "none"){
            if($file_dir and $exe=~/CD\s+(.*)/){
                my $t = $1;
                $t=~s/$file_dir\///g;
                $exe = "cd $file_dir && $t";
            }
            $cmd .= " && $exe";
        }
    }
}
elsif($type eq "java"){
    $cmd="javac $file";
    my $exe = "CD java $name";
    if($page->{exe}){
        $exe = $page->{exe};
    }
    elsif($MyDef::var->{exe}){
        $exe = $MyDef::var->{exe};
    }
    if($exe ne "none"){
        if($file_dir and $exe=~/CD\s+(.*)/){
            my $t = $1;
            $t=~s/$file_dir\///g;
            $exe = "cd $file_dir && $t";
        }
        $cmd .= " && $exe";
    }
}
elsif($type eq "f"){
    $cmd="gfortran -g -o$exe $file $page->{lib_list}";
    if($exe!~/\//){
        $exe = "./$exe";
    }
    my $exe = "$exe";
    if($page->{exe}){
        $exe = $page->{exe};
    }
    elsif($MyDef::var->{exe}){
        $exe = $MyDef::var->{exe};
    }
    if($exe ne "none"){
        if($file_dir and $exe=~/CD\s+(.*)/){
            my $t = $1;
            $t=~s/$file_dir\///g;
            $exe = "cd $file_dir && $t";
        }
        $cmd .= " && $exe";
    }
}
elsif($type eq "rs"){
    $cmd="rustc $file";
    if($exe!~/\//){
        $exe = "./$exe";
    }
    my $exe = "$exe";
    if($page->{exe}){
        $exe = $page->{exe};
    }
    elsif($MyDef::var->{exe}){
        $exe = $MyDef::var->{exe};
    }
    if($exe ne "none"){
        if($file_dir and $exe=~/CD\s+(.*)/){
            my $t = $1;
            $t=~s/$file_dir\///g;
            $exe = "cd $file_dir && $t";
        }
        $cmd .= " && $exe";
    }
}
elsif($type eq "hs"){
    $cmd="ghc -o$exe $file";
    if($exe!~/\//){
        $exe = "./$exe";
    }
    my $exe = "$exe";
    if($page->{exe}){
        $exe = $page->{exe};
    }
    elsif($MyDef::var->{exe}){
        $exe = $MyDef::var->{exe};
    }
    if($exe ne "none"){
        if($file_dir and $exe=~/CD\s+(.*)/){
            my $t = $1;
            $t=~s/$file_dir\///g;
            $exe = "cd $file_dir && $t";
        }
        $cmd .= " && $exe";
    }
}
elsif($type eq "asm"){
    $cmd="nasm -f elf $file && ld -m elf_i386 $name.o -o$exe";
    if($exe!~/\//){
        $exe = "./$exe";
    }
    my $exe = "$exe";
    if($page->{exe}){
        $exe = $page->{exe};
    }
    elsif($MyDef::var->{exe}){
        $exe = $MyDef::var->{exe};
    }
    if($exe ne "none"){
        if($file_dir and $exe=~/CD\s+(.*)/){
            my $t = $1;
            $t=~s/$file_dir\///g;
            $exe = "cd $file_dir && $t";
        }
        $cmd .= " && $exe";
    }
}
elsif($type eq "s"){
    $cmd="gcc -masm=intel -o$exe $file";
    if($exe!~/\//){
        $exe = "./$exe";
    }
    my $exe = "$exe";
    if($page->{exe}){
        $exe = $page->{exe};
    }
    elsif($MyDef::var->{exe}){
        $exe = $MyDef::var->{exe};
    }
    if($exe ne "none"){
        if($file_dir and $exe=~/CD\s+(.*)/){
            my $t = $1;
            $t=~s/$file_dir\///g;
            $exe = "cd $file_dir && $t";
        }
        $cmd .= " && $exe";
    }
}
elsif($type eq "pas"){
    $cmd="fpc $file";
    if($exe!~/\//){
        $exe = "./$exe";
    }
    my $exe = "$exe";
    if($page->{exe}){
        $exe = $page->{exe};
    }
    elsif($MyDef::var->{exe}){
        $exe = $MyDef::var->{exe};
    }
    if($exe ne "none"){
        if($file_dir and $exe=~/CD\s+(.*)/){
            my $t = $1;
            $t=~s/$file_dir\///g;
            $exe = "cd $file_dir && $t";
        }
        $cmd .= " && $exe";
    }
}
elsif($type eq "sh"){
    $cmd = "sh $file";
}
elsif($type eq "pl"){
    $cmd = "perl $file";
}
elsif($type eq "php"){
    $cmd = "php $file";
}
elsif($type eq "py"){
    $cmd = "python $file";
}
elsif($type eq "go"){
    $cmd = "go run $file";
}
elsif($type eq "js"){
    $cmd = "nodejs $file";
}
elsif($type eq "tcl"){
    $cmd = "tclsh $file";
}
elsif($type eq "lua"){
    $cmd = "lua $file";
}
elsif($type eq "lisp"){
    $cmd = "clisp $file";
}
elsif($type eq "tex"){
    $cmd = "run_tex $file";
}
elsif($type eq "latex"){
    $cmd = "run_tex $file";
}
elsif($type eq "awk"){
    $cmd = "awk -f $file";
}
if($config{expect} and $config{expect_type} ne "output"){
    my $expect = $config{expect};
    my $i = 0;
    my ($n_ok, $n_nok);
    open In, "$file" or die "Can't open $file.\n";
    while(<In>){
        print $_;
        s/\s+/ /g;
        s/\s*$//g;
        if($expect->[$i] ne $_){
            $n_nok++;
            print "not ok: [$expect->[$i]]\n";
        }
        else{
            $n_ok++;
        }
        $i++;
    }
    close In;
    print "--------------------------\n";
    if($n_ok>0){
        print "    \x1b[32mok\x1b[0m $n_ok/$i\n";
    }
    if($n_nok>0){
        print "    \x1b[31mnot ok\x1b[0m $n_nok/$i\n";
    }
}
elsif($cmd){
    if($page->{arg}){
        $cmd .= " $page->{arg}";
    }
    if($config{expect_type} eq "output"){
        if($cmd=~/(.*) && (.*)/){
            print "$1\n";
            system $1;
            if($? == -1){
                die "failed to compile\n";
            }
            elsif($? & 0xff){
                die "compile failure\n";
            }
            $cmd = $2;
        }
        my $expect = $config{expect};
        my $i = 0;
        my ($n_ok, $n_nok);
        print "$cmd\n";
        open In, "$cmd |" or die "Can't open $cmd |.\n";
        while(<In>){
            print $_;
            s/\s+/ /g;
            s/\s*$//g;
            if($expect->[$i] ne $_){
                $n_nok++;
                print "not ok: [$expect->[$i]]\n";
            }
            else{
                $n_ok++;
            }
            $i++;
        }
        close In;
        print "--------------------------\n";
        if($n_ok>0){
            print "    \x1b[32mok\x1b[0m $n_ok/$i\n";
        }
        if($n_nok>0){
            print "    \x1b[31mnot ok\x1b[0m $n_nok/$i\n";
        }
    }
    else{
        print "$cmd\n";
        system $cmd;
    }
}
else{
    die "do not know how to run it\n";
}
