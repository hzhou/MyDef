MyDef is a macro system that allows us to write source code of almost any language in our own way -- in specific, python indented block style, flexibility of a macro system, and some merits of literate programing.

The python style: we write our codes in indented block style already, why do we still bother those brackets and semicolons? A coding style is so important then why not force it.

The macro system: macros allow us to refactor codes without limitations -- unlike functions, which need maintain interfaces.

The literate programming: Arange the code in the way best for human reading.

Here is an example:


################ $ cat tests/c_structures.def #####################
page: test
    subcode: main
        #$call memory_utility
        $struct(record) n_id=1, char * name
        /***********************************/
        $list n_main
        $list test, do_something
    fncode: n_main
        $local strecord[10]
        $local pstrecord
        test()
    fncode: test
        #DEBUG
        pn_test=do_something()
        $for i=0:10
            printf("%d: %d\n", i, pn_test[i])
    fncode: do_something
        $allocate(10) pn_test
        $local s_buffer[100]
        $for i=0:10
            pn_test[i]=i*i
        return pn_test

#----------------------------------------------------------

INSTALL

1. MyDef currently is in perl. First setup a custome installation environment:
    PATH=$PATH:/home/hzhou/bin
    PERL5LIB=/home/hzhou/lib/perl5
    MYDEFLIB=/home/hzhou/lib/MyDef
    export PATH PERL5LIB MYDEFLIB

    alias pmake="perl Makefile.PL INSTALL_BASE=/home/hzhou" 

    The purpose is to install into one's home directory rather than system folders. I assume it is understood that /home/hzhou should be replaced with your own home directory on your specific computer.

2. The real source of MyDef is in MyDef, but you need MyDef installed to compile the source. So I put a version of MyDef perl code in cmp folder. It is there also for the rescue when we messed up with the source code and MyDef stops compile.
    cd cmp
    pmake
    make
    make install
    cd ..

3. Now we try compile MyDef, which is the real source that is up-to-date
    mydef_make.pl 
    make
    cd MyDef # It is the output folder, cmp was copied from there
    pmake 
    make
    make install

4. Now we could goto tests folder and run some tests.
    cd tests
    perl test.pl general_test.def 
    perl test.pl c_structures.def
    perl test.pl xs_test.def
    perl test.pl win32_test.def
    perl test.pl apple_test.def

    The win32 and apple test still need to be compiled over using visual studio and xcode to complete the final check.

5. In general, say you want to work on some source code using MyDef, first make a empty directory, then in that directory run
    mydef_make.pl

    It will ask for module type and output directory and writes a config file. Then you could just start writing .def files there.

    In each def file, MyDef looks for page: directives and outputs files that corresponding to the page name. All the macros are defined with subcode directives. subcode main is the entry point for that page.

6. Interested for more? 
    Hui Zhou
    hzhou @ hzsolutions . net

